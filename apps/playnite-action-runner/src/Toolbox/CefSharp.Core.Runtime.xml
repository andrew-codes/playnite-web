<?xml version="1.0"?>
<doc>
    <assembly>
        "CefSharp.Core.Runtime"
    </assembly>
    <members>
        <member name="P:CefSharp.Core.PostData.HasExcludedElements">
            <summary>
Returns true if the underlying POST data includes elements that are not
represented by this IPostData object (for example, multi-part file upload
data). Modifying IPostData objects with excluded elements may result in
the request failing.
</summary>
        </member>
        <member name="M:CefSharp.Core.PostData.CreatePostDataElement">
            <summary>
Create a new <see cref="T:CefSharp.IPostDataElement" /> instance
</summary>
            <returns>PostDataElement</returns>
        </member>
        <member name="M:CefSharp.Core.PostData.RemoveElements">
            <summary>
Remove all existing post data elements.
</summary>
        </member>
        <member name="M:CefSharp.Core.PostData.RemoveElement(CefSharp.IPostDataElement)">
            <summary>
Remove  the specified <see cref="T:CefSharp.IPostDataElement" />.
</summary>
            <param name="element">element to be removed.</param>
            <returns> Returns true if the add succeeds.</returns>
        </member>
        <member name="M:CefSharp.Core.PostData.AddElement(CefSharp.IPostDataElement)">
            <summary>
Add the specified <see cref="T:CefSharp.IPostDataElement" />.
</summary>
            <param name="element">element to be added.</param>
            <returns>Returns true if the add succeeds.</returns>
        </member>
        <member name="P:CefSharp.Core.PostData.Elements">
            <summary>
Retrieve the post data elements.
</summary>
        </member>
        <member name="P:CefSharp.Core.PostData.IsReadOnly">
            <summary>
Returns true if this object is read-only.
</summary>
        </member>
        <member name="M:CefSharp.Core.PostData.#ctor">
            <summary>
Initializes a new instance of the PostData class.
</summary>
        </member>
        <member name="M:CefSharp.Core.PostData.ThrowIfReadOnly">
            <summary>
Throw exception if Readonly
</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
        </member>
        <member name="M:CefSharp.Core.PostData.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:CefSharp.Core.PostData.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="T:CefSharp.Core.PostData">
            <summary>
Form Post Data
</summary>
            <seealso cref="!:T:IPostData" />
        </member>
        <member name="M:CefSharp.Core.PopupFeatures.#ctor(CefPopupFeatures!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructor.
</summary>
            <param name="popupFeatures">The popup features.</param>
        </member>
        <member name="T:CefSharp.Core.PopupFeatures">
            <summary>
Class representing popup window features.
</summary>
            <exclude />
        </member>
        <member name="T:CefSharp.Core.NativeMethodWrapper">
            <exclude />
        </member>
        <member name="M:CefSharp.Core.Cef.PostAction(CefSharp.CefThreadIds,System.Action)">
            <summary>
Post an action for execution on the specified thread.
</summary>
            <param name="threadId">thread id</param>
            <param name="action">action to execute</param>
            <returns>bool</returns>
        </member>
        <member name="M:CefSharp.Core.Cef.PostDelayedAction(CefSharp.CefThreadIds,System.Action,System.Int32)">
            <summary>
Post an action for delayed execution on the specified thread.
</summary>
            <param name="threadId">thread id</param>
            <param name="action">action to execute</param>
            <param name="delayInMs">delay in ms</param>
            <returns>bool</returns>
        </member>
        <member name="M:CefSharp.Core.Cef.WaitForBrowsersToClose(System.Int32)">
            <summary>
Helper method to ensure all ChromiumWebBrowser instances have been
closed/disposed, should be called before Cef.Shutdown.
Disposes all remaning ChromiumWebBrowser instances
then waits for CEF to release it's remaning CefBrowser instances.
Finally a small delay of 50ms to allow for CEF to finish it's cleanup.
Should only be called when MultiThreadedMessageLoop = true;
(Hasn't been tested when when CEF integrates into main message loop).
</summary>
            <param name="timeoutInMiliseconds">The timeout in miliseconds.</param>
        </member>
        <member name="M:CefSharp.Core.Cef.WaitForBrowsersToClose">
            <summary>
Helper method to ensure all ChromiumWebBrowser instances have been
closed/disposed, should be called before Cef.Shutdown.
Disposes all remaning ChromiumWebBrowser instances
then waits for CEF to release it's remaning CefBrowser instances.
Finally a small delay of 50ms to allow for CEF to finish it's cleanup.
Should only be called when MultiThreadedMessageLoop = true;
(Hasn't been tested when when CEF integrates into main message loop).
</summary>
        </member>
        <member name="M:CefSharp.Core.Cef.EnableWaitForBrowsersToClose">
            <summary>
WaitForBrowsersToClose is not enabled by default, call this method
before Cef.Initialize to enable. If you aren't calling Cef.Initialize
explicitly then this should be called before creating your first
ChromiumWebBrowser instance.
</summary>
        </member>
        <member name="M:CefSharp.Core.Cef.GetMimeType(System.String)">
            <summary>
Returns the mime type for the specified file extension or an empty string if unknown.
</summary>
            <param name="extension">file extension</param>
            <returns>Returns the mime type for the specified file extension or an empty string if unknown.</returns>
        </member>
        <member name="M:CefSharp.Core.Cef.SetCrashKeyValue(System.String,System.String)">
            <summary>
Sets or clears a specific key-value pair from the crash metadata.
</summary>
        </member>
        <member name="P:CefSharp.Core.Cef.CrashReportingEnabled">
            <summary>
Crash reporting is configured using an INI-style config file named
crash_reporter.cfg. This file must be placed next to
the main application executable. File contents are as follows:

 # Comments start with a hash character and must be on their own line.

 [Config]
 ProductName=&lt;Value of the "prod" crash key; defaults to "cef"&gt;
 ProductVersion=&lt;Value of the "ver" crash key; defaults to the CEF version&gt;
 AppName=&lt;Windows only; App-specific folder name component for storing crash
          information; default to "CEF"&gt;
 ExternalHandler=&lt;Windows only; Name of the external handler exe to use
                  instead of re-launching the main exe; default to empty&gt;
 ServerURL=&lt;crash server URL; default to empty&gt;
 RateLimitEnabled=&lt;True if uploads should be rate limited; default to true&gt;
 MaxUploadsPerDay=&lt;Max uploads per 24 hours, used if rate limit is enabled;
                   default to 5&gt;
 MaxDatabaseSizeInMb=&lt;Total crash report disk usage greater than this value
                      will cause older reports to be deleted; default to 20&gt;
 MaxDatabaseAgeInDays=&lt;Crash reports older than this value will be deleted;
                       default to 5&gt;

 [CrashKeys]
 my_key1=&lt;small|medium|large&gt;
 my_key2=&lt;small|medium|large&gt;

Config section:

If "ProductName" and/or "ProductVersion" are set then the specified values
will be included in the crash dump metadata. 

If "AppName" is set on Windows then crash report information (metrics,
database and dumps) will be stored locally on disk under the
"C:\Users\[CurrentUser]\AppData\Local\[AppName]\User Data" folder. 

If "ExternalHandler" is set on Windows then the specified exe will be
launched as the crashpad-handler instead of re-launching the main process
exe. The value can be an absolute path or a path relative to the main exe
directory. 

If "ServerURL" is set then crashes will be uploaded as a multi-part POST
request to the specified URL. Otherwise, reports will only be stored locally
on disk.

If "RateLimitEnabled" is set to true then crash report uploads will be rate
limited as follows:
 1. If "MaxUploadsPerDay" is set to a positive value then at most the
    specified number of crashes will be uploaded in each 24 hour period.
 2. If crash upload fails due to a network or server error then an
    incremental backoff delay up to a maximum of 24 hours will be applied for
    retries.
 3. If a backoff delay is applied and "MaxUploadsPerDay" is &gt; 1 then the
    "MaxUploadsPerDay" value will be reduced to 1 until the client is
    restarted. This helps to avoid an upload flood when the network or
    server error is resolved.

If "MaxDatabaseSizeInMb" is set to a positive value then crash report storage
on disk will be limited to that size in megabytes. For example, on Windows
each dump is about 600KB so a "MaxDatabaseSizeInMb" value of 20 equates to
about 34 crash reports stored on disk.

If "MaxDatabaseAgeInDays" is set to a positive value then crash reports older
than the specified age in days will be deleted.

CrashKeys section:

Any number of crash keys can be specified for use by the application. Crash
key values will be truncated based on the specified size (small = 63 bytes,
medium = 252 bytes, large = 1008 bytes). The value of crash keys can be set
from any thread or process using the Cef.SetCrashKeyValue function. These
key/value pairs will be sent to the crash server along with the crash dump
file. Medium and large values will be chunked for submission. For example,
if your key is named "mykey" then the value will be broken into ordered
chunks and submitted using keys named "mykey-1", "mykey-2", etc.
</summary>
            <returns>Returns true if crash reporting is enabled.</returns>
        </member>
        <member name="M:CefSharp.Core.Cef.ColorSetARGB(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
Helper function (wrapper around the CefColorSetARGB macro) which combines
the 4 color components into an uint32 for use with BackgroundColor property
</summary>
            <param name="a">Alpha</param>
            <param name="r">Red</param>
            <param name="g">Green</param>
            <param name="b">Blue</param>
            <returns>Returns the color.</returns>
        </member>
        <member name="M:CefSharp.Core.Cef.GetGlobalRequestContext">
            <summary>
Gets the Global Request Context. Make sure to Dispose of this object when finished.
The earlier possible place to access the IRequestContext is in IBrowserProcessHandler.OnContextInitialized.
Alternative use the ChromiumWebBrowser BrowserInitialized (OffScreen) or IsBrowserInitializedChanged (WinForms/WPF) events.
</summary>
            <returns>Returns the global request context or null if the RequestContext has not been initialized yet.</returns>
        </member>
        <member name="M:CefSharp.Core.Cef.CurrentlyOnThread(CefSharp.CefThreadIds)">
            <summary>
Returns true if called on the specified CEF thread.
</summary>
            <returns>Returns true if called on the specified thread.</returns>
        </member>
        <member name="M:CefSharp.Core.Cef.EnableHighDPISupport">
            <summary>
Call during process startup to enable High-DPI support on Windows 7 or newer.
Older versions of Windows should be left DPI-unaware because they do not
support DirectWrite and GDI fonts are kerned very badly.
</summary>
        </member>
        <member name="M:CefSharp.Core.Cef.ClearSchemeHandlerFactories">
            <summary>
Clear all scheme handler factories registered with the global request context.
Returns false on error. This function may be called on any thread in the browser process.
Using this function is equivalent to calling Cef.GetGlobalRequestContext().ClearSchemeHandlerFactories().
</summary>
            <returns>Returns false on error.</returns>
        </member>
        <member name="M:CefSharp.Core.Cef.ShutdownWithoutChecks">
            <summary>
This method should only be used by advanced users, if you're unsure then use Cef.Shutdown().
This function should be called on the main application thread to shut down
the CEF browser process before the application exits. This method simply obtains a lock
and calls the native CefShutdown method, only IsInitialized is checked. All ChromiumWebBrowser
instances MUST be Disposed of before calling this method. If calling this method results in a crash
or hangs then you're likely hanging on to some unmanaged resources or haven't closed all of your browser
instances
</summary>
        </member>
        <member name="M:CefSharp.Core.Cef.Shutdown">
            <summary>
Shuts down CefSharp and the underlying CEF infrastructure. This method is safe to call multiple times; it will only
shut down CEF on the first call (all subsequent calls will be ignored).
This method should be called on the main application thread to shut down the CEF browser process before the application exits. 
If you are Using CefSharp.OffScreen then you must call this explicitly before your application exits or it will hang.
This method must be called on the same thread as Initialize. If you don't call Shutdown explicitly then CefSharp.Wpf and CefSharp.WinForms
versions will do their best to call Shutdown for you, if your application is having trouble closing then call thus explicitly.
</summary>
        </member>
        <member name="M:CefSharp.Core.Cef.PreShutdown">
            <summary>
Called prior to calling Cef.Shutdown, this diposes of any remaning
ChromiumWebBrowser instances. In WPF this is used from Dispatcher.ShutdownStarted
to release the unmanaged resources held by the ChromiumWebBrowser instances.
Generally speaking you don't need to call this yourself.
</summary>
        </member>
        <member name="M:CefSharp.Core.Cef.GetGlobalCookieManager(CefSharp.ICompletionCallback)">
            <summary>
Returns the global cookie manager. By default data will be stored at CefSettings.CachePath if specified or in memory otherwise.
Using this method is equivalent to calling Cef.GetGlobalRequestContext().GetCookieManager()
The cookie managers storage is created in an async fashion, whilst this method may return a cookie manager instance,
there may be a short delay before you can Get/Write cookies.
To be sure the cookie manager has been initialized use one of the following
- Access the ICookieManager after ICompletionCallback.OnComplete has been called
- Access the ICookieManager instance in IBrowserProcessHandler.OnContextInitialized.
- Use the ChromiumWebBrowser BrowserInitialized (OffScreen) or IsBrowserInitializedChanged (WinForms/WPF) events.
</summary>
            <param name="callback">If non-NULL it will be executed asnychronously on the CEF UI thread after the manager's storage has been initialized.</param>
            <returns>A the global cookie manager or null if the RequestContext has not yet been initialized.</returns>
        </member>
        <member name="M:CefSharp.Core.Cef.GetGlobalCookieManager">
            <summary>
Returns the global cookie manager. By default data will be stored at CefSettings.CachePath if specified or in memory otherwise.
Using this method is equivalent to calling Cef.GetGlobalRequestContext().GetCookieManager()
The cookie managers storage is created in an async fashion, whilst this method may return a cookie manager instance,
there may be a short delay before you can Get/Write cookies.
To be sure the cookie manager has been initialized use one of the following
- Use the GetGlobalCookieManager(ICompletionCallback) overload and access the ICookieManager after
  ICompletionCallback.OnComplete has been called.
- Access the ICookieManager instance in IBrowserProcessHandler.OnContextInitialized.
- Use the ChromiumWebBrowser BrowserInitialized (OffScreen) or IsBrowserInitializedChanged (WinForms/WPF) events.
</summary>
            <returns>A the global cookie manager or null if the RequestContext has not yet been initialized.</returns>
        </member>
        <member name="M:CefSharp.Core.Cef.ClearCrossOriginWhitelist">
            <summary>Remove all entries from the cross-origin access whitelist.</summary>
            <remarks>
Remove all entries from the cross-origin access whitelist. Returns false if
the whitelist cannot be accessed.
</remarks>
        </member>
        <member name="M:CefSharp.Core.Cef.RemoveCrossOriginWhitelistEntry(System.String,System.String,System.String,System.Boolean)">
            <summary>Remove entry from cross-origin whitelist</summary>
            <param name="sourceOrigin">The origin allowed to be accessed by the target protocol/domain.</param>
            <param name="targetProtocol">The target protocol allowed to access the source origin.</param>
            <param name="targetDomain">The optional target domain allowed to access the source origin.</param>
            <param name="allowTargetSubdomains">If set to true would allow a blah.example.com if the 
    <paramref name="targetDomain" /> was set to example.com
</param>
            <remarks>
Remove an entry from the cross-origin access whitelist. Returns false if
<paramref name="sourceOrigin" /> is invalid or the whitelist cannot be accessed.
</remarks>
        </member>
        <member name="M:CefSharp.Core.Cef.AddCrossOriginWhitelistEntry(System.String,System.String,System.String,System.Boolean)">
            <summary>Add an entry to the cross-origin whitelist.</summary>
            <param name="sourceOrigin">The origin allowed to be accessed by the target protocol/domain.</param>
            <param name="targetProtocol">The target protocol allowed to access the source origin.</param>
            <param name="targetDomain">The optional target domain allowed to access the source origin.</param>
            <param name="allowTargetSubdomains">If set to true would allow a blah.example.com if the 
    <paramref name="targetDomain" /> was set to example.com
</param>
            <returns>Returns false if is invalid or the whitelist cannot be accessed.</returns>
            <remarks>
The same-origin policy restricts how scripts hosted from different origins
(scheme + domain + port) can communicate. By default, scripts can only access
resources with the same origin. Scripts hosted on the HTTP and HTTPS schemes
(but no other schemes) can use the "Access-Control-Allow-Origin" header to
allow cross-origin requests. For example, https://source.example.com can make
XMLHttpRequest requests on http://target.example.com if the
http://target.example.com request returns an "Access-Control-Allow-Origin:
https://source.example.com" response header.
Scripts in separate frames or iframes and hosted from the same protocol and
domain suffix can execute cross-origin JavaScript if both pages set the
document.domain value to the same domain suffix. For example,
scheme://foo.example.com and scheme://bar.example.com can communicate using
JavaScript if both domains set document.domain="example.com".
This method is used to allow access to origins that would otherwise violate
the same-origin policy. Scripts hosted underneath the fully qualified
<paramref name="sourceOrigin" /> URL (like http://www.example.com) will be allowed access to
all resources hosted on the specified <paramref name="targetProtocol" /> and <paramref name="targetDomain" />.
If <paramref name="targetDomain" /> is non-empty and <paramref name="allowTargetSubdomains" /> if false only
exact domain matches will be allowed. If <paramref name="targetDomain" /> contains a top-
level domain component (like "example.com") and <paramref name="allowTargetSubdomains" /> is
true sub-domain matches will be allowed. If <paramref name="targetDomain" /> is empty and
<paramref name="allowTargetSubdomains" /> if true all domains and IP addresses will be
allowed.
This method cannot be used to bypass the restrictions on local or display
isolated schemes. See the comments on <see cref="T:CefSharp.CefCustomScheme" /> for more
information.

This function may be called on any thread. Returns false if <paramref name="sourceOrigin" />
is invalid or the whitelist cannot be accessed.
</remarks>
        </member>
        <member name="M:CefSharp.Core.Cef.ExecuteProcess">
            <summary>
This function should be called from the application entry point function to execute a secondary process.
It can be used to run secondary processes from the browser client executable (default behavior) or
from a separate executable specified by the CefSettings.browser_subprocess_path value.
If called for the browser process (identified by no "type" command-line value) it will return immediately with a value of -1.
If called for a recognized secondary process it will block until the process should exit and then return the process exit code.
The |application| parameter may be empty. The |windows_sandbox_info| parameter is only used on Windows and may be NULL (see cef_sandbox_win.h for details). 
</summary>
        </member>
        <member name="M:CefSharp.Core.Cef.DoMessageLoopWork">
            <summary>
Perform a single iteration of CEF message loop processing.This function is
provided for cases where the CEF message loop must be integrated into an
existing application message loop. Use of this function is not recommended
for most users; use CefSettings.MultiThreadedMessageLoop if possible (the default).
When using this function care must be taken to balance performance
against excessive CPU usage. It is recommended to enable the
CefSettings.ExternalMessagePump option when using
this function so that IBrowserProcessHandler.OnScheduleMessagePumpWork()
callbacks can facilitate the scheduling process. This function should only be
called on the main application thread and only if Cef.Initialize() is called
with a CefSettings.MultiThreadedMessageLoop value of false. This function
will not block.
</summary>
        </member>
        <member name="M:CefSharp.Core.Cef.QuitMessageLoop">
            <summary>
Quit the CEF message loop that was started by calling Cef.RunMessageLoop().
This function should only be called on the main application thread and only
if Cef.RunMessageLoop() was used.
</summary>
        </member>
        <member name="M:CefSharp.Core.Cef.RunMessageLoop">
            <summary>
Run the CEF message loop. Use this function instead of an application-
provided message loop to get the best balance between performance and CPU
usage. This function should only be called on the main application thread and
only if Cef.Initialize() is called with a
CefSettings.MultiThreadedMessageLoop value of false. This function will
block until a quit message is received by the system.
</summary>
        </member>
        <member name="M:CefSharp.Core.Cef.Initialize(CefSharp.Core.CefSettingsBase,System.Boolean,CefSharp.IApp)">
            <summary>
Initializes CefSharp with user-provided settings.
It's important to note that Initialize/Shutdown <strong>MUST</strong> be called on your main
application thread (typically the UI thread). If you call them on different
threads, your application will hang. See the documentation for Cef.Shutdown() for more details.
</summary>
            <param name="cefSettings">CefSharp configuration settings.</param>
            <param name="performDependencyCheck">Check that all relevant dependencies avaliable, throws exception if any are missing</param>
            <param name="cefApp">Implement this interface to provide handler implementations. Null if you don't wish to handle these events</param>
            <returns>true if successful; otherwise, false.</returns>
        </member>
        <member name="M:CefSharp.Core.Cef.Initialize(CefSharp.Core.CefSettingsBase,System.Boolean,CefSharp.IBrowserProcessHandler)">
            <summary>
Initializes CefSharp with user-provided settings.
It's important to note that Initialize/Shutdown <strong>MUST</strong> be called on your main
applicaiton thread (Typically the UI thead). If you call them on different
threads, your application will hang. See the documentation for Cef.Shutdown() for more details.
</summary>
            <param name="cefSettings">CefSharp configuration settings.</param>
            <param name="performDependencyCheck">Check that all relevant dependencies avaliable, throws exception if any are missing</param>
            <param name="browserProcessHandler">The handler for functionality specific to the browser process. Null if you don't wish to handle these events</param>
            <returns>true if successful; otherwise, false.</returns>
        </member>
        <member name="M:CefSharp.Core.Cef.Initialize(CefSharp.Core.CefSettingsBase,System.Boolean)">
            <summary>
Initializes CefSharp with user-provided settings.
It's important to note that Initialize/Shutdown <strong>MUST</strong> be called on your main
application thread (typically the UI thread). If you call them on different
threads, your application will hang. See the documentation for Cef.Shutdown() for more details.
</summary>
            <param name="cefSettings">CefSharp configuration settings.</param>
            <param name="performDependencyCheck">Check that all relevant dependencies avaliable, throws exception if any are missing</param>
            <returns>true if successful; otherwise, false.</returns>
        </member>
        <member name="M:CefSharp.Core.Cef.Initialize(CefSharp.Core.CefSettingsBase)">
            <summary>
Initializes CefSharp with user-provided settings.
It's important to note that Initialize and Shutdown <strong>MUST</strong> be called on your main
application thread (typically the UI thread). If you call them on different
threads, your application will hang. See the documentation for Cef.Shutdown() for more details.
</summary>
            <param name="cefSettings">CefSharp configuration settings.</param>
            <returns>true if successful; otherwise, false.</returns>
        </member>
        <member name="M:CefSharp.Core.Cef.ParseUrl(System.String)">
            <summary>
Parse the specified url into its component parts.
Uses a GURL to parse the Url. GURL is Google's URL parsing library.
</summary>
            <param name="url">url</param>
            <returns>Returns null if the URL is empty or invalid.</returns>
        </member>
        <member name="P:CefSharp.Core.Cef.CefCommitHash">
            <summary>
Gets a value that indicates the Git Hash for CEF version currently being used.
</summary>
            <value>The Git Commit Hash</value>
        </member>
        <member name="P:CefSharp.Core.Cef.ChromiumVersion">
            <summary>Gets a value that indicates the Chromium version currently being used.</summary>
            <value>The Chromium version.</value>
        </member>
        <member name="P:CefSharp.Core.Cef.CefVersion">
            <summary>Gets a value that indicates the CEF version currently being used.</summary>
            <value>The CEF Version</value>
        </member>
        <member name="P:CefSharp.Core.Cef.CefSharpVersion">
            <summary>Gets a value that indicates the version of CefSharp currently being used.</summary>
            <value>The CefSharp version.</value>
        </member>
        <member name="P:CefSharp.Core.Cef.IsShutdown">
            <summary>Gets a value that indicates whether CefSharp was shutdown.</summary>
            <value>true if CefSharp was shutdown; otherwise, false.</value>
        </member>
        <member name="P:CefSharp.Core.Cef.IsInitialized">
            <summary>Gets a value that indicates whether CefSharp is initialized.</summary>
            <value>true if CefSharp is initialized; otherwise, false.</value>
        </member>
        <member name="T:CefSharp.Core.Cef">
            <summary>
Global CEF methods are exposed through this class. e.g. CefInitalize maps to Cef.Initialize
CEF API Doc https://magpcss.org/ceforum/apidocs3/projects/(default)/(_globals).html
This class cannot be inherited.
</summary>
        </member>
        <member name="M:CefStreamResourceHandler.#ctor(System.Int32,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.multimap&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;,std.less&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;,std.allocator&lt;std.pair&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst,CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;&gt;,scoped_refptr&lt;CefStreamReader&gt;)">

Create a new object with explicit response values.

</member>
        <member name="M:CefStreamResourceHandler.#ctor(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefStreamReader&gt;)">

Create a new object with default response values.

</member>
        <member name="T:CefStreamResourceHandler">

Implementation of the CefResourceHandler class for reading from a CefStream.

</member>
        <member name="M:CefSharp.Core.CefSettingsBase.RegisterScheme(CefSharp.CefCustomScheme)">
            <summary>
Registers a custom scheme using the provided settings.
</summary>
            <param name="cefCustomScheme">The CefCustomScheme which provides the details about the scheme.</param>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.CookieableSchemesExcludeDefaults">
            <summary>
If CookieableSchemesExcludeDefaults is false the
default schemes ("http", "https", "ws" and "wss") will also be supported.
Specifying a CookieableSchemesList value and setting
CookieableSchemesExcludeDefaults to true will disable all loading
and saving of cookies for this manager. Can be overridden
for individual RequestContext instances via the
RequestContextSettings.CookieableSchemesList and
RequestContextSettings.CookieableSchemesExcludeDefaults values.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.CookieableSchemesList">
            <summary>
Comma delimited list of schemes supported by the associated
ICookieManager. If CookieableSchemesExcludeDefaults is false the
default schemes ("http", "https", "ws" and "wss") will also be supported.
Specifying a CookieableSchemesList value and setting
CookieableSchemesExcludeDefaults to true will disable all loading
and saving of cookies for this manager. Can be overridden
for individual RequestContext instances via the
RequestContextSettings.CookieableSchemesList and
RequestContextSettings.CookieableSchemesExcludeDefaults values.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.BackgroundColor">
            <summary>
Background color used for the browser before a document is loaded and when no document color is specified. The alpha
component must be either fully opaque (0xFF) or fully transparent (0x00). If the alpha component is fully opaque then the RGB
components will be used as the background color. If the alpha component is fully transparent for a WinForms browser then the
default value of opaque white be used. If the alpha component is fully transparent for a windowless (WPF/OffScreen) browser
then transparent painting will be enabled.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.AcceptLanguageList">
            <summary>
Comma delimited ordered list of language codes without any whitespace that will be used in the "Accept-Language" HTTP header.
May be set globally using the CefSettings.AcceptLanguageList value. If both values are empty then "en-US,en" will be used.

</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.PersistUserPreferences">
            <summary>
To persist user preferences as a JSON file in the cache path directory set this value to true. A CachePath value must also be
specified to enable this feature. Also configurable using the "persist-user-preferences" command-line switch. Can be
overridden for individual RequestContext instances via the RequestContextSettings.PersistUserPreferences value.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.PersistSessionCookies">
            <summary>
To persist session cookies (cookies without an expiry date or validity interval) by default when using the global cookie
manager set this value to true. Session cookies are generally intended to be transient and most Web browsers do not persist
them. A CachePath value must also be specified to enable this feature. Also configurable using the "persist-session-cookies"
command-line switch. Can be overridden for individual RequestContext instances via the
RequestContextSettings.PersistSessionCookies value.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.WindowlessRenderingEnabled">
            <summary>
Set to true (1) to enable windowless (off-screen) rendering support. Do not enable this value if the application does not use
windowless rendering as it may reduce rendering performance on some systems.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.UserAgent">
            <summary>
Value that will be returned as the User-Agent HTTP header. If empty the default User-Agent string will be used. Also
configurable using the "user-agent" command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.UncaughtExceptionStackSize">
            <summary>
The number of stack trace frames to capture for uncaught exceptions. Specify a positive value to enable the
CefRenderProcessHandler:: OnUncaughtException() callback. Specify 0 (default value) and OnUncaughtException() will not be
called. Also configurable using the "uncaught-exception-stack-size" command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.RemoteDebuggingPort">
            <summary>
Set to a value between 1024 and 65535 to enable remote debugging on the specified port. For example, if 8080 is specified the
remote debugging URL will be http://localhost:8080. CEF can be remotely debugged from any CEF or Chrome browser window. Also
configurable using the "remote-debugging-port" command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.UserAgentProduct">
            <summary>
Value that will be inserted as the product portion of the default User-Agent string. If empty the Chromium product version
will be used. If UserAgent is specified this value will be ignored. Also configurable using the "user-agent-product" command-
line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.PackLoadingDisabled">
            <summary>
Set to true to disable loading of pack files for resources and locales. A resource bundle handler must be provided for the
browser and render processes via CefApp::GetResourceBundleHandler() if loading of pack files is disabled. Also configurable
using the "disable-pack-loading" command- line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.JavascriptFlags">
            <summary>
Custom flags that will be used when initializing the V8 JavaScript engine. The consequences of using custom flags may not be
well tested. Also configurable using the "js-flags" command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.LogSeverity">
            <summary>
The log severity. Only messages of this severity level or higher will be logged. When set to
<see cref="F:CefSharp.LogSeverity.Disable" /> no messages will be written to the log file, but Fatal messages will still be
output to stderr. Also configurable using the "log-severity" command-line switch with a value of "verbose", "info", "warning",
"error", "fatal", "error-report" or "disable".
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.LogFile">
            <summary>
The directory and file name to use for the debug log. If empty a default log file name and location will be used. On Windows
a "debug.log" file will be written in the main executable directory. Also configurable using the"log-file" command- line
switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.ResourcesDirPath">
            <summary>
The fully qualified path for the resources directory. If this value is empty the cef.pak and/or devtools_resources.pak files
must be located in the module directory. Also configurable using the "resources-dir-path" command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.LocalesDirPath">
            <summary>
The fully qualified path for the locales directory. If this value is empty the locales directory must be located in the
module directory. If this value is non-empty then it must be an absolute path. Also configurable using the "locales-dir-path"
command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.Locale">
            <summary>
The locale string that will be passed to WebKit. If empty the default locale of "en-US" will be used. Also configurable using
the "lang" command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.UserDataPath">
            <summary>
The location where user data such as the Widevine CDM module and spell checking dictionary files will be stored on disk.
If this value is empty then "Local Settings\Application Data\CEF\User Data" directory under the user profile directory
will be used. If this value is non-empty then it must be an absolute path.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.RootCachePath">
            <summary>
The root directory that all CefSettings.CachePath and RequestContextSettings.CachePath values must have in common. If this
value is empty and CefSettings.CachePath is non-empty then it will default to the CefSettings.CachePath value.
If this value is non-empty then it must be an absolute path.  Failure to set this value correctly may result in the sandbox
blocking read/write access to the CachePath directory. NOTE: CefSharp does not implement the CHROMIUM SANDBOX. A non-empty
RootCachePath can be used in conjuncation with an empty CefSettings.CachePath in instances where you would like browsers
attached to the Global RequestContext (the default) created in "incognito mode" and instances created with a custom
RequestContext using a disk based cache.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.CachePath">
            <summary>
The location where data for the global browser cache will be stored on disk. In this value is non-empty then it must be
an absolute path that is must be either equal to or a child directory of CefSettings.RootCachePath (if RootCachePath is
empty it will default to this value). If the value is empty then browsers will be created in "incognito mode" where
in-memory caches are used for storage and no data is persisted to disk. HTML5 databases such as localStorage will only
persist across sessions if a cache path is specified. Can be overridden for individual RequestContext instances via the
RequestContextSettings.CachePath value.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.BrowserSubprocessPath">
            <summary>
The path to a separate executable that will be launched for sub-processes. By default the browser process executable is used.
See the comments on Cef.ExecuteProcess() for details. If this value is non-empty then it must be an absolute path.
Also configurable using the "browser-subprocess-path" command-line switch.
Defaults to using the provided CefSharp.BrowserSubprocess.exe instance
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.MultiThreadedMessageLoop">
            <summary>
Set to true to have the browser process message loop run in a separate thread. If false than the CefDoMessageLoopWork()
function must be called from your application message loop. This option is only supported on Windows. The default value is
true.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.ExternalMessagePump">
            <summary>
Set to true to control browser process main (UI) thread message pump scheduling via the
IBrowserProcessHandler.OnScheduleMessagePumpWork callback. This option is recommended for use in combination with the
Cef.DoMessageLoopWork() function in cases where the CEF message loop must be integrated into an existing application message
loop (see additional comments and warnings on Cef.DoMessageLoopWork). Enabling this option is not recommended for most users;
leave this option disabled and use either MultiThreadedMessageLoop (the default) if possible.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.CommandLineArgsDisabled">
            <summary>
Set to true to disable configuration of browser process features using standard CEF and Chromium command-line arguments.
Configuration can still be specified using CEF data structures or by adding to CefCommandLineArgs.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.ChromeRuntime">
            <summary>
**Experimental**
Set to true to enable use of the Chrome runtime in CEF. This feature is
considered experimental and is not recommended for most users at this time.
See issue https://bitbucket.org/chromiumembedded/cef/issues/2969/support-chrome-windows-with-cef-callbacks for details.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.CefCommandLineArgs">
            <summary>
Add custom command line argumens to this collection, they will be added in OnBeforeCommandLineProcessing. The
CefSettings.CommandLineArgsDisabled value can be used to start with an empty command-line object. Any values specified in
CefSettings that equate to command-line arguments will be set before this method is called.
</summary>
        </member>
        <member name="P:CefSharp.Core.CefSettingsBase.CefCustomSchemes">
            <summary>
Add Customs schemes to this collection.
</summary>
        </member>
        <member name="M:CefSharp.Core.CefSettingsBase.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:CefSharp.Core.CefSettingsBase.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:CefSharp.Core.CefSettingsBase.#ctor">
            <summary>
Default Constructor.
</summary>
        </member>
        <member name="F:CefSharp.Core.CefSettingsBase._cefCustomSchemes">
            <summary>
CefCustomScheme collection
</summary>
        </member>
        <member name="F:CefSharp.Core.CefSettingsBase._cefSettings">
            <summary>
CefSettings unmanaged pointer
</summary>
        </member>
        <member name="F:CefSharp.Core.CefSettingsBase._cefCommandLineArgs">
            <summary>
Command Line Arguments Dictionary. 
</summary>
        </member>
        <member name="T:CefSharp.Core.CefSettingsBase">
            <summary>
Initialization settings. Many of these and other settings can also configured using command-line switches.
WPF/WinForms/OffScreen each have their own CefSettings implementation that sets
relevant settings e.g. OffScreen starts with audio muted.
</summary>
        </member>
        <member name="M:CefWriteJSON(scoped_refptr&lt;CefValue&gt;,cef_json_writer_options_t)">

Generates a JSON string from the specified root |node| which should be a
dictionary or list value. Returns an empty string on failure. This method
requires exclusive access to |node| including any underlying data.

</member>
        <member name="M:CefParseJSONAndReturnError(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cef_json_parser_options_t,CefStringBase&lt;CefStringTraitsUTF16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Parses the specified |json_string| and returns a dictionary or list
representation. If JSON parsing fails this method returns NULL and populates
|error_msg_out| with a formatted error message.

</member>
        <member name="M:CefParseJSON(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,cef_json_parser_options_t)">

Parses the specified UTF8-encoded |json| buffer of size |json_size| and
returns a dictionary or list representation. If JSON parsing fails this
method returns NULL.

</member>
        <member name="M:CefParseJSON(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cef_json_parser_options_t)">

Parses the specified |json_string| and returns a dictionary or list
representation. If JSON parsing fails this method returns NULL.

</member>
        <member name="M:CefURIDecode(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,cef_uri_unescape_rule_t)">

Unescapes |text| and returns the result. Unescaping consists of looking for
the exact pattern "%XX" where each X is a hex digit and converting to the
character with the numerical value of those digits (e.g. "i%20=%203%3b"
unescapes to "i = 3;"). If |convert_to_utf8| is true this function will
attempt to interpret the initial decoded result as UTF-8. If the result is
convertable into UTF-8 it will be returned as converted. Otherwise the
initial decoded result will be returned.  The |unescape_rule| parameter
supports further customization the decoding process.

</member>
        <member name="M:CefURIEncode(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

Escapes characters in |text| which are unsuitable for use as a query
parameter value. Everything except alphanumerics and -_.!~*'() will be
converted to "%XX". If |use_plus| is true spaces will change to "+". The
result is basically the same as encodeURIComponent in Javacript.

</member>
        <member name="M:CefBase64Decode(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Decodes the base64 encoded string |data|. The returned value will be NULL if
the decoding fails.

</member>
        <member name="M:CefBase64Encode(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)">

Encodes |data| as a base64 string.

</member>
        <member name="M:CefGetExtensionsForMimeType(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Get the extensions associated with the given mime type. This should be
passed in lower case. There could be multiple extensions for a given mime
type, like "html,htm" for "text/html", or "txt,text,html,..." for "text/*".
Any existing elements in the provided vector will not be erased.

</member>
        <member name="M:CefGetMimeType(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the mime type for the specified file extension or an empty string if
unknown.

</member>
        <member name="M:CefFormatUrlForSecurityDisplay(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

This is a convenience function for formatting a URL in a concise and human-
friendly way to help users make security-related decisions (or in other
circumstances when people need to distinguish sites, origins, or otherwise-
simplified URLs from each other). Internationalized domain names (IDN) may
be presented in Unicode if the conversion is considered safe. The returned
value will (a) omit the path for standard schemes, excepting file and
filesystem, and (b) omit the port if it is the default for the scheme. Do
not use this for URLs which will be parsed or sent to other applications.

</member>
        <member name="M:CefCreateURL(CefStructBase&lt;CefURLPartsTraits&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Creates a URL from the specified |parts|, which must contain a non-empty
spec or a non-empty host and path (at a minimum), but not both.
Returns false if |parts| isn't initialized as described.

</member>
        <member name="M:CefParseURL(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStructBase&lt;CefURLPartsTraits&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Parse the specified |url| into its component parts.
Returns false if the URL is empty or invalid.

</member>
        <member name="M:CefSharp.Internals.CefUrlRequestClientAdapter.OnDownloadProgress(scoped_refptr&lt;CefURLRequest&gt;,System.Int64,System.Int64)">
ref 

</member>
        <member name="T:CefSharp.Internals.CefUrlRequestClientAdapter">
Interface that should be implemented by the CefUrlRequest client.
The methods of this class will be called on the same thread that created
the request unless otherwise documented. 
</member>
        <member name="M:CefURLRequestClient.GetAuthCredentials(System.Boolean,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefAuthCallback&gt;)">

Called on the IO thread when the browser needs credentials from the user.
|isProxy| indicates whether the host is a proxy server. |host| contains
the hostname and |port| contains the port number. Return true to continue
the request and call CefAuthCallback::Continue() when the authentication
information is available. If the request has an associated browser/frame
then returning false will result in a call to GetAuthCredentials on the
CefRequestHandler associated with that browser, if any. Otherwise,
returning false will cancel the request immediately. This method will only
be called for requests initiated from the browser process.



Called on the IO thread when the browser needs credentials from the user.
|isProxy| indicates whether the host is a proxy server. |host| contains
the hostname and |port| contains the port number. Return true to continue
the request and call CefAuthCallback::Continue() when the authentication
information is available. If the request has an associated browser/frame
then returning false will result in a call to GetAuthCredentials on the
CefRequestHandler associated with that browser, if any. Otherwise,
returning false will cancel the request immediately. This method will only
be called for requests initiated from the browser process.

</member>
        <member name="M:CefURLRequestClient.OnDownloadData(scoped_refptr&lt;CefURLRequest&gt;,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)">

Called when some part of the response is read. |data| contains the current
bytes received since the last call. This method will not be called if the
UR_FLAG_NO_DOWNLOAD_DATA flag is set on the request.



Called when some part of the response is read. |data| contains the current
bytes received since the last call. This method will not be called if the
UR_FLAG_NO_DOWNLOAD_DATA flag is set on the request.

</member>
        <member name="M:CefURLRequestClient.OnDownloadProgress(scoped_refptr&lt;CefURLRequest&gt;,System.Int64,System.Int64)">

Notifies the client of download progress. |current| denotes the number of
bytes received up to the call and |total| is the expected total size of
the response (or -1 if not determined).



Notifies the client of download progress. |current| denotes the number of
bytes received up to the call and |total| is the expected total size of
the response (or -1 if not determined).

</member>
        <member name="M:CefURLRequestClient.OnUploadProgress(scoped_refptr&lt;CefURLRequest&gt;,System.Int64,System.Int64)">

Notifies the client of upload progress. |current| denotes the number of
bytes sent so far and |total| is the total size of uploading data (or -1
if chunked upload is enabled). This method will only be called if the
UR_FLAG_REPORT_UPLOAD_PROGRESS flag is set on the request.



Notifies the client of upload progress. |current| denotes the number of
bytes sent so far and |total| is the total size of uploading data (or -1
if chunked upload is enabled). This method will only be called if the
UR_FLAG_REPORT_UPLOAD_PROGRESS flag is set on the request.

</member>
        <member name="M:CefURLRequestClient.OnRequestComplete(scoped_refptr&lt;CefURLRequest&gt;)">

Notifies the client that the request has completed. Use the
CefURLRequest::GetRequestStatus method to determine if the request was
successful or not.



Notifies the client that the request has completed. Use the
CefURLRequest::GetRequestStatus method to determine if the request was
successful or not.

</member>
        <member name="T:CefURLRequestClient">

Interface that should be implemented by the CefURLRequest client. The
methods of this class will be called on the same thread that created the
request unless otherwise documented.



Interface that should be implemented by the CefURLRequest client. The
methods of this class will be called on the same thread that created the
request unless otherwise documented.

</member>
        <member name="M:CefURLRequest.Cancel">

Cancel the request.



Cancel the request.

</member>
        <member name="M:CefURLRequest.ResponseWasCached">

Returns true if the response body was served from the cache. This includes
responses for which revalidation was required.



Returns true if the response body was served from the cache. This includes
responses for which revalidation was required.

</member>
        <member name="M:CefURLRequest.GetResponse">

Returns the response, or NULL if no response information is available.
Response information will only be available after the upload has
completed. The returned object is read-only and should not be modified.



Returns the response, or NULL if no response information is available.
Response information will only be available after the upload has
completed. The returned object is read-only and should not be modified.

</member>
        <member name="M:CefURLRequest.GetRequestError">

Returns the request error if status is UR_CANCELED or UR_FAILED, or 0
otherwise.



Returns the request error if status is UR_CANCELED or UR_FAILED, or 0
otherwise.

</member>
        <member name="M:CefURLRequest.GetRequestStatus">

Returns the request status.



Returns the request status.

</member>
        <member name="M:CefURLRequest.GetClient">

Returns the client.



Returns the client.

</member>
        <member name="M:CefURLRequest.GetRequest">

Returns the request object used to create this URL request. The returned
object is read-only and should not be modified.



Returns the request object used to create this URL request. The returned
object is read-only and should not be modified.

</member>
        <member name="M:CefURLRequest.Create(scoped_refptr&lt;CefRequest&gt;,scoped_refptr&lt;CefURLRequestClient&gt;,scoped_refptr&lt;CefRequestContext&gt;)">

Create a new URL request that is not associated with a specific browser or
frame. Use CefFrame::CreateURLRequest instead if you want the request to
have this association, in which case it may be handled differently (see
documentation on that method). A request created with this method may only
originate from the browser process, and will behave as follows:
  - It may be intercepted by the client via CefResourceRequestHandler or
    CefSchemeHandlerFactory.
  - POST data may only contain only a single element of type PDE_TYPE_FILE
    or PDE_TYPE_BYTES.
  - If |request_context| is empty the global request context will be used.

The |request| object will be marked as read-only after calling this
method.



Create a new URL request that is not associated with a specific browser or
frame. Use CefFrame::CreateURLRequest instead if you want the request to
have this association, in which case it may be handled differently (see
documentation on that method). A request created with this method may only
originate from the browser process, and will behave as follows:
  - It may be intercepted by the client via CefResourceRequestHandler or
    CefSchemeHandlerFactory.
  - POST data may only contain only a single element of type PDE_TYPE_FILE
    or PDE_TYPE_BYTES.
  - If |request_context| is empty the global request context will be used.

The |request| object will be marked as read-only after calling this
method.

</member>
        <member name="T:CefURLRequest">

Class used to make a URL request. URL requests are not associated with a
browser instance so no CefClient callbacks will be executed. URL requests
can be created on any valid CEF thread in either the browser or render
process. Once created the methods of the URL request object must be accessed
on the same thread that created it.



Class used to make a URL request. URL requests are not associated with a
browser instance so no CefClient callbacks will be executed. URL requests
can be created on any valid CEF thread in either the browser or render
process. Once created the methods of the URL request object must be accessed
on the same thread that created it.

</member>
        <member name="M:CefSharp.Internals.CefFrameWrapper.LoadRequest(CefSharp.IRequest)">

Load the request represented by the |request| object.

</member>
        <member name="T:CefSharp.Core.ManagedCefBrowserAdapter">
            <exclude />
        </member>
        <member name="P:CefSharp.Core.DragData.ImageHotspot">
            <summary>
Get the image hotspot (drag start location relative to image dimensions).
</summary>
        </member>
        <member name="P:CefSharp.Core.DragData.Image">
            <summary>
Get the image representation of drag data.
May return NULL if no image representation is available.
</summary>
        </member>
        <member name="P:CefSharp.Internals.CefImageWrapper.Width">
            <summary>
Returns the image width in density independent pixel(DIP) units.
</summary>
        </member>
        <member name="M:CefSharp.Internals.CefImageWrapper.RemoveRepresentation(System.Single)">
            <summary>
Removes the representation for scaleFactor.
</summary>
            <param name="scaleFactor" />
            <returns>true for success</returns>
        </member>
        <member name="M:CefSharp.Internals.CefImageWrapper.IsSame(CefSharp.IImage)">
            <summary>
Returns true if this Image and that Image share the same underlying storage.
</summary>
            <param name="that">image to compare</param>
            <returns>returns true if share same underlying storage</returns>
        </member>
        <member name="P:CefSharp.Internals.CefImageWrapper.IsEmpty">
            <summary>
Returns true if this Image is empty.
</summary>
            <returns />
        </member>
        <member name="M:CefSharp.Internals.CefImageWrapper.HasRepresentation(System.Single)">
            <summary>
Returns true if this image contains a representation for scaleFactor.
</summary>
            <param name="scaleFactor" />
            <returns />
        </member>
        <member name="P:CefSharp.Internals.CefImageWrapper.Height">
            <summary>
Returns the image height in density independent pixel(DIP) units.
</summary>
        </member>
        <member name="M:CefSharp.Internals.CefImageWrapper.GetRepresentationInfo(System.Single,System.Single@,System.Int32@,System.Int32@)">
            <summary>
Returns information for the representation that most closely matches scaleFactor.
</summary>
            <param name="scaleFactor">scale factor</param>
            <param name="actualScaleFactor">actual scale factor</param>
            <param name="pixelWidth">pixel width</param>
            <param name="pixelHeight">pixel height</param>
            <returns>return if information found for scale factor</returns>
        </member>
        <member name="M:CefSharp.Internals.CefImageWrapper.GetAsPNG(System.Single,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
Returns the PNG representation that most closely matches scaleFactor.
</summary>
            <param name="scaleFactor">scale factor</param>
            <param name="withTransparency">is the PNG transparent</param>
            <param name="pixelWidth">pixel width</param>
            <param name="pixelHeight">pixel height</param>
            <returns>A stream represending the PNG or null.</returns>
        </member>
        <member name="M:CefSharp.Internals.CefImageWrapper.GetAsJPEG(System.Single,System.Int32,System.Int32@,System.Int32@)">
            <summary>
Returns the JPEG representation that most closely matches scaleFactor.
</summary>
            <param name="scaleFactor">scale factor</param>
            <param name="quality">image quality</param>
            <param name="pixelWidth">pixel width</param>
            <param name="pixelHeight">pixel height</param>
            <returns>A stream representing the JPEG or null.</returns>
        </member>
        <member name="M:CefSharp.Internals.CefImageWrapper.GetAsBitmap(System.Single,CefSharp.Enums.ColorType,CefSharp.Enums.AlphaType,System.Int32@,System.Int32@)">
            <summary>
Returns the bitmap representation that most closely matches scaleFactor.
</summary>
            <param name="scaleFactor">scale factor</param>
            <param name="colorType">color type</param>
            <param name="alphaType">alpha type</param>
            <param name="pixelWidth">pixel width</param>
            <param name="pixelHeight">pixel height</param>
            <returns>A stream represending the bitmap or null.</returns>
        </member>
        <member name="M:CefApp.GetRenderProcessHandler">

Return the handler for functionality specific to the render process. This
method is called on the render process main thread.

</member>
        <member name="M:CefApp.GetBrowserProcessHandler">

Return the handler for functionality specific to the browser process. This
method is called on multiple threads in the browser process.

</member>
        <member name="M:CefApp.GetResourceBundleHandler">

Return the handler for resource bundle events. If
cef_settings_t.pack_loading_disabled is true a handler must be returned.
If no handler is returned resources will be loaded from pack files. This
method is called by the browser and render processes on multiple threads.

</member>
        <member name="M:CefApp.OnRegisterCustomSchemes(CefSchemeRegistrar*)">

Provides an opportunity to register custom schemes. Do not keep a
reference to the |registrar| object. This method is called on the main
thread for each process and the registered schemes should be the same
across all processes.

</member>
        <member name="M:CefApp.OnBeforeCommandLineProcessing(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefCommandLine&gt;)">

Provides an opportunity to view and/or modify command-line arguments
before processing by CEF and Chromium. The |process_type| value will be
empty for the browser process. Do not keep a reference to the
CefCommandLine object passed to this method. The
cef_settings_t.command_line_args_disabled value can be used to start with
an empty command-line object. Any values specified in CefSettings that
equate to command-line arguments will be set before this method is called.
Be cautious when using this method to modify command-line arguments for
non-browser processes as this may result in undefined behavior including
crashes.

</member>
        <member name="T:CefApp">

Implement this interface to provide handler implementations. Methods will be
called by the process and/or thread indicated.

</member>
        <member name="M:CefEnableHighDPISupport">

Call during process startup to enable High-DPI support on Windows 7 or
newer. Older versions of Windows should be left DPI-unaware because they do
not support DirectWrite and GDI fonts are kerned very badly.

</member>
        <member name="M:CefSetOSModalLoop(System.Boolean)">

Set to true before calling Windows APIs like TrackPopupMenu that enter a
modal message loop. Set to false after exiting the modal message loop.

</member>
        <member name="M:CefQuitMessageLoop">

Quit the CEF message loop that was started by calling CefRunMessageLoop().
This function should only be called on the main application thread and only
if CefRunMessageLoop() was used.

</member>
        <member name="M:CefRunMessageLoop">

Run the CEF message loop. Use this function instead of an application-
provided message loop to get the best balance between performance and CPU
usage. This function should only be called on the main application thread
and only if CefInitialize() is called with a
cef_settings_t.multi_threaded_message_loop value of false. This function
will block until a quit message is received by the system.

</member>
        <member name="M:CefDoMessageLoopWork">

Perform a single iteration of CEF message loop processing. This function is
provided for cases where the CEF message loop must be integrated into an
existing application message loop. Use of this function is not recommended
for most users; use either the CefRunMessageLoop() function or
cef_settings_t.multi_threaded_message_loop if possible. When using this
function care must be taken to balance performance against excessive CPU
usage. It is recommended to enable the cef_settings_t.external_message_pump
option when using this function so that
CefBrowserProcessHandler::OnScheduleMessagePumpWork() callbacks can
facilitate the scheduling process. This function should only be called on
the main application thread and only if CefInitialize() is called with a
cef_settings_t.multi_threaded_message_loop value of false. This function
will not block.

</member>
        <member name="M:CefShutdown">

This function should be called on the main application thread to shut down
the CEF browser process before the application exits.

</member>
        <member name="M:CefInitialize(CefMainArgs!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStructBase&lt;CefSettingsTraits&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefApp&gt;,System.Void*)">

This function should be called on the main application thread to initialize
the CEF browser process. The |application| parameter may be empty. A return
value of true indicates that it succeeded and false indicates that it
failed. The |windows_sandbox_info| parameter is only used on Windows and may
be NULL (see cef_sandbox_win.h for details).

</member>
        <member name="M:CefExecuteProcess(CefMainArgs!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefApp&gt;,System.Void*)">

This function should be called from the application entry point function to
execute a secondary process. It can be used to run secondary processes from
the browser client executable (default behavior) or from a separate
executable specified by the cef_settings_t.browser_subprocess_path value. If
called for the browser process (identified by no "type" command-line value)
it will return immediately with a value of -1. If called for a recognized
secondary process it will block until the process should exit and then
return the process exit code. The |application| parameter may be empty. The
|windows_sandbox_info| parameter is only used on Windows and may be NULL
(see cef_sandbox_win.h for details).

</member>
        <member name="M:CefSchemeHandlerFactory.Create(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefRequest&gt;)">

Return a new resource handler instance to handle the request or an empty
reference to allow default handling of the request. |browser| and |frame|
will be the browser window and frame respectively that originated the
request or NULL if the request did not originate from a browser window
(for example, if the request came from CefURLRequest). The |request|
object passed to this method cannot be modified.



Return a new resource handler instance to handle the request or an empty
reference to allow default handling of the request. |browser| and |frame|
will be the browser window and frame respectively that originated the
request or NULL if the request did not originate from a browser window
(for example, if the request came from CefURLRequest). The |request|
object passed to this method cannot be modified.

</member>
        <member name="T:CefSchemeHandlerFactory">

Class that creates CefResourceHandler instances for handling scheme
requests. The methods of this class will always be called on the IO thread.



Class that creates CefResourceHandler instances for handling scheme
requests. The methods of this class will always be called on the IO thread.

</member>
        <member name="M:CefSchemeRegistrar.AddCustomScheme(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">

Register a custom scheme. This method should not be called for the
built-in HTTP, HTTPS, FILE, FTP, ABOUT and DATA schemes.

See cef_scheme_options_t for possible values for |options|.

This function may be called on any thread. It should only be called once
per unique |scheme_name| value. If |scheme_name| is already registered or
if an error occurs this method will return false.



Register a custom scheme. This method should not be called for the
built-in HTTP, HTTPS, FILE, FTP, ABOUT and DATA schemes.

See cef_scheme_options_t for possible values for |options|.

This function may be called on any thread. It should only be called once
per unique |scheme_name| value. If |scheme_name| is already registered or
if an error occurs this method will return false.

</member>
        <member name="T:CefSchemeRegistrar">

Class that manages custom scheme registrations.



Class that manages custom scheme registrations.

</member>
        <member name="M:CefClearSchemeHandlerFactories">

Clear all scheme handler factories registered with the global request
context. Returns false on error. This function may be called on any thread
in the browser process. Using this function is equivalent to calling
CefRequestContext::GetGlobalContext()-&gt;ClearSchemeHandlerFactories().



Clear all scheme handler factories registered with the global request
context. Returns false on error. This function may be called on any thread
in the browser process. Using this function is equivalent to calling
CefRequestContext::GetGlobalContext()-&gt;ClearSchemeHandlerFactories().

</member>
        <member name="M:CefRegisterSchemeHandlerFactory(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefSchemeHandlerFactory&gt;)">

Register a scheme handler factory with the global request context. An empty
|domain_name| value for a standard scheme will cause the factory to match
all domain names. The |domain_name| value will be ignored for non-standard
schemes. If |scheme_name| is a built-in scheme and no handler is returned by
|factory| then the built-in scheme handler factory will be called. If
|scheme_name| is a custom scheme then you must also implement the
CefApp::OnRegisterCustomSchemes() method in all processes. This function may
be called multiple times to change or remove the factory that matches the
specified |scheme_name| and optional |domain_name|. Returns false if an
error occurs. This function may be called on any thread in the browser
process. Using this function is equivalent to calling
CefRequestContext::GetGlobalContext()-&gt;RegisterSchemeHandlerFactory().



Register a scheme handler factory with the global request context. An empty
|domain_name| value for a standard scheme will cause the factory to match
all domain names. The |domain_name| value will be ignored for non-standard
schemes. If |scheme_name| is a built-in scheme and no handler is returned by
|factory| then the built-in scheme handler factory will be called. If
|scheme_name| is a custom scheme then you must also implement the
CefApp::OnRegisterCustomSchemes() method in all processes. This function may
be called multiple times to change or remove the factory that matches the
specified |scheme_name| and optional |domain_name|. Returns false if an
error occurs. This function may be called on any thread in the browser
process. Using this function is equivalent to calling
CefRequestContext::GetGlobalContext()-&gt;RegisterSchemeHandlerFactory().

</member>
        <member name="M:CefResourceBundleHandler.GetDataResourceForScale(System.Int32,cef_scale_factor_t,System.Void**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called to retrieve data for the specified |resource_id| nearest the scale
factor |scale_factor|. To provide the resource data set |data| and
|data_size| to the data pointer and size respectively and return true. To
use the default resource data return false. The resource data will not be
copied and must remain resident in memory. Include cef_pack_resources.h
for a listing of valid resource ID values.

</member>
        <member name="M:CefResourceBundleHandler.GetDataResource(System.Int32,System.Void**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called to retrieve data for the specified scale independent |resource_id|.
To provide the resource data set |data| and |data_size| to the data
pointer and size respectively and return true. To use the default resource
data return false. The resource data will not be copied and must remain
resident in memory. Include cef_pack_resources.h for a listing of valid
resource ID values.

</member>
        <member name="M:CefResourceBundleHandler.GetLocalizedString(System.Int32,CefStringBase&lt;CefStringTraitsUTF16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called to retrieve a localized translation for the specified |string_id|.
To provide the translation set |string| to the translation string and
return true. To use the default translation return false. Include
cef_pack_strings.h for a listing of valid string ID values.

</member>
        <member name="T:CefResourceBundleHandler">

Class used to implement a custom resource bundle interface. See CefSettings
for additional options related to resource bundle loading. The methods of
this class may be called on multiple threads.

</member>
        <member name="M:CefRenderProcessHandler.OnProcessMessageReceived(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,cef_process_id_t,scoped_refptr&lt;CefProcessMessage&gt;)">

Called when a new message is received from a different process. Return
true if the message was handled or false otherwise. It is safe to keep a
reference to |message| outside of this callback.

</member>
        <member name="M:CefRenderProcessHandler.OnFocusedNodeChanged(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefDOMNode&gt;)">

Called when a new node in the the browser gets focus. The |node| value may
be empty if no specific node has gained focus. The node object passed to
this method represents a snapshot of the DOM at the time this method is
executed. DOM objects are only valid for the scope of this method. Do not
keep references to or attempt to access any DOM objects outside the scope
of this method.

</member>
        <member name="M:CefRenderProcessHandler.OnUncaughtException(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefV8Context&gt;,scoped_refptr&lt;CefV8Exception&gt;,scoped_refptr&lt;CefV8StackTrace&gt;)">

Called for global uncaught exceptions in a frame. Execution of this
callback is disabled by default. To enable set
cef_settings_t.uncaught_exception_stack_size &gt; 0.

</member>
        <member name="M:CefRenderProcessHandler.OnContextReleased(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefV8Context&gt;)">

Called immediately before the V8 context for a frame is released. No
references to the context should be kept after this method is called.

</member>
        <member name="M:CefRenderProcessHandler.OnContextCreated(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefV8Context&gt;)">

Called immediately after the V8 context for a frame has been created. To
retrieve the JavaScript 'window' object use the CefV8Context::GetGlobal()
method. V8 handles can only be accessed from the thread on which they are
created. A task runner for posting tasks on the associated thread can be
retrieved via the CefV8Context::GetTaskRunner() method.

</member>
        <member name="M:CefRenderProcessHandler.GetLoadHandler">

Return the handler for browser load status events.

</member>
        <member name="M:CefRenderProcessHandler.OnBrowserDestroyed(scoped_refptr&lt;CefBrowser&gt;)">

Called before a browser is destroyed.

</member>
        <member name="M:CefRenderProcessHandler.OnBrowserCreated(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefDictionaryValue&gt;)">

Called after a browser has been created. When browsing cross-origin a new
browser will be created before the old browser with the same identifier is
destroyed. |extra_info| is an optional read-only value originating from
CefBrowserHost::CreateBrowser(), CefBrowserHost::CreateBrowserSync(),
CefLifeSpanHandler::OnBeforePopup() or
CefBrowserView::CreateBrowserView().

</member>
        <member name="M:CefRenderProcessHandler.OnWebKitInitialized">

Called after WebKit has been initialized.

</member>
        <member name="T:CefRenderProcessHandler">

Class used to implement render process callbacks. The methods of this class
will be called on the render process main thread (TID_RENDERER) unless
otherwise indicated.

</member>
        <member name="M:CefBrowserProcessHandler.GetDefaultClient">

Return the default client for use with a newly created browser window. If
null is returned the browser will be unmanaged (no callbacks will be
executed for that browser) and application shutdown will be blocked until
the browser window is closed manually. This method is currently only used
with the chrome runtime.

</member>
        <member name="M:CefBrowserProcessHandler.OnBeforeChildProcessLaunch(scoped_refptr&lt;CefCommandLine&gt;)">

Called before a child process is launched. Will be called on the browser
process UI thread when launching a render process and on the browser
process IO thread when launching a GPU process. Provides an opportunity to
modify the child process command line. Do not keep a reference to
|command_line| outside of this method.

</member>
        <member name="M:CefBrowserProcessHandler.OnContextInitialized">

Called on the browser process UI thread immediately after the CEF context
has been initialized.

</member>
        <member name="T:CefBrowserProcessHandler">

Class used to implement browser process callbacks. The methods of this class
will be called on the browser process main thread unless otherwise
indicated.

</member>
        <member name="M:CefCommandLine.PrependWrapper(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Insert a command before the current command.
Common for debuggers, like "valgrind" or "gdb --args".

</member>
        <member name="M:CefCommandLine.AppendArgument(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Add an argument to the end of the command line.

</member>
        <member name="M:CefCommandLine.GetArguments(std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Get the remaining command line arguments.

</member>
        <member name="M:CefCommandLine.HasArguments">

True if there are remaining command line arguments.

</member>
        <member name="M:CefCommandLine.AppendSwitchWithValue(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Add a switch with the specified value to the end of the command line.

</member>
        <member name="M:CefCommandLine.AppendSwitch(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Add a switch to the end of the command line. If the switch has no value
pass an empty value string.

</member>
        <member name="M:CefCommandLine.GetSwitches(std.map&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;,std.less&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;,std.allocator&lt;std.pair&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst,CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the map of switch names and values. If a switch has no value an
empty string is returned.

</member>
        <member name="M:CefCommandLine.GetSwitchValue(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the value associated with the given switch. If the switch has no
value or isn't present this method returns the empty string.

</member>
        <member name="M:CefCommandLine.HasSwitch(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns true if the command line contains the given switch.

</member>
        <member name="M:CefCommandLine.HasSwitches">

Returns true if the command line has switches.

</member>
        <member name="M:CefCommandLine.SetProgram(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the program part of the command line string (the first item).

</member>
        <member name="M:CefCommandLine.GetProgram">

Get the program part of the command line string (the first item).

</member>
        <member name="M:CefCommandLine.GetCommandLineString">

Constructs and returns the represented command line string. Use this
method cautiously because quoting behavior is unclear.

</member>
        <member name="M:CefCommandLine.GetArgv(std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Retrieve the original command line string as a vector of strings.
The argv array:
`{ program, [(--|-|/)switch[=value]]*, [--], [argument]* }`

</member>
        <member name="M:CefCommandLine.Reset">

Reset the command-line switches and arguments but leave the program
component unchanged.

</member>
        <member name="M:CefCommandLine.InitFromString(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Initialize the command line with the string returned by calling
GetCommandLineW(). This method is only supported on Windows.

</member>
        <member name="M:CefCommandLine.InitFromArgv(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*)">

Initialize the command line with the specified |argc| and |argv| values.
The first argument must be the name of the program. This method is only
supported on non-Windows platforms.

</member>
        <member name="M:CefCommandLine.Copy">

Returns a writable copy of this object.

</member>
        <member name="M:CefCommandLine.IsReadOnly">

Returns true if the values of this object are read-only. Some APIs may
expose read-only objects.

</member>
        <member name="M:CefCommandLine.IsValid">

Returns true if this object is valid. Do not call any other methods if
this function returns false.

</member>
        <member name="M:CefCommandLine.GetGlobalCommandLine">

Returns the singleton global CefCommandLine object. The returned object
will be read-only.

</member>
        <member name="M:CefCommandLine.CreateCommandLine">

Create a new CefCommandLine instance.

</member>
        <member name="T:CefCommandLine">

Class used to create and/or parse command line arguments. Arguments with
"--", "-" and, on Windows, "/" prefixes are considered switches. Switches
will always precede any arguments without switch prefixes. Switches can
optionally have a value specified using the "=" delimiter (e.g.
"-switch=value"). An argument of "--" will terminate switch parsing with all
subsequent tokens, regardless of prefix, being interpreted as non-switch
arguments. Switch names should be lowercase ASCII and will be converted to
such if necessary. Switch values will retain the original case and UTF8
encoding. This class can be used before CefInitialize() is called.

</member>
        <member name="M:CefSharp.Core.RequestContext.UnWrap">
            <summary>
Gets the inner most instance
</summary>
            <returns>current instance</returns>
        </member>
        <member name="M:CefSharp.Core.RequestContext.LoadExtension(System.String,System.String,CefSharp.IExtensionHandler)">
            <summary>
Load an extension. If extension resources will be read from disk using the default load implementation then rootDirectoy
should be the absolute path to the extension resources directory and manifestJson should be null.
If extension resources will be provided by the client (e.g. via IRequestHandler and/or IExtensionHandler) then rootDirectory
should be a path component unique to the extension (if not absolute this will be internally prefixed with the PK_DIR_RESOURCES path)
and manifestJson should contain the contents that would otherwise be read from the "manifest.json" file on disk.
The loaded extension will be accessible in all contexts sharing the same storage (HasExtension returns true).
However, only the context on which this method was called is considered the loader (DidLoadExtension returns true) and only the
loader will receive IRequestContextHandler callbacks for the extension. <see cref="M:CefSharp.IExtensionHandler.OnExtensionLoaded(CefSharp.IExtension)" /> will be
called on load success or <see cref="M:CefSharp.IExtensionHandler.OnExtensionLoadFailed(CefSharp.CefErrorCode)" /> will be called on load failure.
If the extension specifies a background script via the "background" manifest key then <see cref="M:CefSharp.IExtensionHandler.OnBeforeBackgroundBrowser(CefSharp.IExtension,System.String,CefSharp.IBrowserSettings)" />
will be called to create the background browser. See that method for additional information about background scripts.
For visible extension views the client application should evaluate the manifest to determine the correct extension URL to load and then pass
that URL to the IBrowserHost.CreateBrowser* function after the extension has loaded. For example, the client can look for the "browser_action"
manifest key as documented at https://developer.chrome.com/extensions/browserAction. Extension URLs take the form "chrome-extension:///".
Browsers that host extensions differ from normal browsers as follows: - Can access chrome.* JavaScript APIs if allowed by the manifest.
Visit chrome://extensions-support for the list of extension APIs currently supported by CEF. - Main frame navigation to non-extension
content is blocked.
- Pinch-zooming is disabled.
- <see cref="P:CefSharp.IBrowserHost.Extension" /> returns the hosted extension.
- CefBrowserHost::IsBackgroundHost returns true for background hosts. See https://developer.chrome.com/extensions for extension implementation and usage documentation.
</summary>
            <param name="rootDirectory">If extension resources will be read from disk using the default load implementation then rootDirectoy
should be the absolute path to the extension resources directory and manifestJson should be null</param>
            <param name="manifestJson">If extension resources will be provided by the client then rootDirectory should be a path component unique to the extension
and manifestJson should contain the contents that would otherwise be read from the manifest.json file on disk</param>
            <param name="handler">handle events related to browser extensions</param>
        </member>
        <member name="M:CefSharp.Core.RequestContext.HasExtension(System.String)">
            <summary>
Returns true if this context has access to the extension identified by extensionId.
This may not be the context that was used to load the extension (see DidLoadExtension).
This method must be called on the CEF UI thread.
</summary>
            <param name="extensionId">extension id</param>
            <returns>Returns true if this context has access to the extension identified by extensionId</returns>
            <remarks>Use Cef.UIThreadTaskFactory to execute this method if required,
<see cref="M:CefSharp.IBrowserProcessHandler.OnContextInitialized" /> and ChromiumWebBrowser.IsBrowserInitializedChanged are both
executed on the CEF UI thread, so can be called directly.
When CefSettings.MultiThreadedMessageLoop == false (the default is true) then the main
application thread will be the CEF UI thread.</remarks>
        </member>
        <member name="M:CefSharp.Core.RequestContext.GetExtensions(System.Collections.Generic.IList`1{System.String}@)">
            <summary>
Retrieve the list of all extensions that this context has access to (see HasExtension).
<paramref name="extensionIds" /> will be populated with the list of extension ID values.
This method must be called on the CEF UI thread.
</summary>
            <param name="extensionIds">output a list of extensions Ids</param>
            <returns>returns true on success otherwise false</returns>
            <remarks>Use Cef.UIThreadTaskFactory to execute this method if required,
<see cref="M:CefSharp.IBrowserProcessHandler.OnContextInitialized" /> and ChromiumWebBrowser.IsBrowserInitializedChanged are both
executed on the CEF UI thread, so can be called directly.
When CefSettings.MultiThreadedMessageLoop == false (the default is true) then the main
application thread will be the CEF UI thread.</remarks>
        </member>
        <member name="M:CefSharp.Core.RequestContext.GetExtension(System.String)">
            <summary>
Returns the extension matching extensionId or null if no matching extension is accessible in this context (see HasExtension).
This method must be called on the CEF UI thread.
</summary>
            <param name="extensionId">extension Id</param>
            <returns>Returns the extension matching extensionId or null if no matching extension is accessible in this context</returns>
            <remarks>Use Cef.UIThreadTaskFactory to execute this method if required,
<see cref="M:CefSharp.IBrowserProcessHandler.OnContextInitialized" /> and ChromiumWebBrowser.IsBrowserInitializedChanged are both
executed on the CEF UI thread, so can be called directly.
When CefSettings.MultiThreadedMessageLoop == false (the default is true) then the main
application thread will be the CEF UI thread.</remarks>
        </member>
        <member name="M:CefSharp.Core.RequestContext.DidLoadExtension(System.String)">
            <summary>
Returns true if this context was used to load the extension identified by extensionId. Other contexts sharing the same storage will also have access to the extension (see HasExtension).
This method must be called on the CEF UI thread.
</summary>
            <returns>Returns true if this context was used to load the extension identified by extensionId</returns>
            <remarks>Use Cef.UIThreadTaskFactory to execute this method if required,
<see cref="M:CefSharp.IBrowserProcessHandler.OnContextInitialized" /> and ChromiumWebBrowser.IsBrowserInitializedChanged are both
executed on the CEF UI thread, so can be called directly.
When CefSettings.MultiThreadedMessageLoop == false (the default is true) then the main
application thread will be the CEF UI thread.</remarks>
        </member>
        <member name="M:CefSharp.Core.RequestContext.ResolveHostAsync(System.Uri)">
            <summary>
Attempts to resolve origin to a list of associated IP addresses.
</summary>
            <param name="origin">host name to resolve</param>
            <returns>A task that represents the Resoolve Host operation. The value of the TResult parameter contains ResolveCallbackResult.</returns>
        </member>
        <member name="M:CefSharp.Core.RequestContext.CloseAllConnections(CefSharp.ICompletionCallback)">
            <summary>
Clears all active and idle connections that Chromium currently has.
This is only recommended if you have released all other CEF objects but
don't yet want to call Cef.Shutdown().
</summary>
            <param name="callback">If is non-NULL it will be executed on the CEF UI thread after
completion. This param is optional</param>
        </member>
        <member name="M:CefSharp.Core.RequestContext.ClearHttpAuthCredentials(CefSharp.ICompletionCallback)">
            <summary>
Clears all HTTP authentication credentials that were added as part of handling
<see cref="M:CefSharp.IRequestHandler.GetAuthCredentials(CefSharp.IWebBrowser,CefSharp.IBrowser,System.String,System.Boolean,System.String,System.Int32,System.String,System.String,CefSharp.IAuthCallback)" />.
</summary>
            <param name="callback">If is non-NULL it will be executed on the CEF UI thread after
completion. This param is optional</param>
        </member>
        <member name="M:CefSharp.Core.RequestContext.ClearCertificateExceptions(CefSharp.ICompletionCallback)">
            <summary>
Clears all certificate exceptions that were added as part of handling
<see cref="M:CefSharp.IRequestHandler.OnCertificateError(CefSharp.IWebBrowser,CefSharp.IBrowser,CefSharp.CefErrorCode,System.String,CefSharp.ISslInfo,CefSharp.IRequestCallback)" />. If you call this it is
recommended that you also call <see cref="M:CefSharp.IRequestContext.CloseAllConnections(CefSharp.ICompletionCallback)" /> or you risk not
being prompted again for server certificates if you reconnect quickly.
</summary>
            <param name="callback">If is non-NULL it will be executed on the CEF UI thread after
completion. This param is optional</param>
        </member>
        <member name="M:CefSharp.Core.RequestContext.SetPreference(System.String,System.Object,System.String@)">
            <summary>
Set the value associated with preference name. If value is null the
preference will be restored to its default value. If setting the preference
fails then error will be populated with a detailed description of the
problem. This method must be called on the CEF UI thread.
Preferences set via the command-line usually cannot be modified.
</summary>
            <param name="name">preference key</param>
            <param name="value">preference value</param>
            <param name="error">out error</param>
            <returns>Returns true if the value is set successfully and false otherwise.</returns>
            <remarks>Use Cef.UIThreadTaskFactory to execute this method if required,
<see cref="M:CefSharp.IBrowserProcessHandler.OnContextInitialized" /> and ChromiumWebBrowser.IsBrowserInitializedChanged are both
executed on the CEF UI thread, so can be called directly.
When CefSettings.MultiThreadedMessageLoop == false (the default is true) then the main
application thread will be the CEF UI thread.</remarks>
        </member>
        <member name="M:CefSharp.Core.RequestContext.CanSetPreference(System.String)">
            <summary>
Returns true if the preference with the specified name can be modified
using SetPreference. As one example preferences set via the command-line
usually cannot be modified. This method must be called on the CEF UI thread.
</summary>
            <param name="name">preference key</param>
            <returns>Returns true if the preference with the specified name can be modified
using SetPreference</returns>
            <remarks>Use Cef.UIThreadTaskFactory to execute this method if required,
<see cref="M:CefSharp.IBrowserProcessHandler.OnContextInitialized" /> and ChromiumWebBrowser.IsBrowserInitializedChanged are both
executed on the CEF UI thread, so can be called directly.
When CefSettings.MultiThreadedMessageLoop == false (the default is true) then the main
application thread will be the CEF UI thread.</remarks>
        </member>
        <member name="M:CefSharp.Core.RequestContext.GetAllPreferences(System.Boolean)">
            <summary>
Returns all preferences as a dictionary. The returned
object contains a copy of the underlying preference values and
modifications to the returned object will not modify the underlying
preference values. This method must be called on the browser process UI
thread.
</summary>
            <param name="includeDefaults">If true then
preferences currently at their default value will be included.</param>
            <returns>Preferences (dictionary can have sub dictionaries)</returns>
        </member>
        <member name="M:CefSharp.Core.RequestContext.GetPreference(System.String)">
            <summary>
Returns the value for the preference with the specified name. Returns
NULL if the preference does not exist. The returned object contains a copy
of the underlying preference value and modifications to the returned object
will not modify the underlying preference value. This method must be called
on the CEF UI thread.
</summary>
            <param name="name">preference name</param>
            <returns>Returns the value for the preference with the specified name</returns>
            <remarks>Use Cef.UIThreadTaskFactory to execute this method if required,
<see cref="M:CefSharp.IBrowserProcessHandler.OnContextInitialized" /> and ChromiumWebBrowser.IsBrowserInitializedChanged are both
executed on the CEF UI thread, so can be called directly.
When CefSettings.MultiThreadedMessageLoop == false (the default is true) then the main
application thread will be the CEF UI thread.</remarks>
        </member>
        <member name="M:CefSharp.Core.RequestContext.HasPreference(System.String)">
            <summary>
Returns true if a preference with the specified name exists. This method
must be called on the CEF UI thread.
</summary>
            <param name="name">name of preference</param>
            <returns>bool if the preference exists</returns>
            <remarks>Use Cef.UIThreadTaskFactory to execute this method if required,
<see cref="M:CefSharp.IBrowserProcessHandler.OnContextInitialized" /> and ChromiumWebBrowser.IsBrowserInitializedChanged are both
executed on the CEF UI thread, so can be called directly.
When CefSettings.MultiThreadedMessageLoop == false (the default is true) then the main
application thread will be the CEF UI thread.</remarks>
        </member>
        <member name="P:CefSharp.Core.RequestContext.CachePath">
            <summary>
Returns the cache path for this object. If empty an "incognito mode"
in-memory cache is being used.
</summary>
        </member>
        <member name="M:CefSharp.Core.RequestContext.ClearSchemeHandlerFactories">
            <summary>
Clear all registered scheme handler factories. 
</summary>
            <returns>Returns false on error.</returns>
        </member>
        <member name="M:CefSharp.Core.RequestContext.RegisterSchemeHandlerFactory(System.String,System.String,CefSharp.ISchemeHandlerFactory)">
            <summary>
Register a scheme handler factory for the specified schemeName and optional domainName.
An empty domainName value for a standard scheme will cause the factory to match all domain
names. The domainName value will be ignored for non-standard schemes. If schemeName is
a built-in scheme and no handler is returned by factory then the built-in scheme handler
factory will be called. If schemeName is a custom scheme then you must also implement the
IApp.OnRegisterCustomSchemes() method in all processes. This function may be called multiple
times to change or remove the factory that matches the specified schemeName and optional
domainName.
</summary>
            <param name="schemeName">Scheme Name</param>
            <param name="domainName">Optional domain name</param>
            <param name="factory">Scheme handler factory</param>
            <returns>Returns false if an error occurs.</returns>
        </member>
        <member name="P:CefSharp.Core.RequestContext.IsGlobal">
            <summary>
Returns true if this object is the global context. The global context is
used by default when creating a browser or URL request with a NULL context
argument.
</summary>
        </member>
        <member name="M:CefSharp.Core.RequestContext.GetCookieManager(CefSharp.ICompletionCallback)">
            <summary>
Returns the default cookie manager for this object. This will be the global
cookie manager if this object is the global request context. 
</summary>
            <param name="callback">If callback is non-NULL it will be executed asnychronously on the CEF IO thread
after the manager's storage has been initialized.</param>
            <returns>Returns the default cookie manager for this object</returns>
        </member>
        <member name="M:CefSharp.Core.RequestContext.IsSharingWith(CefSharp.IRequestContext)">
            <summary>
Returns true if this object is sharing the same storage as the specified context.
</summary>
            <param name="context">context to compare</param>
            <returns>Returns true if same storage</returns>
        </member>
        <member name="M:CefSharp.Core.RequestContext.IsSame(CefSharp.IRequestContext)">
            <summary>
Returns true if this object is pointing to the same context object.
</summary>
            <param name="context">context to compare</param>
            <returns>Returns true if the same</returns>
        </member>
        <member name="M:CefSharp.Core.RequestContext.CreateContext(CefSharp.IRequestContext,CefSharp.IRequestContextHandler)">
            <summary>
Creates a new context object that shares storage with other and uses an
optional handler.
</summary>
            <param name="other">shares storage with this RequestContext</param>
            <param name="requestContextHandler">optional requestContext handler</param>
            <returns>Returns a new RequestContext</returns>
        </member>
        <member name="M:CefSharp.Core.RequestContext.#ctor(CefSharp.IRequestContext)">
Creates a new context object that shares storage with | other | and uses an optional | handler | .
</member>
        <member name="T:CefSharp.Core.RequestContext">
            <summary>
A request context provides request handling for a set of related browser objects.
A request context is specified when creating a new browser object via the CefBrowserHost
static factory methods. Browser objects with different request contexts will never be
hosted in the same render process. Browser objects with the same request context may or
may not be hosted in the same render process depending on the process model.
Browser objects created indirectly via the JavaScript window.open function or targeted
links will share the same render process and the same request context as the source browser.
When running in single-process mode there is only a single render process (the main process)
and so all browsers created in single-process mode will share the same request context.
This will be the first request context passed into a CefBrowserHost static factory method
and all other request context objects will be ignored. 
</summary>
        </member>
        <member name="M:CefRequestContextHandler.GetResourceRequestHandler(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefRequest&gt;,System.Boolean,System.Boolean,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called on the browser process IO thread before a resource request is
initiated. The |browser| and |frame| values represent the source of the
request, and may be NULL for requests originating from service workers or
CefURLRequest. |request| represents the request contents and cannot be
modified in this callback. |is_navigation| will be true if the resource
request is a navigation. |is_download| will be true if the resource
request is a download. |request_initiator| is the origin (scheme + domain)
of the page that initiated the request. Set |disable_default_handling| to
true to disable default handling of the request, in which case it will
need to be handled via CefResourceRequestHandler::GetResourceHandler or it
will be canceled. To allow the resource load to proceed with default
handling return NULL. To specify a handler for the resource return a
CefResourceRequestHandler object. This method will not be called if the
client associated with |browser| returns a non-NULL value from
CefRequestHandler::GetResourceRequestHandler for the same request
(identified by CefRequest::GetIdentifier).

</member>
        <member name="M:CefRequestContextHandler.OnRequestContextInitialized(scoped_refptr&lt;CefRequestContext&gt;)">

Called on the browser process UI thread immediately after the request
context has been initialized.

</member>
        <member name="T:CefRequestContextHandler">

Implement this interface to provide handler implementations. The handler
instance will not be released until all objects related to the context have
been destroyed.

</member>
        <member name="P:CefSharp.Core.RequestContextSettings.CookieableSchemesExcludeDefaults">
            <summary>
If CookieableSchemesExcludeDefaults is false the
default schemes ("http", "https", "ws" and "wss") will also be supported.
Specifying a CookieableSchemesList value and setting
CookieableSchemesExcludeDefaults to true will disable all loading
and saving of cookies for this manager. This value will be ignored if
<see cref="P:CefSharp.Core.RequestContextSettings.CachePath" /> matches the <see cref="!:CefSettingsBase.CachePath" /> value.
</summary>
        </member>
        <member name="P:CefSharp.Core.RequestContextSettings.CookieableSchemesList">
            <summary>
Comma delimited list of schemes supported by the associated
ICookieManager. If CookieableSchemesExcludeDefaults is false the
default schemes ("http", "https", "ws" and "wss") will also be supported.
Specifying a CookieableSchemesList value and setting
CookieableSchemesExcludeDefaults to true will disable all loading
and saving of cookies for this manager. This value will be ignored if
<see cref="P:CefSharp.Core.RequestContextSettings.CachePath" /> matches the <see cref="!:CefSettingsBase.CachePath" /> value.
</summary>
        </member>
        <member name="P:CefSharp.Core.RequestContextSettings.AcceptLanguageList">
            <summary>
Comma delimited ordered list of language codes without any whitespace that
will be used in the "Accept-Language" HTTP header. Can be set globally
using the CefSettings.accept_language_list value or overridden on a per-
browser basis using the BrowserSettings.AcceptLanguageList value. If
all values are empty then "en-US,en" will be used. This value will be
ignored if CachePath matches the CefSettings.CachePath value.
</summary>
        </member>
        <member name="P:CefSharp.Core.RequestContextSettings.CachePath">
            <summary>
The location where cache data for this request context will be stored on
disk. If this value is non-empty then it must be an absolute path that is
either equal to or a child directory of CefSettings.RootCachePath.
If the value is empty then browsers will be created in "incognito mode"
where in-memory caches are used for storage and no data is persisted to disk.
HTML5 databases such as localStorage will only persist across sessions if a
cache path is specified. To share the global browser cache and related
configuration set this value to match the CefSettings.CachePath value.
</summary>
        </member>
        <member name="P:CefSharp.Core.RequestContextSettings.PersistUserPreferences">
            <summary>
To persist user preferences as a JSON file in the cache path directory set
this value to true. Can be set globally using the
CefSettings.PersistUserPreferences value. This value will be ignored if
CachePath is empty or if it matches the CefSettings.CachePath value.
</summary>
        </member>
        <member name="P:CefSharp.Core.RequestContextSettings.PersistSessionCookies">
            <summary>
To persist session cookies (cookies without an expiry date or validity
interval) by default when using the global cookie manager set this value to
true. Session cookies are generally intended to be transient and most
Web browsers do not persist them. Can be set globally using the
CefSettings.PersistSessionCookies value. This value will be ignored if
CachePath is empty or if it matches the CefSettings.CachePath value.
</summary>
        </member>
        <member name="M:CefSharp.Core.RequestContextSettings.#ctor">
            <summary>
Initializes a new instance of the RequestContextSettings class.
</summary>
        </member>
        <member name="T:CefSharp.Core.RequestContextSettings">
            <summary>
RequestContextSettings
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.AutoDispose">
            <summary>
True if dispose should be called after this object is used
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.IsDisposed">
            <summary>
Gets a value indicating if the browser settings has been disposed.
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.WindowlessFrameRate">
            <summary>
The maximum rate in frames per second (fps) that CefRenderHandler::OnPaint
will be called for a windowless browser. The actual fps may be lower if
the browser cannot generate frames at the requested rate. The minimum
value is 1 and the maximum value is 60 (default 30). This value can also be
changed dynamically via IBrowserHost.SetWindowlessFrameRate.
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.AcceptLanguageList">
            <summary>
Comma delimited ordered list of language codes without any whitespace that
will be used in the "Accept-Language" HTTP header. May be overridden on a
per-browser basis using the CefBrowserSettings.AcceptLanguageList value.
If both values are empty then "en-US,en" will be used. Can be overridden
for individual RequestContext instances via the
RequestContextSettings.AcceptLanguageList value.
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.BackgroundColor">
            <summary>
Background color used for the browser before a document is loaded and when no document color
is specified. The alpha component must be either fully opaque (0xFF) or fully transparent (0x00).
If the alpha component is fully opaque then the RGB components will be used as the background
color. If the alpha component is fully transparent for a WinForms browser then the
CefSettings.BackgroundColor value will be used. If the alpha component is fully transparent
for a windowless (WPF/OffScreen) browser then transparent painting will be enabled.
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.WebGl">
            <summary>
Controls whether WebGL can be used. Note that WebGL requires hardware
support and may not work on all systems even when enabled. Also
configurable using the "disable-webgl" command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.Databases">
            <summary>
Controls whether databases can be used. Also configurable using the
"disable-databases" command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.LocalStorage">
            <summary>
Controls whether local storage can be used. Also configurable using the
"disable-local-storage" command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.TabToLinks">
            <summary>
Controls whether the tab key can advance focus to links. Also configurable
using the "disable-tab-to-links" command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.TextAreaResize">
            <summary>
Controls whether text areas can be resized. Also configurable using the
"disable-text-area-resize" command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.ImageShrinkStandaloneToFit">
            <summary>
Controls whether standalone images will be shrunk to fit the page. Also
configurable using the "image-shrink-standalone-to-fit" command-line
switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.ImageLoading">
            <summary>
Controls whether image URLs will be loaded from the network. A cached image
will still be rendered if requested. Also configurable using the
"disable-image-loading" command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.JavascriptDomPaste">
            <summary>
Controls whether DOM pasting is supported in the editor via
execCommand("paste"). The |javascript_access_clipboard| setting must also
be enabled. Also configurable using the "disable-javascript-dom-paste"
command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.JavascriptAccessClipboard">
            <summary>
Controls whether JavaScript can access the clipboard. Also configurable
using the "disable-javascript-access-clipboard" command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.JavascriptCloseWindows">
            <summary>
Controls whether JavaScript can be used to close windows that were not
opened via JavaScript. JavaScript can still be used to close windows that
were opened via JavaScript. Also configurable using the
"disable-javascript-close-windows" command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.Javascript">
            <summary>
Controls whether JavaScript can be executed. (Used to Enable/Disable javascript)
Also configurable using the "disable-javascript" command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.RemoteFonts">
            <summary>
Controls the loading of fonts from remote sources. Also configurable using
the "disable-remote-fonts" command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.DefaultEncoding">
            <summary>
Default encoding for Web content. If empty "ISO-8859-1" will be used. Also
configurable using the "default-encoding" command-line switch.
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.MinimumLogicalFontSize">
            <summary>
MinimumLogicalFontSize
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.MinimumFontSize">
            <summary>
MinimumFontSize
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.DefaultFixedFontSize">
            <summary>
DefaultFixedFontSize
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.DefaultFontSize">
            <summary>
DefaultFontSize
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.FantasyFontFamily">
            <summary>
FantasyFontFamily
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.CursiveFontFamily">
            <summary>
CursiveFontFamily
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.SansSerifFontFamily">
            <summary>
SansSerifFontFamily
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.SerifFontFamily">
            <summary>
SerifFontFamily
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.FixedFontFamily">
            <summary>
FixedFontFamily
</summary>
        </member>
        <member name="P:CefSharp.Core.BrowserSettings.StandardFontFamily">
            <summary>
StandardFontFamily
</summary>
        </member>
        <member name="M:CefSharp.Core.BrowserSettings.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:CefSharp.Core.BrowserSettings.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:CefSharp.Core.BrowserSettings.#ctor">
            <summary>
Default Constructor
</summary>
        </member>
        <member name="M:CefSharp.Core.BrowserSettings.#ctor(CefStructBase&lt;CefBrowserSettingsTraits&gt;*)">
            <summary>
Internal Constructor
</summary>
        </member>
        <member name="T:CefSharp.Core.BrowserSettings">
            <summary>
Browser initialization settings. Specify NULL or 0 to get the recommended
default values. The consequences of using custom values may not be well
tested. Many of these and other settings can also configured using command-
line switches.
</summary>
        </member>
        <member name="M:CefClient.OnProcessMessageReceived(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,cef_process_id_t,scoped_refptr&lt;CefProcessMessage&gt;)">

Called when a new message is received from a different process. Return
true if the message was handled or false otherwise.  It is safe to keep a
reference to |message| outside of this callback.



Called when a new message is received from a different process. Return
true if the message was handled or false otherwise.  It is safe to keep a
reference to |message| outside of this callback.

</member>
        <member name="M:CefClient.GetRequestHandler">

Return the handler for browser request events.



Return the handler for browser request events.

</member>
        <member name="M:CefClient.GetRenderHandler">

Return the handler for off-screen rendering events.



Return the handler for off-screen rendering events.

</member>
        <member name="M:CefClient.GetPrintHandler">

Return the handler for printing on Linux. If a print handler is not
provided then printing will not be supported on the Linux platform.



Return the handler for printing on Linux. If a print handler is not
provided then printing will not be supported on the Linux platform.

</member>
        <member name="M:CefClient.GetLoadHandler">

Return the handler for browser load status events.



Return the handler for browser load status events.

</member>
        <member name="M:CefClient.GetLifeSpanHandler">

Return the handler for browser life span events.



Return the handler for browser life span events.

</member>
        <member name="M:CefClient.GetKeyboardHandler">

Return the handler for keyboard events.



Return the handler for keyboard events.

</member>
        <member name="M:CefClient.GetJSDialogHandler">

Return the handler for JavaScript dialogs. If no handler is provided the
default implementation will be used.



Return the handler for JavaScript dialogs. If no handler is provided the
default implementation will be used.

</member>
        <member name="M:CefClient.GetPermissionHandler">

Return the handler for permission requests.



Return the handler for permission requests.

</member>
        <member name="M:CefClient.GetFrameHandler">

Return the handler for events related to CefFrame lifespan. This method
will be called once during CefBrowser creation and the result will be
cached for performance reasons.



Return the handler for events related to CefFrame lifespan. This method
will be called once during CefBrowser creation and the result will be
cached for performance reasons.

</member>
        <member name="M:CefClient.GetFocusHandler">

Return the handler for focus events.



Return the handler for focus events.

</member>
        <member name="M:CefClient.GetFindHandler">

Return the handler for find result events.



Return the handler for find result events.

</member>
        <member name="M:CefClient.GetDragHandler">

Return the handler for drag events.



Return the handler for drag events.

</member>
        <member name="M:CefClient.GetDownloadHandler">

Return the handler for download events. If no handler is returned
downloads will not be allowed.



Return the handler for download events. If no handler is returned
downloads will not be allowed.

</member>
        <member name="M:CefClient.GetDisplayHandler">

Return the handler for browser display state events.



Return the handler for browser display state events.

</member>
        <member name="M:CefClient.GetDialogHandler">

Return the handler for dialogs. If no handler is provided the default
implementation will be used.



Return the handler for dialogs. If no handler is provided the default
implementation will be used.

</member>
        <member name="M:CefClient.GetContextMenuHandler">

Return the handler for context menus. If no handler is provided the
default implementation will be used.



Return the handler for context menus. If no handler is provided the
default implementation will be used.

</member>
        <member name="M:CefClient.GetCommandHandler">

Return the handler for commands. If no handler is provided the default
implementation will be used.



Return the handler for commands. If no handler is provided the default
implementation will be used.

</member>
        <member name="M:CefClient.GetAudioHandler">

Return the handler for audio rendering events.



Return the handler for audio rendering events.

</member>
        <member name="T:CefClient">

Implement this interface to provide handler implementations.



Implement this interface to provide handler implementations.

</member>
        <member name="M:CefRequestHandler.OnDocumentAvailableInMainFrame(scoped_refptr&lt;CefBrowser&gt;)">

Called on the browser process UI thread when the window.document object of
the main frame has been created.

</member>
        <member name="M:CefRequestHandler.OnRenderProcessTerminated(scoped_refptr&lt;CefBrowser&gt;,cef_termination_status_t)">

Called on the browser process UI thread when the render process
terminates unexpectedly. |status| indicates how the process
terminated.

</member>
        <member name="M:CefRequestHandler.OnRenderViewReady(scoped_refptr&lt;CefBrowser&gt;)">

Called on the browser process UI thread when the render view associated
with |browser| is ready to receive/handle IPC messages in the render
process.

</member>
        <member name="M:CefRequestHandler.OnSelectClientCertificate(scoped_refptr&lt;CefBrowser&gt;,System.Boolean,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,std.vector&lt;scoped_refptr&lt;CefX509Certificate&gt;,std.allocator&lt;scoped_refptr&lt;CefX509Certificate&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefSelectClientCertificateCallback&gt;)">

Called on the UI thread when a client certificate is being requested for
authentication. Return false to use the default behavior and automatically
select the first certificate available. Return true and call
CefSelectClientCertificateCallback::Select either in this method or at a
later time to select a certificate. Do not call Select or call it with
NULL to continue without using any certificate. |isProxy| indicates
whether the host is an HTTPS proxy or the origin server. |host| and |port|
contains the hostname and port of the SSL server. |certificates| is the
list of certificates to choose from; this list has already been pruned by
Chromium so that it only contains certificates from issuers that the
server trusts.

</member>
        <member name="M:CefRequestHandler.OnCertificateError(scoped_refptr&lt;CefBrowser&gt;,cef_errorcode_t,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefSSLInfo&gt;,scoped_refptr&lt;CefCallback&gt;)">

Called on the UI thread to handle requests for URLs with an invalid
SSL certificate. Return true and call CefCallback methods either in this
method or at a later time to continue or cancel the request. Return false
to cancel the request immediately. If
cef_settings_t.ignore_certificate_errors is set all invalid certificates
will be accepted without calling this method.

</member>
        <member name="M:CefRequestHandler.OnQuotaRequest(scoped_refptr&lt;CefBrowser&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64,scoped_refptr&lt;CefCallback&gt;)">

Called on the IO thread when JavaScript requests a specific storage quota
size via the webkitStorageInfo.requestQuota function. |origin_url| is the
origin of the page making the request. |new_size| is the requested quota
size in bytes. Return true to continue the request and call CefCallback
methods either in this method or at a later time to grant or deny the
request. Return false to cancel the request immediately.

</member>
        <member name="M:CefRequestHandler.GetAuthCredentials(scoped_refptr&lt;CefBrowser&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefAuthCallback&gt;)">

Called on the IO thread when the browser needs credentials from the user.
|origin_url| is the origin making this authentication request. |isProxy|
indicates whether the host is a proxy server. |host| contains the hostname
and |port| contains the port number. |realm| is the realm of the challenge
and may be empty. |scheme| is the authentication scheme used, such as
"basic" or "digest", and will be empty if the source of the request is an
FTP server. Return true to continue the request and call
CefAuthCallback::Continue() either in this method or at a later time when
the authentication information is available. Return false to cancel the
request immediately.

</member>
        <member name="M:CefRequestHandler.GetResourceRequestHandler(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefRequest&gt;,System.Boolean,System.Boolean,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called on the browser process IO thread before a resource request is
initiated. The |browser| and |frame| values represent the source of the
request. |request| represents the request contents and cannot be modified
in this callback. |is_navigation| will be true if the resource request is
a navigation. |is_download| will be true if the resource request is a
download. |request_initiator| is the origin (scheme + domain) of the page
that initiated the request. Set |disable_default_handling| to true to
disable default handling of the request, in which case it will need to be
handled via CefResourceRequestHandler::GetResourceHandler or it will be
canceled. To allow the resource load to proceed with default handling
return NULL. To specify a handler for the resource return a
CefResourceRequestHandler object. If this callback returns NULL the same
method will be called on the associated CefRequestContextHandler, if any.

</member>
        <member name="M:CefRequestHandler.OnOpenURLFromTab(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cef_window_open_disposition_t,System.Boolean)">

Called on the UI thread before OnBeforeBrowse in certain limited cases
where navigating a new or different browser might be desirable. This
includes user-initiated navigation that might open in a special way (e.g.
links clicked via middle-click or ctrl + left-click) and certain types of
cross-origin navigation initiated from the renderer process (e.g.
navigating the top-level frame to/from a file URL). The |browser| and
|frame| values represent the source of the navigation. The
|target_disposition| value indicates where the user intended to navigate
the browser based on standard Chromium behaviors (e.g. current tab,
new tab, etc). The |user_gesture| value will be true if the browser
navigated via explicit user gesture (e.g. clicking a link) or false if it
navigated automatically (e.g. via the DomContentLoaded event). Return true
to cancel the navigation or false to allow the navigation to proceed in
the source browser's top-level frame.

</member>
        <member name="M:CefRequestHandler.OnBeforeBrowse(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefRequest&gt;,System.Boolean,System.Boolean)">

Called on the UI thread before browser navigation. Return true to cancel
the navigation or false to allow the navigation to proceed. The |request|
object cannot be modified in this callback.
CefLoadHandler::OnLoadingStateChange will be called twice in all cases.
If the navigation is allowed CefLoadHandler::OnLoadStart and
CefLoadHandler::OnLoadEnd will be called. If the navigation is canceled
CefLoadHandler::OnLoadError will be called with an |errorCode| value of
ERR_ABORTED. The |user_gesture| value will be true if the browser
navigated via explicit user gesture (e.g. clicking a link) or false if it
navigated automatically (e.g. via the DomContentLoaded event).

</member>
        <member name="T:CefRequestHandler">

Implement this interface to handle events related to browser requests. The
methods of this class will be called on the thread indicated.

</member>
        <member name="M:CefSelectClientCertificateCallback.Select(scoped_refptr&lt;CefX509Certificate&gt;)">

Chooses the specified certificate for client certificate authentication.
NULL value means that no client certificate should be used.

</member>
        <member name="T:CefSelectClientCertificateCallback">

Callback interface used to select a client certificate for authentication.

</member>
        <member name="M:CefIsCertStatusError(cef_cert_status_t)">

Returns true if the certificate status represents an error.

</member>
        <member name="M:CefSSLInfo.GetX509Certificate">

Returns the X.509 certificate.

</member>
        <member name="M:CefSSLInfo.GetCertStatus">

Returns a bitmask containing any and all problems verifying the server
certificate.

</member>
        <member name="T:CefSSLInfo">

Class representing SSL information.

</member>
        <member name="M:CefCookieAccessFilter.CanSaveCookie(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefRequest&gt;,scoped_refptr&lt;CefResponse&gt;,CefStructBase&lt;CefCookieTraits&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called on the IO thread after a resource response is received. The
|browser| and |frame| values represent the source of the request, and may
be NULL for requests originating from service workers or CefURLRequest.
|request| cannot be modified in this callback. Return true if the
specified cookie returned with the response can be saved or false
otherwise.

</member>
        <member name="M:CefCookieAccessFilter.CanSendCookie(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefRequest&gt;,CefStructBase&lt;CefCookieTraits&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called on the IO thread before a resource request is sent. The |browser|
and |frame| values represent the source of the request, and may be NULL
for requests originating from service workers or CefURLRequest. |request|
cannot be modified in this callback. Return true if the specified cookie
can be sent with the request or false otherwise.

</member>
        <member name="T:CefCookieAccessFilter">

Implement this interface to filter cookies that may be sent or received from
resource requests. The methods of this class will be called on the IO thread
unless otherwise indicated.

</member>
        <member name="M:CefResourceRequestHandler.OnProtocolExecution(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefRequest&gt;,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called on the IO thread to handle requests for URLs with an unknown
protocol component. The |browser| and |frame| values represent the source
of the request, and may be NULL for requests originating from service
workers or CefURLRequest. |request| cannot be modified in this callback.
Set |allow_os_execution| to true to attempt execution via the registered
OS protocol handler, if any. SECURITY WARNING: YOU SHOULD USE THIS METHOD
TO ENFORCE RESTRICTIONS BASED ON SCHEME, HOST OR OTHER URL ANALYSIS BEFORE
ALLOWING OS EXECUTION.

</member>
        <member name="M:CefResourceRequestHandler.OnResourceLoadComplete(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefRequest&gt;,scoped_refptr&lt;CefResponse&gt;,cef_urlrequest_status_t,System.Int64)">

Called on the IO thread when a resource load has completed. The |browser|
and |frame| values represent the source of the request, and may be NULL
for requests originating from service workers or CefURLRequest. |request|
and |response| represent the request and response respectively and cannot
be modified in this callback. |status| indicates the load completion
status. |received_content_length| is the number of response bytes actually
read. This method will be called for all requests, including requests that
are aborted due to CEF shutdown or destruction of the associated browser.
In cases where the associated browser is destroyed this callback may
arrive after the CefLifeSpanHandler::OnBeforeClose callback for that
browser. The CefFrame::IsValid method can be used to test for this
situation, and care should be taken not to call |browser| or |frame|
methods that modify state (like LoadURL, SendProcessMessage, etc.) if the
frame is invalid.

</member>
        <member name="M:CefResourceRequestHandler.GetResourceResponseFilter(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefRequest&gt;,scoped_refptr&lt;CefResponse&gt;)">

Called on the IO thread to optionally filter resource response content.
The |browser| and |frame| values represent the source of the request, and
may be NULL for requests originating from service workers or
CefURLRequest. |request| and |response| represent the request and response
respectively and cannot be modified in this callback.

</member>
        <member name="M:CefResourceRequestHandler.OnResourceResponse(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefRequest&gt;,scoped_refptr&lt;CefResponse&gt;)">

Called on the IO thread when a resource response is received. The
|browser| and |frame| values represent the source of the request, and may
be NULL for requests originating from service workers or CefURLRequest. To
allow the resource load to proceed without modification return false. To
redirect or retry the resource load optionally modify |request| and return
true. Modification of the request URL will be treated as a redirect.
Requests handled using the default network loader cannot be redirected in
this callback. The |response| object cannot be modified in this callback.

WARNING: Redirecting using this method is deprecated. Use
OnBeforeResourceLoad or GetResourceHandler to perform redirects.

</member>
        <member name="M:CefResourceRequestHandler.OnResourceRedirect(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefRequest&gt;,scoped_refptr&lt;CefResponse&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called on the IO thread when a resource load is redirected. The |browser|
and |frame| values represent the source of the request, and may be NULL
for requests originating from service workers or CefURLRequest. The
|request| parameter will contain the old URL and other request-related
information. The |response| parameter will contain the response that
resulted in the redirect. The |new_url| parameter will contain the new URL
and can be changed if desired. The |request| and |response| objects cannot
be modified in this callback.

</member>
        <member name="M:CefResourceRequestHandler.GetResourceHandler(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefRequest&gt;)">

Called on the IO thread before a resource is loaded. The |browser| and
|frame| values represent the source of the request, and may be NULL for
requests originating from service workers or CefURLRequest. To allow the
resource to load using the default network loader return NULL. To specify
a handler for the resource return a CefResourceHandler object. The
|request| object cannot not be modified in this callback.

</member>
        <member name="M:CefResourceRequestHandler.OnBeforeResourceLoad(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefRequest&gt;,scoped_refptr&lt;CefCallback&gt;)">

Called on the IO thread before a resource request is loaded. The |browser|
and |frame| values represent the source of the request, and may be NULL
for requests originating from service workers or CefURLRequest. To
redirect or change the resource load optionally modify |request|.
Modification of the request URL will be treated as a redirect. Return
RV_CONTINUE to continue the request immediately. Return RV_CONTINUE_ASYNC
and call CefCallback methods at a later time to continue or cancel the
request asynchronously. Return RV_CANCEL to cancel the request
immediately.

</member>
        <member name="M:CefResourceRequestHandler.GetCookieAccessFilter(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefRequest&gt;)">

Called on the IO thread before a resource request is loaded. The |browser|
and |frame| values represent the source of the request, and may be NULL
for requests originating from service workers or CefURLRequest. To
optionally filter cookies for the request return a CefCookieAccessFilter
object. The |request| object cannot not be modified in this callback.

</member>
        <member name="T:CefResourceRequestHandler">

Implement this interface to handle events related to browser requests. The
methods of this class will be called on the IO thread unless otherwise
indicated.

</member>
        <member name="M:CefResponseFilter.Filter(System.Void*,System.UInt32,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*,System.UInt32,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called to filter a chunk of data. Expected usage is as follows:

 1. Read input data from |data_in| and set |data_in_read| to the number of
    bytes that were read up to a maximum of |data_in_size|. |data_in| will
    be NULL if |data_in_size| is zero.
 2. Write filtered output data to |data_out| and set |data_out_written| to
    the number of bytes that were written up to a maximum of
    |data_out_size|. If no output data was written then all data must be
    read from |data_in| (user must set |data_in_read| = |data_in_size|).
 3. Return RESPONSE_FILTER_DONE if all output data was written or
    RESPONSE_FILTER_NEED_MORE_DATA if output data is still pending.

This method will be called repeatedly until the input buffer has been
fully read (user sets |data_in_read| = |data_in_size|) and there is no
more input data to filter (the resource response is complete). This method
may then be called an additional time with an empty input buffer if the
user filled the output buffer (set |data_out_written| = |data_out_size|)
and returned RESPONSE_FILTER_NEED_MORE_DATA to indicate that output data
is still pending.

Calls to this method will stop when one of the following conditions is
met:

 1. There is no more input data to filter (the resource response is
    complete) and the user sets |data_out_written| = 0 or returns
    RESPONSE_FILTER_DONE to indicate that all data has been written, or;
 2. The user returns RESPONSE_FILTER_ERROR to indicate an error.

Do not keep a reference to the buffers passed to this method.

</member>
        <member name="M:CefResponseFilter.InitFilter">

Initialize the response filter. Will only be called a single time. The
filter will not be installed if this method returns false.

</member>
        <member name="T:CefResponseFilter">

Implement this interface to filter resource response content. The methods of
this class will be called on the browser process IO thread.

</member>
        <member name="M:CefResourceHandler.Cancel">

Request processing has been canceled.

</member>
        <member name="M:CefResourceHandler.ReadResponse(System.Void*,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefCallback&gt;)">

Read response data. If data is available immediately copy up to
|bytes_to_read| bytes into |data_out|, set |bytes_read| to the number of
bytes copied, and return true. To read the data at a later time set
|bytes_read| to 0, return true and call CefCallback::Continue() when the
data is available. To indicate response completion return false.

WARNING: This method is deprecated. Use Skip and Read instead.

</member>
        <member name="M:CefResourceHandler.GetResponseHeaders(scoped_refptr&lt;CefResponse&gt;,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Retrieve response header information. If the response length is not known
set |response_length| to -1 and ReadResponse() will be called until it
returns false. If the response length is known set |response_length|
to a positive value and ReadResponse() will be called until it returns
false or the specified number of bytes have been read. Use the |response|
object to set the mime type, http status code and other optional header
values. To redirect the request to a new URL set |redirectUrl| to the new
URL. |redirectUrl| can be either a relative or fully qualified URL.
It is also possible to set |response| to a redirect http status code
and pass the new URL via a Location header. Likewise with |redirectUrl| it
is valid to set a relative or fully qualified URL as the Location header
value. If an error occured while setting up the request you can call
SetError() on |response| to indicate the error condition.

</member>
        <member name="M:CefResourceHandler.ProcessRequest(scoped_refptr&lt;CefRequest&gt;,scoped_refptr&lt;CefCallback&gt;)">

Begin processing the request. To handle the request return true and call
CefCallback::Continue() once the response header information is available
(CefCallback::Continue() can also be called from inside this method if
header information is available immediately). To cancel the request return
false.

WARNING: This method is deprecated. Use Open instead.

</member>
        <member name="M:CefResourceHandler.Open(scoped_refptr&lt;CefRequest&gt;,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefCallback&gt;)">

Open the response stream. To handle the request immediately set
|handle_request| to true and return true. To decide at a later time set
|handle_request| to false, return true, and execute |callback| to continue
or cancel the request. To cancel the request immediately set
|handle_request| to true and return false. This method will be called in
sequence but not from a dedicated thread. For backwards compatibility set
|handle_request| to false and return false and the ProcessRequest method
will be called.

</member>
        <member name="T:CefResourceHandler">

Class used to implement a custom request handler interface. The methods of
this class will be called on the IO thread unless otherwise indicated.

</member>
        <member name="T:CefResourceReadCallback">

Callback for asynchronous continuation of CefResourceHandler::Read().

</member>
        <member name="T:CefResourceSkipCallback">

Callback for asynchronous continuation of CefResourceHandler::Skip().

</member>
        <member name="M:CefAuthCallback.Cancel">

Cancel the authentication request.



Cancel the authentication request.

</member>
        <member name="M:CefAuthCallback.Continue(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Continue the authentication request.



Continue the authentication request.

</member>
        <member name="T:CefAuthCallback">

Callback interface used for asynchronous continuation of authentication
requests.



Callback interface used for asynchronous continuation of authentication
requests.

</member>
        <member name="M:CefRenderHandler.OnVirtualKeyboardRequested(scoped_refptr&lt;CefBrowser&gt;,cef_text_input_mode_t)">

Called when an on-screen keyboard should be shown or hidden for the
specified |browser|. |input_mode| specifies what kind of keyboard
should be opened. If |input_mode| is CEF_TEXT_INPUT_MODE_NONE, any
existing keyboard for this browser should be hidden.

</member>
        <member name="M:CefRenderHandler.OnTextSelectionChanged(scoped_refptr&lt;CefBrowser&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called when text selection has changed for the specified |browser|.
|selected_text| is the currently selected text and |selected_range| is
the character range.

</member>
        <member name="M:CefRenderHandler.OnImeCompositionRangeChanged(scoped_refptr&lt;CefBrowser&gt;,CefRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;CefRect,std.allocator&lt;CefRect&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called when the IME composition range has changed. |selected_range| is the
range of characters that have been selected. |character_bounds| is the
bounds of each character in view coordinates.

</member>
        <member name="M:CefRenderHandler.OnScrollOffsetChanged(scoped_refptr&lt;CefBrowser&gt;,System.Double,System.Double)">

Called when the scroll offset has changed.

</member>
        <member name="M:CefRenderHandler.StartDragging(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefDragData&gt;,cef_drag_operations_mask_t,System.Int32,System.Int32)">

Called when the user starts dragging content in the web view. Contextual
information about the dragged content is supplied by |drag_data|.
(|x|, |y|) is the drag start location in screen coordinates.
OS APIs that run a system message loop may be used within the
StartDragging call.

Return false to abort the drag operation. Don't call any of
CefBrowserHost::DragSource*Ended* methods after returning false.

Return true to handle the drag operation. Call
CefBrowserHost::DragSourceEndedAt and DragSourceSystemDragEnded either
synchronously or asynchronously to inform the web view that the drag
operation has ended.

</member>
        <member name="M:CefRenderHandler.OnTouchHandleStateChanged(scoped_refptr&lt;CefBrowser&gt;,CefTouchHandleState!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called when touch handle state is updated. The client is responsible for
rendering the touch handles.

</member>
        <member name="M:CefRenderHandler.GetTouchHandleSize(scoped_refptr&lt;CefBrowser&gt;,cef_horizontal_alignment_t,CefSize*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called to retrieve the size of the touch handle for the specified
|orientation|.

</member>
        <member name="M:CefRenderHandler.OnAcceleratedPaint(scoped_refptr&lt;CefBrowser&gt;,cef_paint_element_type_t,std.vector&lt;CefRect,std.allocator&lt;CefRect&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*)">

Called when an element has been rendered to the shared texture handle.
|type| indicates whether the element is the view or the popup widget.
|dirtyRects| contains the set of rectangles in pixel coordinates that need
to be repainted. |shared_handle| is the handle for a D3D11 Texture2D that
can be accessed via ID3D11Device using the OpenSharedResource method. This
method is only called when CefWindowInfo::shared_texture_enabled is set to
true, and is currently only supported on Windows.

</member>
        <member name="M:CefRenderHandler.OnPaint(scoped_refptr&lt;CefBrowser&gt;,cef_paint_element_type_t,std.vector&lt;CefRect,std.allocator&lt;CefRect&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32)">

Called when an element should be painted. Pixel values passed to this
method are scaled relative to view coordinates based on the value of
CefScreenInfo.device_scale_factor returned from GetScreenInfo. |type|
indicates whether the element is the view or the popup widget. |buffer|
contains the pixel data for the whole image. |dirtyRects| contains the set
of rectangles in pixel coordinates that need to be repainted. |buffer|
will be |width|*|height|*4 bytes in size and represents a BGRA image with
an upper-left origin. This method is only called when
CefWindowInfo::shared_texture_enabled is set to false.

</member>
        <member name="M:CefRenderHandler.OnPopupSize(scoped_refptr&lt;CefBrowser&gt;,CefRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called when the browser wants to move or resize the popup widget. |rect|
contains the new location and size in view coordinates.

</member>
        <member name="M:CefRenderHandler.OnPopupShow(scoped_refptr&lt;CefBrowser&gt;,System.Boolean)">

Called when the browser wants to show or hide the popup widget. The popup
should be shown if |show| is true and hidden if |show| is false.

</member>
        <member name="M:CefRenderHandler.GetScreenInfo(scoped_refptr&lt;CefBrowser&gt;,CefScreenInfo*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called to allow the client to fill in the CefScreenInfo object with
appropriate values. Return true if the |screen_info| structure has been
modified.

If the screen info rectangle is left empty the rectangle from GetViewRect
will be used. If the rectangle is still empty or invalid popups may not be
drawn correctly.

</member>
        <member name="M:CefRenderHandler.GetScreenPoint(scoped_refptr&lt;CefBrowser&gt;,System.Int32,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called to retrieve the translation from view DIP coordinates to screen
coordinates. Windows/Linux should provide screen device (pixel)
coordinates and MacOS should provide screen DIP coordinates. Return true
if the requested coordinates were provided.

</member>
        <member name="M:CefRenderHandler.GetViewRect(scoped_refptr&lt;CefBrowser&gt;,CefRect*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called to retrieve the view rectangle in screen DIP coordinates. This
method must always provide a non-empty rectangle.

</member>
        <member name="M:CefRenderHandler.GetRootScreenRect(scoped_refptr&lt;CefBrowser&gt;,CefRect*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called to retrieve the root window rectangle in screen DIP coordinates.
Return true if the rectangle was provided. If this method returns false
the rectangle from GetViewRect will be used.

</member>
        <member name="M:CefRenderHandler.GetAccessibilityHandler">

Return the handler for accessibility notifications. If no handler is
provided the default implementation will be used.

</member>
        <member name="T:CefRenderHandler">

Implement this interface to handle events when window rendering is disabled.
The methods of this class will be called on the UI thread.

</member>
        <member name="M:CefAccessibilityHandler.OnAccessibilityLocationChange(scoped_refptr&lt;CefValue&gt;)">

Called after renderer process sends accessibility location changes to the
browser process.

</member>
        <member name="M:CefAccessibilityHandler.OnAccessibilityTreeChange(scoped_refptr&lt;CefValue&gt;)">

Called after renderer process sends accessibility tree changes to the
browser process.

</member>
        <member name="T:CefAccessibilityHandler">

Implement this interface to receive accessibility notification when
accessibility events have been registered. The methods of this class will
be called on the UI thread.

</member>
        <member name="M:CefPrintHandler.GetPdfPaperSize(scoped_refptr&lt;CefBrowser&gt;,System.Int32)">

Return the PDF paper size in device units. Used in combination with
CefBrowserHost::PrintToPDF().

</member>
        <member name="M:CefPrintHandler.OnPrintReset(scoped_refptr&lt;CefBrowser&gt;)">

Reset client state related to printing.

</member>
        <member name="M:CefPrintHandler.OnPrintJob(scoped_refptr&lt;CefBrowser&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefPrintJobCallback&gt;)">

Send the print job to the printer. Execute |callback| once the job is
completed. Return true if the job will proceed or false to cancel the job
immediately.

</member>
        <member name="M:CefPrintHandler.OnPrintDialog(scoped_refptr&lt;CefBrowser&gt;,System.Boolean,scoped_refptr&lt;CefPrintDialogCallback&gt;)">

Show the print dialog. Execute |callback| once the dialog is dismissed.
Return true if the dialog will be displayed or false to cancel the
printing immediately.

</member>
        <member name="M:CefPrintHandler.OnPrintSettings(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefPrintSettings&gt;,System.Boolean)">

Synchronize |settings| with client state. If |get_defaults| is true then
populate |settings| with the default print settings. Do not keep a
reference to |settings| outside of this callback.

</member>
        <member name="M:CefPrintHandler.OnPrintStart(scoped_refptr&lt;CefBrowser&gt;)">

Called when printing has started for the specified |browser|. This method
will be called before the other OnPrint*() methods and irrespective of how
printing was initiated (e.g. CefBrowserHost::Print(), JavaScript
window.print() or PDF extension print button).

</member>
        <member name="T:CefPrintHandler">

Implement this interface to handle printing on Linux. Each browser will have
only one print job in progress at a time. The methods of this class will be
called on the browser process UI thread.

</member>
        <member name="M:CefPrintJobCallback.Continue">

Indicate completion of the print job.

</member>
        <member name="T:CefPrintJobCallback">

Callback interface for asynchronous continuation of print job requests.

</member>
        <member name="M:CefPrintDialogCallback.Cancel">

Cancel the printing.

</member>
        <member name="M:CefPrintDialogCallback.Continue(scoped_refptr&lt;CefPrintSettings&gt;)">

Continue printing with the specified |settings|.

</member>
        <member name="T:CefPrintDialogCallback">

Callback interface for asynchronous continuation of print dialog requests.

</member>
        <member name="M:CefPrintSettings.GetDuplexMode">

Get the duplex mode.

</member>
        <member name="M:CefPrintSettings.SetDuplexMode(cef_duplex_mode_t)">

Set the duplex mode.

</member>
        <member name="M:CefPrintSettings.GetCopies">

Get the number of copies.

</member>
        <member name="M:CefPrintSettings.SetCopies(System.Int32)">

Set the number of copies.

</member>
        <member name="M:CefPrintSettings.GetColorModel">

Get the color model.

</member>
        <member name="M:CefPrintSettings.SetColorModel(cef_color_model_t)">

Set the color model.

</member>
        <member name="M:CefPrintSettings.WillCollate">

Returns true if pages will be collated.

</member>
        <member name="M:CefPrintSettings.SetCollate(System.Boolean)">

Set whether pages will be collated.

</member>
        <member name="M:CefPrintSettings.IsSelectionOnly">

Returns true if only the selection will be printed.

</member>
        <member name="M:CefPrintSettings.SetSelectionOnly(System.Boolean)">

Set whether only the selection will be printed.

</member>
        <member name="M:CefPrintSettings.GetPageRanges(std.vector&lt;CefRange,std.allocator&lt;CefRange&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Retrieve the page ranges.

</member>
        <member name="M:CefPrintSettings.GetPageRangesCount">

Returns the number of page ranges that currently exist.

</member>
        <member name="M:CefPrintSettings.SetPageRanges(std.vector&lt;CefRange,std.allocator&lt;CefRange&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the page ranges.

</member>
        <member name="M:CefPrintSettings.GetDPI">

Get the DPI (dots per inch).

</member>
        <member name="M:CefPrintSettings.SetDPI(System.Int32)">

Set the DPI (dots per inch).

</member>
        <member name="M:CefPrintSettings.GetDeviceName">

Get the device name.

</member>
        <member name="M:CefPrintSettings.SetDeviceName(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the device name.

</member>
        <member name="M:CefPrintSettings.SetPrinterPrintableArea(CefSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

Set the printer printable area in device units.
Some platforms already provide flipped area. Set |landscape_needs_flip|
to false on those platforms to avoid double flipping.

</member>
        <member name="M:CefPrintSettings.IsLandscape">

Returns true if the orientation is landscape.

</member>
        <member name="M:CefPrintSettings.SetOrientation(System.Boolean)">

Set the page orientation.

</member>
        <member name="M:CefPrintSettings.IsReadOnly">

Returns true if the values of this object are read-only. Some APIs may
expose read-only objects.

</member>
        <member name="M:CefPrintSettings.IsValid">

Returns true if this object is valid. Do not call any other methods if
this function returns false.

</member>
        <member name="M:CefPrintSettings.Create">

Create a new CefPrintSettings object.

</member>
        <member name="T:CefPrintSettings">

Class representing print settings.

</member>
        <member name="M:CefPermissionHandler.OnDismissPermissionPrompt(scoped_refptr&lt;CefBrowser&gt;,System.UInt64,cef_permission_request_result_t)">

Called when a permission prompt handled via OnShowPermissionPrompt is
dismissed. |prompt_id| will match the value that was passed to
OnShowPermissionPrompt. |result| will be the value passed to
CefPermissionPromptCallback::Continue or CEF_PERMISSION_RESULT_IGNORE if
the dialog was dismissed for other reasons such as navigation, browser
closure, etc. This method will not be called if OnShowPermissionPrompt
returned false for |prompt_id|.

</member>
        <member name="M:CefPermissionHandler.OnShowPermissionPrompt(scoped_refptr&lt;CefBrowser&gt;,System.UInt64,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,scoped_refptr&lt;CefPermissionPromptCallback&gt;)">

Called when a page should show a permission prompt. |prompt_id| uniquely
identifies the prompt. |requesting_origin| is the URL origin requesting
permission. |requested_permissions| is a combination of values from
cef_permission_request_types_t that represent the requested permissions.
Return true and call CefPermissionPromptCallback::Continue either in this
method or at a later time to continue or cancel the request. Return false
to proceed with default handling. With the Chrome runtime, default
handling will display the permission prompt UI. With the Alloy runtime,
default handling is CEF_PERMISSION_RESULT_IGNORE.

</member>
        <member name="M:CefPermissionHandler.OnRequestMediaAccessPermission(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,scoped_refptr&lt;CefMediaAccessCallback&gt;)">

Called when a page requests permission to access media.
|requesting_origin| is the URL origin requesting permission.
|requested_permissions| is a combination of values from
cef_media_access_permission_types_t that represent the requested
permissions. Return true and call CefMediaAccessCallback methods either in
this method or at a later time to continue or cancel the request. Return
false to proceed with default handling. With the Chrome runtime, default
handling will display the permission request UI. With the Alloy runtime,
default handling will deny the request. This method will not be called if
the "--enable-media-stream" command-line switch is used to grant all
permissions.

</member>
        <member name="T:CefPermissionHandler">

Implement this interface to handle events related to permission requests.
The methods of this class will be called on the browser process UI thread.

</member>
        <member name="M:CefPermissionPromptCallback.Continue(cef_permission_request_result_t)">

Complete the permissions request with the specified |result|.

</member>
        <member name="T:CefPermissionPromptCallback">

Callback interface used for asynchronous continuation of permission prompts.

</member>
        <member name="M:CefMediaAccessCallback.Cancel">

Cancel the media access request.

</member>
        <member name="M:CefMediaAccessCallback.Continue(System.UInt32)">

Call to allow or deny media access. If this callback was initiated in
response to a getUserMedia (indicated by
CEF_MEDIA_PERMISSION_DEVICE_AUDIO_CAPTURE and/or
CEF_MEDIA_PERMISSION_DEVICE_VIDEO_CAPTURE being set) then
|allowed_permissions| must match |required_permissions| passed to
OnRequestMediaAccessPermission.

</member>
        <member name="T:CefMediaAccessCallback">

Callback interface used for asynchronous continuation of media access
permission requests.

</member>
        <member name="M:CefLoadHandler.OnLoadError(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,cef_errorcode_t,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called when a navigation fails or is canceled. This method may be called
by itself if before commit or in combination with OnLoadStart/OnLoadEnd if
after commit. |errorCode| is the error code number, |errorText| is the
error text and |failedUrl| is the URL that failed to load.
See net\base\net_error_list.h for complete descriptions of the error
codes.

</member>
        <member name="M:CefLoadHandler.OnLoadEnd(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,System.Int32)">

Called when the browser is done loading a frame. The |frame| value will
never be empty -- call the IsMain() method to check if this frame is the
main frame. Multiple frames may be loading at the same time. Sub-frames
may start or continue loading after the main frame load has ended. This
method will not be called for same page navigations (fragments, history
state, etc.) or for navigations that fail or are canceled before commit.
For notification of overall browser load status use OnLoadingStateChange
instead.

</member>
        <member name="M:CefLoadHandler.OnLoadStart(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,cef_transition_type_t)">

Called after a navigation has been committed and before the browser begins
loading contents in the frame. The |frame| value will never be empty --
call the IsMain() method to check if this frame is the main frame.
|transition_type| provides information about the source of the navigation
and an accurate value is only available in the browser process. Multiple
frames may be loading at the same time. Sub-frames may start or continue
loading after the main frame load has ended. This method will not be
called for same page navigations (fragments, history state, etc.) or for
navigations that fail or are canceled before commit. For notification of
overall browser load status use OnLoadingStateChange instead.

</member>
        <member name="M:CefLoadHandler.OnLoadingStateChange(scoped_refptr&lt;CefBrowser&gt;,System.Boolean,System.Boolean,System.Boolean)">

Called when the loading state has changed. This callback will be executed
twice -- once when loading is initiated either programmatically or by user
action, and once when loading is terminated due to completion,
cancellation of failure. It will be called before any calls to OnLoadStart
and after all calls to OnLoadError and/or OnLoadEnd.

</member>
        <member name="T:CefLoadHandler">

Implement this interface to handle events related to browser load status.
The methods of this class will be called on the browser process UI thread or
render process main thread (TID_RENDERER).

</member>
        <member name="M:CefLifeSpanHandler.OnBeforeClose(scoped_refptr&lt;CefBrowser&gt;)">

Called just before a browser is destroyed. Release all references to the
browser object and do not attempt to execute any methods on the browser
object (other than IsValid, GetIdentifier or IsSame) after this callback
returns. CefFrameHandler callbacks related to final main frame destruction
will arrive after this callback and CefBrowser::IsValid will return false
at that time. Any in-progress network requests associated with |browser|
will be aborted when the browser is destroyed, and
CefResourceRequestHandler callbacks related to those requests may still
arrive on the IO thread after this callback. See CefFrameHandler and
DoClose() documentation for additional usage information.

</member>
        <member name="M:CefLifeSpanHandler.DoClose(scoped_refptr&lt;CefBrowser&gt;)">

Called when a browser has recieved a request to close. This may result
directly from a call to CefBrowserHost::*CloseBrowser() or indirectly if
the browser is parented to a top-level window created by CEF and the user
attempts to close that window (by clicking the 'X', for example). The
DoClose() method will be called after the JavaScript 'onunload' event has
been fired.

An application should handle top-level owner window close notifications by
calling CefBrowserHost::TryCloseBrowser() or
CefBrowserHost::CloseBrowser(false) instead of allowing the window to
close immediately (see the examples below). This gives CEF an opportunity
to process the 'onbeforeunload' event and optionally cancel the close
before DoClose() is called.

When windowed rendering is enabled CEF will internally create a window or
view to host the browser. In that case returning false from DoClose() will
send the standard close notification to the browser's top-level owner
window (e.g. WM_CLOSE on Windows, performClose: on OS X, "delete_event" on
Linux or CefWindowDelegate::CanClose() callback from Views). If the
browser's host window/view has already been destroyed (via view hierarchy
tear-down, for example) then DoClose() will not be called for that browser
since is no longer possible to cancel the close.

When windowed rendering is disabled returning false from DoClose() will
cause the browser object to be destroyed immediately.

If the browser's top-level owner window requires a non-standard close
notification then send that notification from DoClose() and return true.

The CefLifeSpanHandler::OnBeforeClose() method will be called after
DoClose() (if DoClose() is called) and immediately before the browser
object is destroyed. The application should only exit after
OnBeforeClose() has been called for all existing browsers.

The below examples describe what should happen during window close when
the browser is parented to an application-provided top-level window.

Example 1: Using CefBrowserHost::TryCloseBrowser(). This is recommended
for clients using standard close handling and windows created on the
browser process UI thread.
1.  User clicks the window close button which sends a close notification
    to the application's top-level window.
2.  Application's top-level window receives the close notification and
    calls TryCloseBrowser() (which internally calls CloseBrowser(false)).
    TryCloseBrowser() returns false so the client cancels the window
    close.
3.  JavaScript 'onbeforeunload' handler executes and shows the close
    confirmation dialog (which can be overridden via
    CefJSDialogHandler::OnBeforeUnloadDialog()).
4.  User approves the close.
5.  JavaScript 'onunload' handler executes.
6.  CEF sends a close notification to the application's top-level window
    (because DoClose() returned false by default).
7.  Application's top-level window receives the close notification and
    calls TryCloseBrowser(). TryCloseBrowser() returns true so the client
    allows the window close.
8.  Application's top-level window is destroyed.
9.  Application's OnBeforeClose() handler is called and the browser object
    is destroyed.
10. Application exits by calling CefQuitMessageLoop() if no other browsers
    exist.

Example 2: Using CefBrowserHost::CloseBrowser(false) and implementing the
DoClose() callback. This is recommended for clients using non-standard
close handling or windows that were not created on the browser process UI
thread.
1.  User clicks the window close button which sends a close notification
    to the application's top-level window.
2.  Application's top-level window receives the close notification and:
    A. Calls CefBrowserHost::CloseBrowser(false).
    B. Cancels the window close.
3.  JavaScript 'onbeforeunload' handler executes and shows the close
    confirmation dialog (which can be overridden via
    CefJSDialogHandler::OnBeforeUnloadDialog()).
4.  User approves the close.
5.  JavaScript 'onunload' handler executes.
6.  Application's DoClose() handler is called. Application will:
    A. Set a flag to indicate that the next close attempt will be allowed.
    B. Return false.
7.  CEF sends an close notification to the application's top-level window.
8.  Application's top-level window receives the close notification and
    allows the window to close based on the flag from #6B.
9.  Application's top-level window is destroyed.
10. Application's OnBeforeClose() handler is called and the browser object
    is destroyed.
11. Application exits by calling CefQuitMessageLoop() if no other browsers
    exist.

</member>
        <member name="M:CefLifeSpanHandler.OnAfterCreated(scoped_refptr&lt;CefBrowser&gt;)">

Called after a new browser is created. It is now safe to begin performing
actions with |browser|. CefFrameHandler callbacks related to initial main
frame creation will arrive before this callback. See CefFrameHandler
documentation for additional usage information.

</member>
        <member name="M:CefLifeSpanHandler.OnBeforePopup(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cef_window_open_disposition_t,System.Boolean,CefPopupFeatures!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefWindowInfo*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefClient&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStructBase&lt;CefBrowserSettingsTraits&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refp">

Called on the UI thread before a new popup browser is created. The
|browser| and |frame| values represent the source of the popup request.
The |target_url| and |target_frame_name| values indicate where the popup
browser should navigate and may be empty if not specified with the
request. The |target_disposition| value indicates where the user intended
to open the popup (e.g. current tab, new tab, etc). The |user_gesture|
value will be true if the popup was opened via explicit user gesture (e.g.
clicking a link) or false if the popup opened automatically (e.g. via the
DomContentLoaded event). The |popupFeatures| structure contains additional
information about the requested popup window. To allow creation of the
popup browser optionally modify |windowInfo|, |client|, |settings| and
|no_javascript_access| and return false. To cancel creation of the popup
browser return true. The |client| and |settings| values will default to
the source browser's values. If the |no_javascript_access| value is set to
false the new browser will not be scriptable and may not be hosted in the
same renderer process as the source browser. Any modifications to
|windowInfo| will be ignored if the parent browser is wrapped in a
CefBrowserView. Popup browser creation will be canceled if the parent
browser is destroyed before the popup browser creation completes
(indicated by a call to OnAfterCreated for the popup browser). The
|extra_info| parameter provides an opportunity to specify extra
information specific to the created popup browser that will be passed to
CefRenderProcessHandler::OnBrowserCreated() in the render process.

</member>
        <member name="T:CefLifeSpanHandler">

Implement this interface to handle events related to browser life span. The
methods of this class will be called on the UI thread unless otherwise
indicated.

</member>
        <member name="M:CefKeyboardHandler.OnKeyEvent(scoped_refptr&lt;CefBrowser&gt;,CefKeyEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagMSG*)">

Called after the renderer and JavaScript in the page has had a chance to
handle the event. |event| contains information about the keyboard event.
|os_event| is the operating system event message, if any. Return true if
the keyboard event was handled or false otherwise.

</member>
        <member name="M:CefKeyboardHandler.OnPreKeyEvent(scoped_refptr&lt;CefBrowser&gt;,CefKeyEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagMSG*,System.Boolean*)">

Called before a keyboard event is sent to the renderer. |event| contains
information about the keyboard event. |os_event| is the operating system
event message, if any. Return true if the event was handled or false
otherwise. If the event will be handled in OnKeyEvent() as a keyboard
shortcut set |is_keyboard_shortcut| to true and return false.

</member>
        <member name="T:CefKeyboardHandler">

Implement this interface to handle events related to keyboard input. The
methods of this class will be called on the UI thread.

</member>
        <member name="M:CefJSDialogHandler.OnDialogClosed(scoped_refptr&lt;CefBrowser&gt;)">

Called when the dialog is closed.

</member>
        <member name="M:CefJSDialogHandler.OnResetDialogState(scoped_refptr&lt;CefBrowser&gt;)">

Called to cancel any pending dialogs and reset any saved dialog state.
Will be called due to events like page navigation irregardless of whether
any dialogs are currently pending.

</member>
        <member name="M:CefJSDialogHandler.OnBeforeUnloadDialog(scoped_refptr&lt;CefBrowser&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,scoped_refptr&lt;CefJSDialogCallback&gt;)">

Called to run a dialog asking the user if they want to leave a page.
Return false to use the default dialog implementation. Return true if the
application will use a custom dialog or if the callback has been executed
immediately. Custom dialogs may be either modal or modeless. If a custom
dialog is used the application must execute |callback| once the custom
dialog is dismissed.

</member>
        <member name="M:CefJSDialogHandler.OnJSDialog(scoped_refptr&lt;CefBrowser&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cef_jsdialog_type_t,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefJSDialogCallback&gt;,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called to run a JavaScript dialog. If |origin_url| is non-empty it can be
passed to the CefFormatUrlForSecurityDisplay function to retrieve a secure
and user-friendly display string. The |default_prompt_text| value will be
specified for prompt dialogs only. Set |suppress_message| to true and
return false to suppress the message (suppressing messages is preferable
to immediately executing the callback as this is used to detect presumably
malicious behavior like spamming alert messages in onbeforeunload). Set
|suppress_message| to false and return false to use the default
implementation (the default implementation will show one modal dialog at a
time and suppress any additional dialog requests until the displayed
dialog is dismissed). Return true if the application will use a custom
dialog or if the callback has been executed immediately. Custom dialogs
may be either modal or modeless. If a custom dialog is used the
application must execute |callback| once the custom dialog is dismissed.

</member>
        <member name="T:CefJSDialogHandler">

Implement this interface to handle events related to JavaScript dialogs. The
methods of this class will be called on the UI thread.

</member>
        <member name="M:CefJSDialogCallback.Continue(System.Boolean,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Continue the JS dialog request. Set |success| to true if the OK button was
pressed. The |user_input| value should be specified for prompt dialogs.

</member>
        <member name="T:CefJSDialogCallback">

Callback interface used for asynchronous continuation of JavaScript dialog
requests.

</member>
        <member name="M:CefFrameHandler.OnMainFrameChanged(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefFrame&gt;)">

Called when the main frame changes due to (a) initial browser creation,
(b) final browser destruction, (c) cross-origin navigation or (d)
re-navigation after renderer process termination (due to crashes, etc).
|old_frame| will be NULL and |new_frame| will be non-NULL when a main
frame is assigned to |browser| for the first time. |old_frame| will be
non-NULL and |new_frame| will be NULL and  when a main frame is removed
from |browser| for the last time. Both |old_frame| and |new_frame| will be
non-NULL for cross-origin navigations or re-navigation after renderer
process termination. This method will be called after OnFrameCreated() for
|new_frame| and/or after OnFrameDetached() for |old_frame|. If called
after CefLifeSpanHandler::OnBeforeClose() during browser destruction then
CefBrowser::IsValid() will return false for |browser|.

</member>
        <member name="M:CefFrameHandler.OnFrameDetached(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;)">

Called when a frame loses its connection to the renderer process and will
be destroyed. Any pending or future commands will be discarded and
CefFrame::IsValid() will now return false for |frame|. If called after
CefLifeSpanHandler::OnBeforeClose() during browser destruction then
CefBrowser::IsValid() will return false for |browser|.

</member>
        <member name="M:CefFrameHandler.OnFrameAttached(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,System.Boolean)">

Called when a frame can begin routing commands to/from the associated
renderer process. |reattached| will be true if the frame was re-attached
after exiting the BackForwardCache. Any commands that were queued have now
been dispatched.

</member>
        <member name="M:CefFrameHandler.OnFrameCreated(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;)">

Called when a new frame is created. This will be the first notification
that references |frame|. Any commands that require transport to the
associated renderer process (LoadRequest, SendProcessMessage, GetSource,
etc.) will be queued until OnFrameAttached is called for |frame|.

</member>
        <member name="T:CefFrameHandler">

Implement this interface to handle events related to CefFrame life span. The
order of callbacks is:

(1) During initial CefBrowserHost creation and navigation of the main frame:
- CefFrameHandler::OnFrameCreated =&gt; The initial main frame object has been
  created. Any commands will be queued until the frame is attached.
- CefFrameHandler::OnMainFrameChanged =&gt; The initial main frame object has
  been assigned to the browser.
- CefLifeSpanHandler::OnAfterCreated =&gt; The browser is now valid and can be
  used.
- CefFrameHandler::OnFrameAttached =&gt; The initial main frame object is now
  connected to its peer in the renderer process. Commands can be routed.

(2) During further CefBrowserHost navigation/loading of the main frame
    and/or sub-frames:
- CefFrameHandler::OnFrameCreated =&gt; A new main frame or sub-frame object
  has been created. Any commands will be queued until the frame is attached.
- CefFrameHandler::OnFrameAttached =&gt; A new main frame or sub-frame object
  is now connected to its peer in the renderer process. Commands can be
  routed.
- CefFrameHandler::OnFrameDetached =&gt; An existing main frame or sub-frame
  object has lost its connection to the renderer process. If multiple
  objects are detached at the same time then notifications will be sent for
  any sub-frame objects before the main frame object. Commands can no longer
  be routed and will be discarded.
- CefFrameHandler::OnMainFrameChanged =&gt; A new main frame object has been
  assigned to the browser. This will only occur with cross-origin navigation
  or re-navigation after renderer process termination (due to crashes, etc).

(3) During final CefBrowserHost destruction of the main frame:
- CefFrameHandler::OnFrameDetached =&gt; Any sub-frame objects have lost their
  connection to the renderer process. Commands can no longer be routed and
  will be discarded.
- CefLifeSpanHandler::OnBeforeClose =&gt; The browser has been destroyed.
- CefFrameHandler::OnFrameDetached =&gt; The main frame object have lost its
  connection to the renderer process. Notifications will be sent for any
  sub-frame objects before the main frame object. Commands can no longer be
  routed and will be discarded.
- CefFrameHandler::OnMainFrameChanged =&gt; The final main frame object has
  been removed from the browser.

Cross-origin navigation and/or loading receives special handling.

When the main frame navigates to a different origin the OnMainFrameChanged
callback (2) will be executed with the old and new main frame objects.

When a new sub-frame is loaded in, or an existing sub-frame is navigated to,
a different origin from the parent frame, a temporary sub-frame object will
first be created in the parent's renderer process. That temporary sub-frame
will then be discarded after the real cross-origin sub-frame is created in
the new/target renderer process. The client will receive cross-origin
navigation callbacks (2) for the transition from the temporary sub-frame to
the real sub-frame. The temporary sub-frame will not recieve or execute
commands during this transitional period (any sent commands will be
discarded).

When a new popup browser is created in a different origin from the parent
browser, a temporary main frame object for the popup will first be created
in the parent's renderer process. That temporary main frame will then be
discarded after the real cross-origin main frame is created in the
new/target renderer process. The client will recieve creation and initial
navigation callbacks (1) for the temporary main frame, followed by
cross-origin navigation callbacks (2) for the transition from the temporary
main frame to the real main frame. The temporary main frame may receive and
execute commands during this transitional period (any sent commands may be
executed, but the behavior is potentially undesirable since they execute in
the parent browser's renderer process and not the new/target renderer
process).

Callbacks will not be executed for placeholders that may be created during
pre-commit navigation for sub-frames that do not yet exist in the renderer
process. Placeholders will have CefFrame::GetIdentifier() == -4.

The methods of this class will be called on the UI thread unless otherwise
indicated.

</member>
        <member name="M:CefFocusHandler.OnGotFocus(scoped_refptr&lt;CefBrowser&gt;)">

Called when the browser component has received focus.

</member>
        <member name="M:CefFocusHandler.OnSetFocus(scoped_refptr&lt;CefBrowser&gt;,cef_focus_source_t)">

Called when the browser component is requesting focus. |source| indicates
where the focus request is originating from. Return false to allow the
focus to be set or true to cancel setting the focus.

</member>
        <member name="M:CefFocusHandler.OnTakeFocus(scoped_refptr&lt;CefBrowser&gt;,System.Boolean)">

Called when the browser component is about to loose focus. For instance,
if focus was on the last HTML element and the user pressed the TAB key.
|next| will be true if the browser is giving focus to the next component
and false if the browser is giving focus to the previous component.

</member>
        <member name="T:CefFocusHandler">

Implement this interface to handle events related to focus. The methods of
this class will be called on the UI thread.

</member>
        <member name="M:CefFindHandler.OnFindResult(scoped_refptr&lt;CefBrowser&gt;,System.Int32,System.Int32,CefRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean)">

Called to report find results returned by CefBrowserHost::Find().
|identifer| is a unique incremental identifier for the currently active
search, |count| is the number of matches currently identified,
|selectionRect| is the location of where the match was found (in window
coordinates), |activeMatchOrdinal| is the current position in the search
results, and |finalUpdate| is true if this is the last find notification.

</member>
        <member name="T:CefFindHandler">

Implement this interface to handle events related to find results. The
methods of this class will be called on the UI thread.

</member>
        <member name="M:CefDragHandler.OnDraggableRegionsChanged(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,std.vector&lt;CefDraggableRegion,std.allocator&lt;CefDraggableRegion&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called whenever draggable regions for the browser window change. These can
be specified using the '-webkit-app-region: drag/no-drag' CSS-property. If
draggable regions are never defined in a document this method will also
never be called. If the last draggable region is removed from a document
this method will be called with an empty vector.

</member>
        <member name="M:CefDragHandler.OnDragEnter(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefDragData&gt;,cef_drag_operations_mask_t)">

Called when an external drag event enters the browser window. |dragData|
contains the drag event data and |mask| represents the type of drag
operation. Return false for default drag handling behavior or true to
cancel the drag event.

</member>
        <member name="T:CefDragHandler">

Implement this interface to handle events related to dragging. The methods
of this class will be called on the UI thread.

</member>
        <member name="M:CefDownloadHandler.OnDownloadUpdated(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefDownloadItem&gt;,scoped_refptr&lt;CefDownloadItemCallback&gt;)">

Called when a download's status or progress information has been updated.
This may be called multiple times before and after OnBeforeDownload().
Execute |callback| either asynchronously or in this method to cancel the
download if desired. Do not keep a reference to |download_item| outside of
this method.



Called when a download's status or progress information has been updated.
This may be called multiple times before and after OnBeforeDownload().
Execute |callback| either asynchronously or in this method to cancel the
download if desired. Do not keep a reference to |download_item| outside of
this method.

</member>
        <member name="M:CefDownloadHandler.OnBeforeDownload(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefDownloadItem&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefBeforeDownloadCallback&gt;)">

Called before a download begins. |suggested_name| is the suggested name
for the download file. By default the download will be canceled. Execute
|callback| either asynchronously or in this method to continue the
download if desired. Do not keep a reference to |download_item| outside of
this method.



Called before a download begins. |suggested_name| is the suggested name
for the download file. By default the download will be canceled. Execute
|callback| either asynchronously or in this method to continue the
download if desired. Do not keep a reference to |download_item| outside of
this method.

</member>
        <member name="M:CefDownloadHandler.CanDownload(scoped_refptr&lt;CefBrowser&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called before a download begins in response to a user-initiated action
(e.g. alt + link click or link click that returns a `Content-Disposition:
attachment` response from the server). |url| is the target download URL
and |request_method| is the target method (GET, POST, etc). Return true to
proceed with the download or false to cancel the download.



Called before a download begins in response to a user-initiated action
(e.g. alt + link click or link click that returns a `Content-Disposition:
attachment` response from the server). |url| is the target download URL
and |request_method| is the target method (GET, POST, etc). Return true to
proceed with the download or false to cancel the download.

</member>
        <member name="T:CefDownloadHandler">

Class used to handle file downloads. The methods of this class will called
on the browser process UI thread.



Class used to handle file downloads. The methods of this class will called
on the browser process UI thread.

</member>
        <member name="M:CefDownloadItemCallback.Resume">

Call to resume the download.



Call to resume the download.

</member>
        <member name="M:CefDownloadItemCallback.Pause">

Call to pause the download.



Call to pause the download.

</member>
        <member name="M:CefDownloadItemCallback.Cancel">

Call to cancel the download.



Call to cancel the download.

</member>
        <member name="T:CefDownloadItemCallback">

Callback interface used to asynchronously cancel a download.



Callback interface used to asynchronously cancel a download.

</member>
        <member name="M:CefBeforeDownloadCallback.Continue(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

Call to continue the download. Set |download_path| to the full file path
for the download including the file name or leave blank to use the
suggested name and the default temp directory. Set |show_dialog| to true
if you do wish to show the default "Save As" dialog.



Call to continue the download. Set |download_path| to the full file path
for the download including the file name or leave blank to use the
suggested name and the default temp directory. Set |show_dialog| to true
if you do wish to show the default "Save As" dialog.

</member>
        <member name="T:CefBeforeDownloadCallback">

Callback interface used to asynchronously continue a download.



Callback interface used to asynchronously continue a download.

</member>
        <member name="M:CefDisplayHandler.OnMediaAccessChange(scoped_refptr&lt;CefBrowser&gt;,System.Boolean,System.Boolean)">

Called when the browser's access to an audio and/or video source has
changed.

</member>
        <member name="M:CefDisplayHandler.OnCursorChange(scoped_refptr&lt;CefBrowser&gt;,HICON__*,cef_cursor_type_t,CefCursorInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called when the browser's cursor has changed. If |type| is CT_CUSTOM then
|custom_cursor_info| will be populated with the custom cursor information.
Return true if the cursor change was handled or false for default
handling.

</member>
        <member name="M:CefDisplayHandler.OnLoadingProgressChange(scoped_refptr&lt;CefBrowser&gt;,System.Double)">

Called when the overall page loading progress has changed. |progress|
ranges from 0.0 to 1.0.

</member>
        <member name="M:CefDisplayHandler.OnAutoResize(scoped_refptr&lt;CefBrowser&gt;,CefSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called when auto-resize is enabled via
CefBrowserHost::SetAutoResizeEnabled and the contents have auto-resized.
|new_size| will be the desired size in view coordinates. Return true if
the resize was handled or false for default handling.

</member>
        <member name="M:CefDisplayHandler.OnConsoleMessage(scoped_refptr&lt;CefBrowser&gt;,cef_log_severity_t,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">

Called to display a console message. Return true to stop the message from
being output to the console.

</member>
        <member name="M:CefDisplayHandler.OnStatusMessage(scoped_refptr&lt;CefBrowser&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called when the browser receives a status message. |value| contains the
text that will be displayed in the status message.

</member>
        <member name="M:CefDisplayHandler.OnTooltip(scoped_refptr&lt;CefBrowser&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called when the browser is about to display a tooltip. |text| contains the
text that will be displayed in the tooltip. To handle the display of the
tooltip yourself return true. Otherwise, you can optionally modify |text|
and then return false to allow the browser to display the tooltip.
When window rendering is disabled the application is responsible for
drawing tooltips and the return value is ignored.

</member>
        <member name="M:CefDisplayHandler.OnFullscreenModeChange(scoped_refptr&lt;CefBrowser&gt;,System.Boolean)">

Called when web content in the page has toggled fullscreen mode. If
|fullscreen| is true the content will automatically be sized to fill the
browser content area. If |fullscreen| is false the content will
automatically return to its original size and position. The client is
responsible for resizing the browser if desired.

</member>
        <member name="M:CefDisplayHandler.OnFaviconURLChange(scoped_refptr&lt;CefBrowser&gt;,std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called when the page icon changes.

</member>
        <member name="M:CefDisplayHandler.OnTitleChange(scoped_refptr&lt;CefBrowser&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called when the page title changes.

</member>
        <member name="M:CefDisplayHandler.OnAddressChange(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called when a frame's address has changed.

</member>
        <member name="T:CefDisplayHandler">

Implement this interface to handle events related to browser display state.
The methods of this class will be called on the UI thread.

</member>
        <member name="M:CefDialogHandler.OnFileDialog(scoped_refptr&lt;CefBrowser&gt;,cef_file_dialog_mode_t,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefFileDialogCallback&gt;)">

Called to run a file chooser dialog. |mode| represents the type of dialog
to display. |title| to the title to be used for the dialog and may be
empty to show the default title ("Open" or "Save" depending on the mode).
|default_file_path| is the path with optional directory and/or file name
component that should be initially selected in the dialog.
|accept_filters| are used to restrict the selectable file types and may
any combination of (a) valid lower-cased MIME types (e.g. "text/*" or
"image/*"), (b) individual file extensions (e.g. ".txt" or ".png"), or (c)
combined description and file extension delimited using "|" and ";" (e.g.
"Image Types|.png;.gif;.jpg"). To display a custom dialog return true and
execute |callback| either inline or at a later time. To display the
default dialog return false.

</member>
        <member name="T:CefDialogHandler">

Implement this interface to handle dialog events. The methods of this class
will be called on the browser process UI thread.

</member>
        <member name="M:CefFileDialogCallback.Cancel">

Cancel the file selection.

</member>
        <member name="M:CefFileDialogCallback.Continue(std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Continue the file selection. |file_paths| should be a single value or a
list of values depending on the dialog mode. An empty |file_paths| value
is treated the same as calling Cancel().

</member>
        <member name="T:CefFileDialogCallback">

Callback interface for asynchronous continuation of file dialog requests.

</member>
        <member name="M:CefContextMenuParams.IsCustomMenu">

Returns true if the context menu contains items specified by the renderer
process.



Returns true if the context menu contains items specified by the renderer
process.

</member>
        <member name="M:CefContextMenuParams.GetEditStateFlags">

Returns flags representing the actions supported by the editable node, if
any, that the context menu was invoked on.



Returns flags representing the actions supported by the editable node, if
any, that the context menu was invoked on.

</member>
        <member name="M:CefContextMenuParams.IsSpellCheckEnabled">

Returns true if the context menu was invoked on an editable node where
spell-check is enabled.



Returns true if the context menu was invoked on an editable node where
spell-check is enabled.

</member>
        <member name="M:CefContextMenuParams.IsEditable">

Returns true if the context menu was invoked on an editable node.



Returns true if the context menu was invoked on an editable node.

</member>
        <member name="M:CefContextMenuParams.GetDictionarySuggestions(std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns true if suggestions exist, false otherwise. Fills in |suggestions|
from the spell check service for the misspelled word if there is one.



Returns true if suggestions exist, false otherwise. Fills in |suggestions|
from the spell check service for the misspelled word if there is one.

</member>
        <member name="M:CefContextMenuParams.GetMisspelledWord">

Returns the text of the misspelled word, if any, that the context menu was
invoked on.



Returns the text of the misspelled word, if any, that the context menu was
invoked on.

</member>
        <member name="M:CefContextMenuParams.GetSelectionText">

Returns the text of the selection, if any, that the context menu was
invoked on.



Returns the text of the selection, if any, that the context menu was
invoked on.

</member>
        <member name="M:CefContextMenuParams.GetMediaStateFlags">

Returns flags representing the actions supported by the media element, if
any, that the context menu was invoked on.



Returns flags representing the actions supported by the media element, if
any, that the context menu was invoked on.

</member>
        <member name="M:CefContextMenuParams.GetMediaType">

Returns the type of context node that the context menu was invoked on.



Returns the type of context node that the context menu was invoked on.

</member>
        <member name="M:CefContextMenuParams.GetFrameCharset">

Returns the character encoding of the subframe that the context menu was
invoked on.



Returns the character encoding of the subframe that the context menu was
invoked on.

</member>
        <member name="M:CefContextMenuParams.GetFrameUrl">

Returns the URL of the subframe that the context menu was invoked on.



Returns the URL of the subframe that the context menu was invoked on.

</member>
        <member name="M:CefContextMenuParams.GetPageUrl">

Returns the URL of the top level page that the context menu was invoked
on.



Returns the URL of the top level page that the context menu was invoked
on.

</member>
        <member name="M:CefContextMenuParams.GetTitleText">

Returns the title text or the alt text if the context menu was invoked on
an image.



Returns the title text or the alt text if the context menu was invoked on
an image.

</member>
        <member name="M:CefContextMenuParams.HasImageContents">

Returns true if the context menu was invoked on an image which has
non-empty contents.



Returns true if the context menu was invoked on an image which has
non-empty contents.

</member>
        <member name="M:CefContextMenuParams.GetSourceUrl">

Returns the source URL, if any, for the element that the context menu was
invoked on. Example of elements with source URLs are img, audio, and
video.



Returns the source URL, if any, for the element that the context menu was
invoked on. Example of elements with source URLs are img, audio, and
video.

</member>
        <member name="M:CefContextMenuParams.GetUnfilteredLinkUrl">

Returns the link URL, if any, to be used ONLY for "copy link address". We
don't validate this field in the frontend process.



Returns the link URL, if any, to be used ONLY for "copy link address". We
don't validate this field in the frontend process.

</member>
        <member name="M:CefContextMenuParams.GetLinkUrl">

Returns the URL of the link, if any, that encloses the node that the
context menu was invoked on.



Returns the URL of the link, if any, that encloses the node that the
context menu was invoked on.

</member>
        <member name="M:CefContextMenuParams.GetTypeFlags">

Returns flags representing the type of node that the context menu was
invoked on.



Returns flags representing the type of node that the context menu was
invoked on.

</member>
        <member name="M:CefContextMenuParams.GetYCoord">

Returns the Y coordinate of the mouse where the context menu was invoked.
Coords are relative to the associated RenderView's origin.



Returns the Y coordinate of the mouse where the context menu was invoked.
Coords are relative to the associated RenderView's origin.

</member>
        <member name="M:CefContextMenuParams.GetXCoord">

Returns the X coordinate of the mouse where the context menu was invoked.
Coords are relative to the associated RenderView's origin.



Returns the X coordinate of the mouse where the context menu was invoked.
Coords are relative to the associated RenderView's origin.

</member>
        <member name="T:CefContextMenuParams">

Provides information about the context menu state. The methods of this class
can only be accessed on browser process the UI thread.



Provides information about the context menu state. The methods of this class
can only be accessed on browser process the UI thread.

</member>
        <member name="M:CefContextMenuHandler.OnQuickMenuDismissed(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;)">

Called when the quick menu for a windowless browser is dismissed
irregardless of whether the menu was canceled or a command was selected.



Called when the quick menu for a windowless browser is dismissed
irregardless of whether the menu was canceled or a command was selected.

</member>
        <member name="M:CefContextMenuHandler.OnQuickMenuCommand(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,System.Int32,cef_event_flags_t)">

Called to execute a command selected from the quick menu for a windowless
browser. Return true if the command was handled or false for the default
implementation. See cef_menu_id_t for command IDs that have default
implementations.



Called to execute a command selected from the quick menu for a windowless
browser. Return true if the command was handled or false for the default
implementation. See cef_menu_id_t for command IDs that have default
implementations.

</member>
        <member name="M:CefContextMenuHandler.RunQuickMenu(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,CefPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cef_quick_menu_edit_state_flags_t,scoped_refptr&lt;CefRunQuickMenuCallback&gt;)">

Called to allow custom display of the quick menu for a windowless browser.
|location| is the top left corner of the selected region. |size| is the
size of the selected region. |edit_state_flags| is a combination of flags
that represent the state of the quick menu. Return true if the menu will
be handled and execute |callback| either synchronously or asynchronously
with the selected command ID. Return false to cancel the menu.



Called to allow custom display of the quick menu for a windowless browser.
|location| is the top left corner of the selected region. |size| is the
size of the selected region. |edit_state_flags| is a combination of flags
that represent the state of the quick menu. Return true if the menu will
be handled and execute |callback| either synchronously or asynchronously
with the selected command ID. Return false to cancel the menu.

</member>
        <member name="M:CefContextMenuHandler.OnContextMenuDismissed(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;)">

Called when the context menu is dismissed irregardless of whether the menu
was canceled or a command was selected.



Called when the context menu is dismissed irregardless of whether the menu
was canceled or a command was selected.

</member>
        <member name="M:CefContextMenuHandler.OnContextMenuCommand(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefContextMenuParams&gt;,System.Int32,cef_event_flags_t)">

Called to execute a command selected from the context menu. Return true if
the command was handled or false for the default implementation. See
cef_menu_id_t for the command ids that have default implementations. All
user-defined command ids should be between MENU_ID_USER_FIRST and
MENU_ID_USER_LAST. |params| will have the same values as what was passed
to OnBeforeContextMenu(). Do not keep a reference to |params| outside of
this callback.



Called to execute a command selected from the context menu. Return true if
the command was handled or false for the default implementation. See
cef_menu_id_t for the command ids that have default implementations. All
user-defined command ids should be between MENU_ID_USER_FIRST and
MENU_ID_USER_LAST. |params| will have the same values as what was passed
to OnBeforeContextMenu(). Do not keep a reference to |params| outside of
this callback.

</member>
        <member name="M:CefContextMenuHandler.RunContextMenu(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefContextMenuParams&gt;,scoped_refptr&lt;CefMenuModel&gt;,scoped_refptr&lt;CefRunContextMenuCallback&gt;)">

Called to allow custom display of the context menu. |params| provides
information about the context menu state. |model| contains the context
menu model resulting from OnBeforeContextMenu. For custom display return
true and execute |callback| either synchronously or asynchronously with
the selected command ID. For default display return false. Do not keep
references to |params| or |model| outside of this callback.



Called to allow custom display of the context menu. |params| provides
information about the context menu state. |model| contains the context
menu model resulting from OnBeforeContextMenu. For custom display return
true and execute |callback| either synchronously or asynchronously with
the selected command ID. For default display return false. Do not keep
references to |params| or |model| outside of this callback.

</member>
        <member name="M:CefContextMenuHandler.OnBeforeContextMenu(scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefFrame&gt;,scoped_refptr&lt;CefContextMenuParams&gt;,scoped_refptr&lt;CefMenuModel&gt;)">

Called before a context menu is displayed. |params| provides information
about the context menu state. |model| initially contains the default
context menu. The |model| can be cleared to show no context menu or
modified to show a custom menu. Do not keep references to |params| or
|model| outside of this callback.



Called before a context menu is displayed. |params| provides information
about the context menu state. |model| initially contains the default
context menu. The |model| can be cleared to show no context menu or
modified to show a custom menu. Do not keep references to |params| or
|model| outside of this callback.

</member>
        <member name="T:CefContextMenuHandler">

Implement this interface to handle context menu events. The methods of this
class will be called on the UI thread.



Implement this interface to handle context menu events. The methods of this
class will be called on the UI thread.

</member>
        <member name="M:CefRunQuickMenuCallback.Cancel">

Cancel quick menu display.



Cancel quick menu display.

</member>
        <member name="M:CefRunQuickMenuCallback.Continue(System.Int32,cef_event_flags_t)">

Complete quick menu display by selecting the specified |command_id| and
|event_flags|.



Complete quick menu display by selecting the specified |command_id| and
|event_flags|.

</member>
        <member name="T:CefRunQuickMenuCallback">

Callback interface used for continuation of custom quick menu display.



Callback interface used for continuation of custom quick menu display.

</member>
        <member name="M:CefRunContextMenuCallback.Cancel">

Cancel context menu display.



Cancel context menu display.

</member>
        <member name="M:CefRunContextMenuCallback.Continue(System.Int32,cef_event_flags_t)">

Complete context menu display by selecting the specified |command_id| and
|event_flags|.



Complete context menu display by selecting the specified |command_id| and
|event_flags|.

</member>
        <member name="T:CefRunContextMenuCallback">

Callback interface used for continuation of custom context menu display.



Callback interface used for continuation of custom context menu display.

</member>
        <member name="M:CefMenuModel.GetColorAt(System.Int32,cef_menu_color_type_t,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns in |color| the color that was explicitly set for |command_id| and
|color_type|. Specify an |index| value of -1 to return the default color
in |color|. If a color was not set then 0 will be returned in |color|.
Returns true on success.

</member>
        <member name="M:CefMenuModel.GetColor(System.Int32,cef_menu_color_type_t,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns in |color| the color that was explicitly set for |command_id| and
|color_type|. If a color was not set then 0 will be returned in |color|.
Returns true on success.

</member>
        <member name="M:CefMenuModel.SetColorAt(System.Int32,cef_menu_color_type_t,System.UInt32)">

Set the explicit color for |command_id| and |index| to |color|. Specify a
|color| value of 0 to remove the explicit color. Specify an |index| value
of -1 to set the default color for items that do not have an explicit
color set. If no explicit color or default color is set for |color_type|
then the system color will be used. Returns true on success.

</member>
        <member name="M:CefMenuModel.SetColor(System.Int32,cef_menu_color_type_t,System.UInt32)">

Set the explicit color for |command_id| and |color_type| to |color|.
Specify a |color| value of 0 to remove the explicit color. If no explicit
color or default color is set for |color_type| then the system color will
be used. Returns true on success.

</member>
        <member name="M:CefMenuModel.GetAcceleratorAt(System.UInt32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Retrieves the keyboard accelerator for the specified |index|. Returns true
on success.

</member>
        <member name="M:CefMenuModel.GetAccelerator(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Retrieves the keyboard accelerator for the specified |command_id|. Returns
true on success.

</member>
        <member name="M:CefMenuModel.RemoveAcceleratorAt(System.UInt32)">

Remove the keyboard accelerator at the specified |index|. Returns true on
success.

</member>
        <member name="M:CefMenuModel.RemoveAccelerator(System.Int32)">

Remove the keyboard accelerator for the specified |command_id|. Returns
true on success.

</member>
        <member name="M:CefMenuModel.SetAcceleratorAt(System.UInt32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">

Set the keyboard accelerator at the specified |index|. |key_code| can be
any virtual key or character value. Returns true on success.

</member>
        <member name="M:CefMenuModel.SetAccelerator(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">

Set the keyboard accelerator for the specified |command_id|. |key_code|
can be any virtual key or character value. Returns true on success.

</member>
        <member name="M:CefMenuModel.HasAcceleratorAt(System.UInt32)">

Returns true if the specified |index| has a keyboard accelerator assigned.

</member>
        <member name="M:CefMenuModel.HasAccelerator(System.Int32)">

Returns true if the specified |command_id| has a keyboard accelerator
assigned.

</member>
        <member name="M:CefMenuModel.SetCheckedAt(System.UInt32,System.Boolean)">

Check the specified |index|. Only applies to check and radio items.
Returns true on success.

</member>
        <member name="M:CefMenuModel.SetChecked(System.Int32,System.Boolean)">

Check the specified |command_id|. Only applies to check and radio items.
Returns true on success.

</member>
        <member name="M:CefMenuModel.IsCheckedAt(System.UInt32)">

Returns true if the specified |index| is checked. Only applies to check
and radio items.

</member>
        <member name="M:CefMenuModel.IsChecked(System.Int32)">

Returns true if the specified |command_id| is checked. Only applies to
check and radio items.

</member>
        <member name="M:CefMenuModel.SetEnabledAt(System.UInt32,System.Boolean)">

Change the enabled status at the specified |index|. Returns true on
success.

</member>
        <member name="M:CefMenuModel.SetEnabled(System.Int32,System.Boolean)">

Change the enabled status of the specified |command_id|. Returns true on
success.

</member>
        <member name="M:CefMenuModel.IsEnabledAt(System.UInt32)">

Returns true if the specified |index| is enabled.

</member>
        <member name="M:CefMenuModel.IsEnabled(System.Int32)">

Returns true if the specified |command_id| is enabled.

</member>
        <member name="M:CefMenuModel.SetVisibleAt(System.UInt32,System.Boolean)">

Change the visibility at the specified |index|. Returns true on success.

</member>
        <member name="M:CefMenuModel.SetVisible(System.Int32,System.Boolean)">

Change the visibility of the specified |command_id|. Returns true on
success.

</member>
        <member name="M:CefMenuModel.IsVisibleAt(System.UInt32)">

Returns true if the specified |index| is visible.

</member>
        <member name="M:CefMenuModel.IsVisible(System.Int32)">

Returns true if the specified |command_id| is visible.

</member>
        <member name="M:CefMenuModel.GetSubMenuAt(System.UInt32)">

Returns the submenu at the specified |index| or empty if invalid.

</member>
        <member name="M:CefMenuModel.GetSubMenu(System.Int32)">

Returns the submenu for the specified |command_id| or empty if invalid.

</member>
        <member name="M:CefMenuModel.SetGroupIdAt(System.UInt32,System.Int32)">

Sets the group id at the specified |index|. Returns true on success.

</member>
        <member name="M:CefMenuModel.SetGroupId(System.Int32,System.Int32)">

Sets the group id for the specified |command_id|. Returns true on success.

</member>
        <member name="M:CefMenuModel.GetGroupIdAt(System.UInt32)">

Returns the group id at the specified |index| or -1 if invalid.

</member>
        <member name="M:CefMenuModel.GetGroupId(System.Int32)">

Returns the group id for the specified |command_id| or -1 if invalid.

</member>
        <member name="M:CefMenuModel.GetTypeAt(System.UInt32)">

Returns the item type at the specified |index|.

</member>
        <member name="M:CefMenuModel.GetType(System.Int32)">

Returns the item type for the specified |command_id|.

</member>
        <member name="M:CefMenuModel.SetLabelAt(System.UInt32,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the label at the specified |index|. Returns true on success.

</member>
        <member name="M:CefMenuModel.SetLabel(System.Int32,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Sets the label for the specified |command_id|. Returns true on success.

</member>
        <member name="M:CefMenuModel.GetLabelAt(System.UInt32)">

Returns the label at the specified |index| or empty if not found due to
invalid range or the index being a separator.

</member>
        <member name="M:CefMenuModel.GetLabel(System.Int32)">

Returns the label for the specified |command_id| or empty if not found.

</member>
        <member name="M:CefMenuModel.SetCommandIdAt(System.UInt32,System.Int32)">

Sets the command id at the specified |index|. Returns true on success.

</member>
        <member name="M:CefMenuModel.GetCommandIdAt(System.UInt32)">

Returns the command id at the specified |index| or -1 if not found due to
invalid range or the index being a separator.

</member>
        <member name="M:CefMenuModel.GetIndexOf(System.Int32)">

Returns the index associated with the specified |command_id| or -1 if not
found due to the command id not existing in the menu.

</member>
        <member name="M:CefMenuModel.RemoveAt(System.UInt32)">

Removes the item at the specified |index|. Returns true on success.

</member>
        <member name="M:CefMenuModel.Remove(System.Int32)">

Removes the item with the specified |command_id|. Returns true on success.

</member>
        <member name="M:CefMenuModel.InsertSubMenuAt(System.UInt32,System.Int32,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Insert a sub-menu in the menu at the specified |index|. The new sub-menu
is returned.

</member>
        <member name="M:CefMenuModel.InsertRadioItemAt(System.UInt32,System.Int32,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">

Insert a radio item in the menu at the specified |index|. Only a single
item with the specified |group_id| can be checked at a time. Returns true
on success.

</member>
        <member name="M:CefMenuModel.InsertCheckItemAt(System.UInt32,System.Int32,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Insert a check item in the menu at the specified |index|. Returns true on
success.

</member>
        <member name="M:CefMenuModel.InsertItemAt(System.UInt32,System.Int32,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Insert an item in the menu at the specified |index|. Returns true on
success.

</member>
        <member name="M:CefMenuModel.InsertSeparatorAt(System.UInt32)">

Insert a separator in the menu at the specified |index|. Returns true on
success.

</member>
        <member name="M:CefMenuModel.AddSubMenu(System.Int32,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Add a sub-menu to the menu. The new sub-menu is returned.

</member>
        <member name="M:CefMenuModel.AddRadioItem(System.Int32,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">

Add a radio item to the menu. Only a single item with the specified
|group_id| can be checked at a time. Returns true on success.

</member>
        <member name="M:CefMenuModel.AddCheckItem(System.Int32,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Add a check item to the menu. Returns true on success.

</member>
        <member name="M:CefMenuModel.AddItem(System.Int32,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Add an item to the menu. Returns true on success.

</member>
        <member name="M:CefMenuModel.AddSeparator">

Add a separator to the menu. Returns true on success.

</member>
        <member name="M:CefMenuModel.GetCount">

Returns the number of items in this menu.

</member>
        <member name="M:CefMenuModel.Clear">

Clears the menu. Returns true on success.

</member>
        <member name="M:CefMenuModel.IsSubMenu">

Returns true if this menu is a submenu.

</member>
        <member name="M:CefMenuModel.CreateMenuModel(scoped_refptr&lt;CefMenuModelDelegate&gt;)">

Create a new MenuModel with the specified |delegate|.

</member>
        <member name="T:CefMenuModel">

Supports creation and modification of menus. See cef_menu_id_t for the
command ids that have default implementations. All user-defined command ids
should be between MENU_ID_USER_FIRST and MENU_ID_USER_LAST. The methods of
this class can only be accessed on the browser process the UI thread.

</member>
        <member name="M:CefMenuModelDelegate.FormatLabel(scoped_refptr&lt;CefMenuModel&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Optionally modify a menu item label. Return true if |label| was modified.

</member>
        <member name="M:CefMenuModelDelegate.MenuClosed(scoped_refptr&lt;CefMenuModel&gt;)">

The menu has closed.

</member>
        <member name="M:CefMenuModelDelegate.MenuWillShow(scoped_refptr&lt;CefMenuModel&gt;)">

The menu is about to show.

</member>
        <member name="M:CefMenuModelDelegate.UnhandledCloseSubmenu(scoped_refptr&lt;CefMenuModel&gt;,System.Boolean)">

Called on unhandled close submenu keyboard commands. |is_rtl| will be true
if the menu is displaying a right-to-left language.

</member>
        <member name="M:CefMenuModelDelegate.UnhandledOpenSubmenu(scoped_refptr&lt;CefMenuModel&gt;,System.Boolean)">

Called on unhandled open submenu keyboard commands. |is_rtl| will be true
if the menu is displaying a right-to-left language.

</member>
        <member name="M:CefMenuModelDelegate.MouseOutsideMenu(scoped_refptr&lt;CefMenuModel&gt;,CefPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called when the user moves the mouse outside the menu and over the owning
window.

</member>
        <member name="M:CefMenuModelDelegate.ExecuteCommand(scoped_refptr&lt;CefMenuModel&gt;,System.Int32,cef_event_flags_t)">

Perform the action associated with the specified |command_id| and
optional |event_flags|.

</member>
        <member name="T:CefMenuModelDelegate">

Implement this interface to handle menu model events. The methods of this
class will be called on the browser process UI thread unless otherwise
indicated.

</member>
        <member name="M:CefCommandHandler.OnChromeCommand(scoped_refptr&lt;CefBrowser&gt;,System.Int32,cef_window_open_disposition_t)">

Called to execute a Chrome command triggered via menu selection or
keyboard shortcut. Values for |command_id| can be found in the
cef_command_ids.h file. |disposition| provides information about the
intended command target. Return true if the command was handled or false
for the default implementation. For context menu commands this will be
called after CefContextMenuHandler::OnContextMenuCommand. Only used with
the Chrome runtime.

</member>
        <member name="T:CefCommandHandler">

Implement this interface to handle events related to commands. The methods
of this class will be called on the UI thread.

</member>
        <member name="M:CefAudioHandler.OnAudioStreamError(scoped_refptr&lt;CefBrowser&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called on the UI or audio stream thread when an error occurred. During the
stream creation phase this callback will be called on the UI thread while
in the capturing phase it will be called on the audio stream thread. The
stream will be stopped immediately.

</member>
        <member name="M:CefAudioHandler.OnAudioStreamStopped(scoped_refptr&lt;CefBrowser&gt;)">

Called on the UI thread when the stream has stopped. OnAudioSteamStopped
will always be called after OnAudioStreamStarted; both methods may be
called multiple times for the same stream.

</member>
        <member name="M:CefAudioHandler.OnAudioStreamPacket(scoped_refptr&lt;CefBrowser&gt;,System.Single!System.Runtime.CompilerServices.IsConst**,System.Int32,System.Int64)">

Called on the audio stream thread when a PCM packet is received for the
stream. |data| is an array representing the raw PCM data as a floating
point type, i.e. 4-byte value(s). |frames| is the number of frames in the
PCM packet. |pts| is the presentation timestamp (in milliseconds since the
Unix Epoch) and represents the time at which the decompressed packet
should be presented to the user. Based on |frames| and the
|channel_layout| value passed to OnAudioStreamStarted you can calculate
the size of the |data| array in bytes.

</member>
        <member name="M:CefAudioHandler.OnAudioStreamStarted(scoped_refptr&lt;CefBrowser&gt;,CefAudioParameters!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">

Called on a browser audio capture thread when the browser starts
streaming audio. OnAudioStreamStopped will always be called after
OnAudioStreamStarted; both methods may be called multiple times
for the same browser. |params| contains the audio parameters like
sample rate and channel layout. |channels| is the number of channels.

</member>
        <member name="M:CefAudioHandler.GetAudioParameters(scoped_refptr&lt;CefBrowser&gt;,CefAudioParameters*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called on the UI thread to allow configuration of audio stream parameters.
Return true to proceed with audio stream capture, or false to cancel it.
All members of |params| can optionally be configured here, but they are
also pre-filled with some sensible defaults.

</member>
        <member name="T:CefAudioHandler">

Implement this interface to handle audio events.

</member>
        <member name="M:CefSharp.Internals.StringUtils.CreateExceptionString(scoped_refptr&lt;CefV8Exception&gt;)">
            <summary>
Creates a detailed expection string from a provided Cef V8 exception.
</summary>
            <param name="exception">The exception which will be used as base for the message</param>
        </member>
        <member name="M:CefSharp.Internals.StringUtils.AssignNativeFromClr(_cef_string_utf16_t*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String)">
            <summary>
Assigns the provided cef_string_t object from the given .NET string.
</summary>
            <param name="cefStr">The cef_string_t that should be updated.</param>
            <param name="str">The .NET string whose value should be used to update cefStr.</param>
        </member>
        <member name="M:CefSharp.Internals.StringUtils.ToNative(System.Collections.Generic.IEnumerable`1{System.String})">
            <summary>
Converts a .NET List of strings to native (unmanaged) format.
</summary>
            <param name="str">The List of strings that should be converted.</param>
            <returns>An unmanaged representation of the provided List of strings, or an empty List if the input is a nullptr.</returns>
        </member>
        <member name="M:CefSharp.Internals.StringUtils.ToNative(System.String)">
            <summary>
Converts a .NET string to native (unmanaged) format. Note that this method does not allocate a new copy of the
</summary>
            <param name="str">The string that should be converted.</param>
            <returns>An unmanaged representation of the provided string, or an empty string if the input string is a nullptr.</returns>
        </member>
        <member name="M:CefSharp.Internals.StringUtils.ToClr(std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Converts an unmanaged vector of strings to a (managed) .NET List of strings.
</summary>
            <param name="cefStr">The vector of strings that should be converted.</param>
            <returns>A .NET List of strings.</returns>
        </member>
        <member name="M:CefSharp.Internals.StringUtils.ToClr(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Converts an unmanaged string to a (managed) .NET string.
</summary>
            <param name="cefStr">The string that should be converted.</param>
            <returns>A .NET string.</returns>
        </member>
        <member name="M:CefSharp.Internals.StringUtils.ToClr(_cef_string_utf16_t!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Converts an unmanaged string to a (managed) .NET string.
</summary>
            <param name="cefStr">The string that should be converted.</param>
            <returns>A .NET string.</returns>
        </member>
        <member name="M:CefV8StackFrame.IsConstructor">

Returns true if the function was called as a constructor via "new".

</member>
        <member name="M:CefV8StackFrame.IsEval">

Returns true if the function was compiled using eval().

</member>
        <member name="M:CefV8StackFrame.GetColumn">

Returns the 1-based column offset on the line for the function call or 0
if unknown.

</member>
        <member name="M:CefV8StackFrame.GetLineNumber">

Returns the 1-based line number for the function call or 0 if unknown.

</member>
        <member name="M:CefV8StackFrame.GetFunctionName">

Returns the name of the function.

</member>
        <member name="M:CefV8StackFrame.GetScriptNameOrSourceURL">

Returns the name of the resource script that contains the function or the
sourceURL value if the script name is undefined and its source ends with
a "//@ sourceURL=..." string.

</member>
        <member name="M:CefV8StackFrame.GetScriptName">

Returns the name of the resource script that contains the function.

</member>
        <member name="M:CefV8StackFrame.IsValid">

Returns true if the underlying handle is valid and it can be accessed on
the current thread. Do not call any other methods if this method returns
false.

</member>
        <member name="T:CefV8StackFrame">

Class representing a V8 stack frame handle. V8 handles can only be accessed
from the thread on which they are created. Valid threads for creating a V8
handle include the render process main thread (TID_RENDERER) and WebWorker
threads. A task runner for posting tasks on the associated thread can be
retrieved via the CefV8Context::GetTaskRunner() method.

</member>
        <member name="M:CefV8StackTrace.GetFrame(System.Int32)">

Returns the stack frame at the specified 0-based index.

</member>
        <member name="M:CefV8StackTrace.GetFrameCount">

Returns the number of stack frames.

</member>
        <member name="M:CefV8StackTrace.IsValid">

Returns true if the underlying handle is valid and it can be accessed on
the current thread. Do not call any other methods if this method returns
false.

</member>
        <member name="M:CefV8StackTrace.GetCurrent(System.Int32)">

Returns the stack trace for the currently active context. |frame_limit| is
the maximum number of frames that will be captured.

</member>
        <member name="T:CefV8StackTrace">

Class representing a V8 stack trace handle. V8 handles can only be accessed
from the thread on which they are created. Valid threads for creating a V8
handle include the render process main thread (TID_RENDERER) and WebWorker
threads. A task runner for posting tasks on the associated thread can be
retrieved via the CefV8Context::GetTaskRunner() method.

</member>
        <member name="M:CefV8Value.ExecuteFunctionWithContext(scoped_refptr&lt;CefV8Context&gt;,scoped_refptr&lt;CefV8Value&gt;,std.vector&lt;scoped_refptr&lt;CefV8Value&gt;,std.allocator&lt;scoped_refptr&lt;CefV8Value&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Execute the function using the specified V8 context. |object| is the
receiver ('this' object) of the function. If |object| is empty the
specified context's global object will be used. |arguments| is the list of
arguments that will be passed to the function. Returns the function return
value on success. Returns NULL if this method is called incorrectly or an
exception is thrown.

</member>
        <member name="M:CefV8Value.ExecuteFunction(scoped_refptr&lt;CefV8Value&gt;,std.vector&lt;scoped_refptr&lt;CefV8Value&gt;,std.allocator&lt;scoped_refptr&lt;CefV8Value&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Execute the function using the current V8 context. This method should only
be called from within the scope of a CefV8Handler or CefV8Accessor
callback, or in combination with calling Enter() and Exit() on a stored
CefV8Context reference. |object| is the receiver ('this' object) of the
function. If |object| is empty the current context's global object will be
used. |arguments| is the list of arguments that will be passed to the
function. Returns the function return value on success. Returns NULL if
this method is called incorrectly or an exception is thrown.

</member>
        <member name="M:CefV8Value.GetFunctionHandler">

Returns the function handler or NULL if not a CEF-created function.

</member>
        <member name="M:CefV8Value.GetFunctionName">

Returns the function name.

</member>
        <member name="M:CefV8Value.NeuterArrayBuffer">

Prevent the ArrayBuffer from using it's memory block by setting the length
to zero. This operation cannot be undone. If the ArrayBuffer was created
with CreateArrayBuffer then CefV8ArrayBufferReleaseCallback::ReleaseBuffer
will be called to release the underlying buffer.

</member>
        <member name="M:CefV8Value.GetArrayBufferReleaseCallback">

Returns the ReleaseCallback object associated with the ArrayBuffer or NULL
if the ArrayBuffer was not created with CreateArrayBuffer.

</member>
        <member name="M:CefV8Value.GetArrayLength">

Returns the number of elements in the array.

</member>
        <member name="M:CefV8Value.AdjustExternallyAllocatedMemory(System.Int32)">

Adjusts the amount of registered external memory for the object. Used to
give V8 an indication of the amount of externally allocated memory that is
kept alive by JavaScript objects. V8 uses this information to decide when
to perform global garbage collection. Each CefV8Value tracks the amount of
external memory associated with it and automatically decreases the global
total by the appropriate amount on its destruction. |change_in_bytes|
specifies the number of bytes to adjust by. This method returns the number
of bytes associated with the object after the adjustment. This method can
only be called on user created objects.

</member>
        <member name="M:CefV8Value.GetExternallyAllocatedMemory">

Returns the amount of externally allocated memory registered for the
object.

</member>
        <member name="M:CefV8Value.GetUserData">

Returns the user data, if any, assigned to this object.

</member>
        <member name="M:CefV8Value.SetUserData(scoped_refptr&lt;CefBaseRefCounted&gt;)">

Sets the user data for this object and returns true on success. Returns
false if this method is called incorrectly. This method can only be called
on user created objects.

</member>
        <member name="M:CefV8Value.GetKeys(std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Read the keys for the object's values into the specified vector. Integer-
based keys will also be returned as strings.

</member>
        <member name="M:CefV8Value.SetValue(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cef_v8_accesscontrol_t,cef_v8_propertyattribute_t)">

Registers an identifier and returns true on success. Access to the
identifier will be forwarded to the CefV8Accessor instance passed to
CefV8Value::CreateObject(). Returns false if this method is called
incorrectly or an exception is thrown. For read-only values this method
will return true even though assignment failed.

</member>
        <member name="M:CefV8Value.SetValue(System.Int32,scoped_refptr&lt;CefV8Value&gt;)">

Associates a value with the specified identifier and returns true on
success. Returns false if this method is called incorrectly or an
exception is thrown. For read-only values this method will return true
even though assignment failed.

</member>
        <member name="M:CefV8Value.SetValue(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefV8Value&gt;,cef_v8_propertyattribute_t)">

Associates a value with the specified identifier and returns true on
success. Returns false if this method is called incorrectly or an
exception is thrown. For read-only values this method will return true
even though assignment failed.

</member>
        <member name="M:CefV8Value.GetValue(System.Int32)">

Returns the value with the specified identifier on success. Returns NULL
if this method is called incorrectly or an exception is thrown.

</member>
        <member name="M:CefV8Value.GetValue(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the value with the specified identifier on success. Returns NULL
if this method is called incorrectly or an exception is thrown.

</member>
        <member name="M:CefV8Value.DeleteValue(System.Int32)">

Deletes the value with the specified identifier and returns true on
success. Returns false if this method is called incorrectly, deletion
fails or an exception is thrown. For read-only and don't-delete values
this method will return true even though deletion failed.

</member>
        <member name="M:CefV8Value.DeleteValue(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Deletes the value with the specified identifier and returns true on
success. Returns false if this method is called incorrectly or an
exception is thrown. For read-only and don't-delete values this method
will return true even though deletion failed.

</member>
        <member name="M:CefV8Value.HasValue(System.Int32)">

Returns true if the object has a value with the specified identifier.

</member>
        <member name="M:CefV8Value.HasValue(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns true if the object has a value with the specified identifier.

</member>
        <member name="M:CefV8Value.SetRethrowExceptions(System.Boolean)">

Set whether this object will re-throw future exceptions. By default
exceptions are not re-thrown. If a exception is re-thrown the current
context should not be accessed again until after the exception has been
caught and not re-thrown. Returns true on success. This attribute exists
only in the scope of the current CEF value object.

</member>
        <member name="M:CefV8Value.WillRethrowExceptions">

Returns true if this object will re-throw future exceptions. This
attribute exists only in the scope of the current CEF value object.

</member>
        <member name="M:CefV8Value.ClearException">

Clears the last exception and returns true on success.

</member>
        <member name="M:CefV8Value.GetException">

Returns the exception resulting from the last method call. This attribute
exists only in the scope of the current CEF value object.

</member>
        <member name="M:CefV8Value.HasException">

Returns true if the last method call resulted in an exception. This
attribute exists only in the scope of the current CEF value object.

</member>
        <member name="M:CefV8Value.IsUserCreated">
OBJECT METHODS - These methods are only available on objects. Arrays and
functions are also objects. String- and integer-based keys can be used
interchangably with the framework converting between them as necessary.

Returns true if this is a user created object.

</member>
        <member name="M:CefV8Value.GetStringValue">

Return a string value.

</member>
        <member name="M:CefV8Value.GetDateValue">

Return a Date value.

</member>
        <member name="M:CefV8Value.GetDoubleValue">

Return a double value.

</member>
        <member name="M:CefV8Value.GetUIntValue">

Return an unsigned int value.

</member>
        <member name="M:CefV8Value.GetIntValue">

Return an int value.

</member>
        <member name="M:CefV8Value.GetBoolValue">

Return a bool value.

</member>
        <member name="M:CefV8Value.IsSame(scoped_refptr&lt;CefV8Value&gt;)">

Returns true if this object is pointing to the same handle as |that|
object.

</member>
        <member name="M:CefV8Value.IsFunction">

True if the value type is function.

</member>
        <member name="M:CefV8Value.IsArrayBuffer">

True if the value type is an ArrayBuffer.

</member>
        <member name="M:CefV8Value.IsArray">

True if the value type is array.

</member>
        <member name="M:CefV8Value.IsObject">

True if the value type is object.

</member>
        <member name="M:CefV8Value.IsString">

True if the value type is string.

</member>
        <member name="M:CefV8Value.IsDate">

True if the value type is Date.

</member>
        <member name="M:CefV8Value.IsDouble">

True if the value type is double.

</member>
        <member name="M:CefV8Value.IsUInt">

True if the value type is unsigned int.

</member>
        <member name="M:CefV8Value.IsInt">

True if the value type is int.

</member>
        <member name="M:CefV8Value.IsBool">

True if the value type is bool.

</member>
        <member name="M:CefV8Value.IsNull">

True if the value type is null.

</member>
        <member name="M:CefV8Value.IsUndefined">

True if the value type is undefined.

</member>
        <member name="M:CefV8Value.IsValid">

Returns true if the underlying handle is valid and it can be accessed on
the current thread. Do not call any other methods if this method returns
false.

</member>
        <member name="M:CefV8Value.CreateFunction(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefV8Handler&gt;)">

Create a new CefV8Value object of type function. This method should only
be called from within the scope of a CefRenderProcessHandler, CefV8Handler
or CefV8Accessor callback, or in combination with calling Enter() and
Exit() on a stored CefV8Context reference.

</member>
        <member name="M:CefV8Value.CreateArrayBuffer(System.Void*,System.UInt32,scoped_refptr&lt;CefV8ArrayBufferReleaseCallback&gt;)">

Create a new CefV8Value object of type ArrayBuffer which wraps the
provided |buffer| of size |length| bytes. The ArrayBuffer is externalized,
meaning that it does not own |buffer|. The caller is responsible for
freeing |buffer| when requested via a call to
CefV8ArrayBufferReleaseCallback::ReleaseBuffer. This method should only
be called from within the scope of a CefRenderProcessHandler, CefV8Handler
or CefV8Accessor callback, or in combination with calling Enter() and
Exit() on a stored CefV8Context reference.

</member>
        <member name="M:CefV8Value.CreateArray(System.Int32)">

Create a new CefV8Value object of type array with the specified |length|.
If |length| is negative the returned array will have length 0. This method
should only be called from within the scope of a CefRenderProcessHandler,
CefV8Handler or CefV8Accessor callback, or in combination with calling
Enter() and Exit() on a stored CefV8Context reference.

</member>
        <member name="M:CefV8Value.CreateObject(scoped_refptr&lt;CefV8Accessor&gt;,scoped_refptr&lt;CefV8Interceptor&gt;)">

Create a new CefV8Value object of type object with optional accessor
and/or interceptor. This method should only be called from within the
scope of a CefRenderProcessHandler, CefV8Handler or CefV8Accessor
callback, or in combination with calling Enter() and Exit() on a stored
CefV8Context reference.

</member>
        <member name="M:CefV8Value.CreateString(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Create a new CefV8Value object of type string.

</member>
        <member name="M:CefV8Value.CreateDate(CefBaseTime)">

Create a new CefV8Value object of type Date. This method should only be
called from within the scope of a CefRenderProcessHandler, CefV8Handler or
CefV8Accessor callback, or in combination with calling Enter() and Exit()
on a stored CefV8Context reference.

</member>
        <member name="M:CefV8Value.CreateDouble(System.Double)">

Create a new CefV8Value object of type double.

</member>
        <member name="M:CefV8Value.CreateUInt(System.UInt32)">

Create a new CefV8Value object of type unsigned int.

</member>
        <member name="M:CefV8Value.CreateInt(System.Int32)">

Create a new CefV8Value object of type int.

</member>
        <member name="M:CefV8Value.CreateBool(System.Boolean)">

Create a new CefV8Value object of type bool.

</member>
        <member name="M:CefV8Value.CreateNull">

Create a new CefV8Value object of type null.

</member>
        <member name="M:CefV8Value.CreateUndefined">

Create a new CefV8Value object of type undefined.

</member>
        <member name="T:CefV8Value">

Class representing a V8 value handle. V8 handles can only be accessed from
the thread on which they are created. Valid threads for creating a V8 handle
include the render process main thread (TID_RENDERER) and WebWorker threads.
A task runner for posting tasks on the associated thread can be retrieved
via the CefV8Context::GetTaskRunner() method.

</member>
        <member name="M:CefV8ArrayBufferReleaseCallback.ReleaseBuffer(System.Void*)">

Called to release |buffer| when the ArrayBuffer JS object is garbage
collected. |buffer| is the value that was passed to CreateArrayBuffer
along with this object.

</member>
        <member name="T:CefV8ArrayBufferReleaseCallback">

Callback interface that is passed to CefV8Value::CreateArrayBuffer.

</member>
        <member name="M:CefV8Exception.GetEndColumn">

Returns the index within the line of the last character where the error
occurred.

</member>
        <member name="M:CefV8Exception.GetStartColumn">

Returns the index within the line of the first character where the error
occurred.

</member>
        <member name="M:CefV8Exception.GetEndPosition">

Returns the index within the script of the last character where the error
occurred.

</member>
        <member name="M:CefV8Exception.GetStartPosition">

Returns the index within the script of the first character where the error
occurred.

</member>
        <member name="M:CefV8Exception.GetLineNumber">

Returns the 1-based number of the line where the error occurred or 0 if
the line number is unknown.

</member>
        <member name="M:CefV8Exception.GetScriptResourceName">

Returns the resource name for the script from where the function causing
the error originates.

</member>
        <member name="M:CefV8Exception.GetSourceLine">

Returns the line of source code that the exception occurred within.

</member>
        <member name="M:CefV8Exception.GetMessage">

Returns the exception message.

</member>
        <member name="T:CefV8Exception">

Class representing a V8 exception. The methods of this class may be called
on any render process thread.

</member>
        <member name="M:CefV8Interceptor.Set(System.Int32,scoped_refptr&lt;CefV8Value&gt;!System.Runtime.CompilerServices.IsConst,scoped_refptr&lt;CefV8Value&gt;!System.Runtime.CompilerServices.IsConst,CefStringBase&lt;CefStringTraitsUTF16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Handle assignment of the interceptor value identified by |index|. |object|
is the receiver ('this' object) of the interceptor. |value| is the new
value being assigned to the interceptor. If assignment fails, set
|exception| to the exception that will be thrown.
Return true if interceptor assignment was handled, false otherwise.

</member>
        <member name="M:CefV8Interceptor.Set(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefV8Value&gt;!System.Runtime.CompilerServices.IsConst,scoped_refptr&lt;CefV8Value&gt;!System.Runtime.CompilerServices.IsConst,CefStringBase&lt;CefStringTraitsUTF16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Handle assignment of the interceptor value identified by |name|. |object|
is the receiver ('this' object) of the interceptor. |value| is the new
value being assigned to the interceptor. If assignment fails, set
|exception| to the exception that will be thrown. This setter will always
be called, even when the property has an associated accessor.
Return true if interceptor assignment was handled, false otherwise.

</member>
        <member name="M:CefV8Interceptor.Get(System.Int32,scoped_refptr&lt;CefV8Value&gt;!System.Runtime.CompilerServices.IsConst,scoped_refptr&lt;CefV8Value&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Handle retrieval of the interceptor value identified by |index|. |object|
is the receiver ('this' object) of the interceptor. If retrieval succeeds,
set |retval| to the return value. If the requested value does not exist,
don't set either |retval| or |exception|. If retrieval fails, set
|exception| to the exception that will be thrown.
Return true if interceptor retrieval was handled, false otherwise.

</member>
        <member name="M:CefV8Interceptor.Get(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefV8Value&gt;!System.Runtime.CompilerServices.IsConst,scoped_refptr&lt;CefV8Value&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Handle retrieval of the interceptor value identified by |name|. |object|
is the receiver ('this' object) of the interceptor. If retrieval succeeds,
set |retval| to the return value. If the requested value does not exist,
don't set either |retval| or |exception|. If retrieval fails, set
|exception| to the exception that will be thrown. If the property has an
associated accessor, it will be called only if you don't set |retval|.
Return true if interceptor retrieval was handled, false otherwise.

</member>
        <member name="T:CefV8Interceptor">

Interface that should be implemented to handle V8 interceptor calls. The
methods of this class will be called on the thread associated with the V8
interceptor. Interceptor's named property handlers (with first argument of
type CefString) are called when object is indexed by string. Indexed
property handlers (with first argument of type int) are called when object
is indexed by integer.

</member>
        <member name="M:CefV8Accessor.Set(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefV8Value&gt;!System.Runtime.CompilerServices.IsConst,scoped_refptr&lt;CefV8Value&gt;!System.Runtime.CompilerServices.IsConst,CefStringBase&lt;CefStringTraitsUTF16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Handle assignment of the accessor value identified by |name|. |object| is
the receiver ('this' object) of the accessor. |value| is the new value
being assigned to the accessor. If assignment fails set |exception| to the
exception that will be thrown. Return true if accessor assignment was
handled.

</member>
        <member name="M:CefV8Accessor.Get(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefV8Value&gt;!System.Runtime.CompilerServices.IsConst,scoped_refptr&lt;CefV8Value&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Handle retrieval the accessor value identified by |name|. |object| is the
receiver ('this' object) of the accessor. If retrieval succeeds set
|retval| to the return value. If retrieval fails set |exception| to the
exception that will be thrown. Return true if accessor retrieval was
handled.

</member>
        <member name="T:CefV8Accessor">

Interface that should be implemented to handle V8 accessor calls. Accessor
identifiers are registered by calling CefV8Value::SetValue(). The methods
of this class will be called on the thread associated with the V8 accessor.

</member>
        <member name="M:CefV8Handler.Execute(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefV8Value&gt;,std.vector&lt;scoped_refptr&lt;CefV8Value&gt;,std.allocator&lt;scoped_refptr&lt;CefV8Value&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefV8Value&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Handle execution of the function identified by |name|. |object| is the
receiver ('this' object) of the function. |arguments| is the list of
arguments passed to the function. If execution succeeds set |retval| to
the function return value. If execution fails set |exception| to the
exception that will be thrown. Return true if execution was handled.

</member>
        <member name="T:CefV8Handler">

Interface that should be implemented to handle V8 function calls. The
methods of this class will be called on the thread associated with the V8
function.

</member>
        <member name="M:CefV8Context.Eval(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,scoped_refptr&lt;CefV8Value&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefV8Exception&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Execute a string of JavaScript code in this V8 context. The |script_url|
parameter is the URL where the script in question can be found, if any.
The |start_line| parameter is the base line number to use for error
reporting. On success |retval| will be set to the return value, if any,
and the function will return true. On failure |exception| will be set to
the exception, if any, and the function will return false.

</member>
        <member name="M:CefV8Context.IsSame(scoped_refptr&lt;CefV8Context&gt;)">

Returns true if this object is pointing to the same handle as |that|
object.

</member>
        <member name="M:CefV8Context.Exit">

Exit this context. Call this method only after calling Enter(). Returns
true if the scope was exited successfully.

</member>
        <member name="M:CefV8Context.Enter">

Enter this context. A context must be explicitly entered before creating a
V8 Object, Array, Function or Date asynchronously. Exit() must be called
the same number of times as Enter() before releasing this context. V8
objects belong to the context in which they are created. Returns true if
the scope was entered successfully.

</member>
        <member name="M:CefV8Context.GetGlobal">

Returns the global object for this context. The context must be entered
before calling this method.

</member>
        <member name="M:CefV8Context.GetFrame">

Returns the frame for this context. This method will return an empty
reference for WebWorker contexts.

</member>
        <member name="M:CefV8Context.GetBrowser">

Returns the browser for this context. This method will return an empty
reference for WebWorker contexts.

</member>
        <member name="M:CefV8Context.IsValid">

Returns true if the underlying handle is valid and it can be accessed on
the current thread. Do not call any other methods if this method returns
false.

</member>
        <member name="M:CefV8Context.GetTaskRunner">

Returns the task runner associated with this context. V8 handles can only
be accessed from the thread on which they are created. This method can be
called on any render process thread.

</member>
        <member name="M:CefV8Context.InContext">

Returns true if V8 is currently inside a context.

</member>
        <member name="M:CefV8Context.GetEnteredContext">

Returns the entered (bottom) context object in the V8 context stack.

</member>
        <member name="M:CefV8Context.GetCurrentContext">

Returns the current (top) context object in the V8 context stack.

</member>
        <member name="T:CefV8Context">

Class representing a V8 context handle. V8 handles can only be accessed from
the thread on which they are created. Valid threads for creating a V8 handle
include the render process main thread (TID_RENDERER) and WebWorker threads.
A task runner for posting tasks on the associated thread can be retrieved
via the CefV8Context::GetTaskRunner() method.

</member>
        <member name="M:CefRegisterExtension(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefV8Handler&gt;)">

Register a new V8 extension with the specified JavaScript extension code and
handler. Functions implemented by the handler are prototyped using the
keyword 'native'. The calling of a native function is restricted to the
scope in which the prototype of the native function is defined. This
function may only be called on the render process main thread.

Example JavaScript extension code:
<pre>
  // create the 'example' global object if it doesn't already exist.
  if (!example)
    example = {};
  // create the 'example.test' global object if it doesn't already exist.
  if (!example.test)
    example.test = {};
  (function() {
    // Define the function 'example.test.myfunction'.
    example.test.myfunction = function() {
      // Call CefV8Handler::Execute() with the function name 'MyFunction'
      // and no arguments.
      native function MyFunction();
      return MyFunction();
    };
    // Define the getter function for parameter 'example.test.myparam'.
    example.test.__defineGetter__('myparam', function() {
      // Call CefV8Handler::Execute() with the function name 'GetMyParam'
      // and no arguments.
      native function GetMyParam();
      return GetMyParam();
    });
    // Define the setter function for parameter 'example.test.myparam'.
    example.test.__defineSetter__('myparam', function(b) {
      // Call CefV8Handler::Execute() with the function name 'SetMyParam'
      // and a single argument.
      native function SetMyParam();
      if(b) SetMyParam(b);
    });

    // Extension definitions can also contain normal JavaScript variables
    // and functions.
    var myint = 0;
    example.test.increment = function() {
      myint += 1;
      return myint;
    };
  })();
</pre>

Example usage in the page:
<pre>
  // Call the function.
  example.test.myfunction();
  // Set the parameter.
  example.test.myparam = value;
  // Get the parameter.
  value = example.test.myparam;
  // Call another function.
  example.test.increment();
</pre></member>
        <member name="M:CefPostDelayedTask(cef_thread_id_t,scoped_refptr&lt;CefTask&gt;,System.Int64)">

Post a task for delayed execution on the specified thread. Equivalent to
using CefTaskRunner::GetForThread(threadId)-&gt;PostDelayedTask(task,
delay_ms).

</member>
        <member name="M:CefPostTask(cef_thread_id_t,scoped_refptr&lt;CefTask&gt;)">

Post a task for execution on the specified thread. Equivalent to
using CefTaskRunner::GetForThread(threadId)-&gt;PostTask(task).

</member>
        <member name="M:CefCurrentlyOn(cef_thread_id_t)">

Returns true if called on the specified thread. Equivalent to using
CefTaskRunner::GetForThread(threadId)-&gt;BelongsToCurrentThread().

</member>
        <member name="M:CefTaskRunner.PostDelayedTask(scoped_refptr&lt;CefTask&gt;,System.Int64)">

Post a task for delayed execution on the thread associated with this task
runner. Execution will occur asynchronously. Delayed tasks are not
supported on V8 WebWorker threads and will be executed without the
specified delay.

</member>
        <member name="M:CefTaskRunner.PostTask(scoped_refptr&lt;CefTask&gt;)">

Post a task for execution on the thread associated with this task runner.
Execution will occur asynchronously.

</member>
        <member name="M:CefTaskRunner.BelongsToThread(cef_thread_id_t)">

Returns true if this task runner is for the specified CEF thread.

</member>
        <member name="M:CefTaskRunner.BelongsToCurrentThread">

Returns true if this task runner belongs to the current thread.

</member>
        <member name="M:CefTaskRunner.IsSame(scoped_refptr&lt;CefTaskRunner&gt;)">

Returns true if this object is pointing to the same task runner as |that|
object.

</member>
        <member name="M:CefTaskRunner.GetForThread(cef_thread_id_t)">

Returns the task runner for the specified CEF thread.

</member>
        <member name="M:CefTaskRunner.GetForCurrentThread">

Returns the task runner for the current thread. Only CEF threads will have
task runners. An empty reference will be returned if this method is called
on an invalid thread.

</member>
        <member name="T:CefTaskRunner">

Class that asynchronously executes tasks on the associated thread. It is
safe to call the methods of this class on any thread.

CEF maintains multiple internal threads that are used for handling different
types of tasks in different processes. The cef_thread_id_t definitions in
cef_types.h list the common CEF threads. Task runners are also available for
other CEF threads as appropriate (for example, V8 WebWorker threads).

</member>
        <member name="M:CefTask.Execute">

Method that will be executed on the target thread.

</member>
        <member name="T:CefTask">

Implement this interface for asynchronous task execution. If the task is
posted successfully and if the associated message loop is still running then
the Execute() method will be called on the target thread. If the task fails
to post then the task object may be destroyed on the source thread instead
of the target thread. For this reason be cautious when performing work in
the task object destructor.

</member>
        <member name="M:CefBrowserHost.IsAudioMuted">

Returns true if the browser's audio is muted.  This method can only be
called on the UI thread.

</member>
        <member name="M:CefBrowserHost.SetAudioMuted(System.Boolean)">

Set whether the browser's audio is muted.

</member>
        <member name="M:CefBrowserHost.IsBackgroundHost">

Returns true if this browser is hosting an extension background script.
Background hosts do not have a window and are not displayable. See
CefRequestContext::LoadExtension for details.

</member>
        <member name="M:CefBrowserHost.GetExtension">

Returns the extension hosted in this browser or NULL if no extension is
hosted. See CefRequestContext::LoadExtension for details.

</member>
        <member name="M:CefBrowserHost.SetAutoResizeEnabled(System.Boolean,CefSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Enable notifications of auto resize via CefDisplayHandler::OnAutoResize.
Notifications are disabled by default. |min_size| and |max_size| define
the range of allowed sizes.

</member>
        <member name="M:CefBrowserHost.SetAccessibilityState(cef_state_t)">

Set accessibility state for all frames. |accessibility_state| may be
default, enabled or disabled. If |accessibility_state| is STATE_DEFAULT
then accessibility will be disabled by default and the state may be
further controlled with the "force-renderer-accessibility" and
"disable-renderer-accessibility" command-line switches. If
|accessibility_state| is STATE_ENABLED then accessibility will be enabled.
If |accessibility_state| is STATE_DISABLED then accessibility will be
completely disabled.

For windowed browsers accessibility will be enabled in Complete mode
(which corresponds to kAccessibilityModeComplete in Chromium). In this
mode all platform accessibility objects will be created and managed by
Chromium's internal implementation. The client needs only to detect the
screen reader and call this method appropriately. For example, on macOS
the client can handle the @"AXEnhancedUserInterface" accessibility
attribute to detect VoiceOver state changes and on Windows the client can
handle WM_GETOBJECT with OBJID_CLIENT to detect accessibility readers.

For windowless browsers accessibility will be enabled in TreeOnly mode
(which corresponds to kAccessibilityModeWebContentsOnly in Chromium). In
this mode renderer accessibility is enabled, the full tree is computed,
and events are passed to CefAccessibiltyHandler, but platform
accessibility objects are not created. The client may implement platform
accessibility objects using CefAccessibiltyHandler callbacks if desired.

</member>
        <member name="M:CefBrowserHost.GetVisibleNavigationEntry">

Returns the current visible navigation entry for this browser. This method
can only be called on the UI thread.

</member>
        <member name="M:CefBrowserHost.DragSourceSystemDragEnded">

Call this method when the drag operation started by a
CefRenderHandler::StartDragging call has completed. This method may be
called immediately without first calling DragSourceEndedAt to cancel a
drag operation. If the web view is both the drag source and the drag
target then all DragTarget* methods should be called before DragSource*
mthods.
This method is only used when window rendering is disabled.

</member>
        <member name="M:CefBrowserHost.DragSourceEndedAt(System.Int32,System.Int32,cef_drag_operations_mask_t)">

Call this method when the drag operation started by a
CefRenderHandler::StartDragging call has ended either in a drop or
by being cancelled. |x| and |y| are mouse coordinates relative to the
upper-left corner of the view. If the web view is both the drag source
and the drag target then all DragTarget* methods should be called before
DragSource* mthods.
This method is only used when window rendering is disabled.

</member>
        <member name="M:CefBrowserHost.DragTargetDrop(CefMouseEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Call this method when the user completes the drag operation by dropping
the object onto the web view (after calling DragTargetDragEnter).
The object being dropped is |drag_data|, given as an argument to
the previous DragTargetDragEnter call.
This method is only used when window rendering is disabled.

</member>
        <member name="M:CefBrowserHost.DragTargetDragLeave">

Call this method when the user drags the mouse out of the web view (after
calling DragTargetDragEnter).
This method is only used when window rendering is disabled.

</member>
        <member name="M:CefBrowserHost.DragTargetDragOver(CefMouseEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cef_drag_operations_mask_t)">

Call this method each time the mouse is moved across the web view during
a drag operation (after calling DragTargetDragEnter and before calling
DragTargetDragLeave/DragTargetDrop).
This method is only used when window rendering is disabled.

</member>
        <member name="M:CefBrowserHost.DragTargetDragEnter(scoped_refptr&lt;CefDragData&gt;,CefMouseEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cef_drag_operations_mask_t)">

Call this method when the user drags the mouse into the web view (before
calling DragTargetDragOver/DragTargetLeave/DragTargetDrop).
|drag_data| should not contain file contents as this type of data is not
allowed to be dragged into the web view. File contents can be removed
using CefDragData::ResetFileContents (for example, if |drag_data| comes
from CefRenderHandler::StartDragging). This method is only used when
window rendering is disabled.

</member>
        <member name="M:CefBrowserHost.ImeCancelComposition">

Cancels the existing composition and discards the composition node
contents without applying them. See comments on ImeSetComposition for
usage.
This method is only used when window rendering is disabled.

</member>
        <member name="M:CefBrowserHost.ImeFinishComposingText(System.Boolean)">

Completes the existing composition by applying the current composition
node contents. If |keep_selection| is false the current selection, if any,
will be discarded. See comments on ImeSetComposition for usage. This
method is only used when window rendering is disabled.

</member>
        <member name="M:CefBrowserHost.ImeCommitText(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">

Completes the existing composition by optionally inserting the specified
|text| into the composition node. |replacement_range| is an optional range
of the existing text that will be replaced. |relative_cursor_pos| is where
the cursor will be positioned relative to the current cursor position. See
comments on ImeSetComposition for usage. The |replacement_range| and
|relative_cursor_pos| values are only used on OS X.
This method is only used when window rendering is disabled.

</member>
        <member name="M:CefBrowserHost.ImeSetComposition(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;CefCompositionUnderline,std.allocator&lt;CefCompositionUnderline&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefRange!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Begins a new composition or updates the existing composition. Blink has a
special node (a composition node) that allows the input method to change
text without affecting other DOM nodes. |text| is the optional text that
will be inserted into the composition node. |underlines| is an optional
set of ranges that will be underlined in the resulting text.
|replacement_range| is an optional range of the existing text that will be
replaced. |selection_range| is an optional range of the resulting text
that will be selected after insertion or replacement. The
|replacement_range| value is only used on OS X.

This method may be called multiple times as the composition changes. When
the client is done making changes the composition should either be
canceled or completed. To cancel the composition call
ImeCancelComposition. To complete the composition call either
ImeCommitText or ImeFinishComposingText. Completion is usually signaled
when:

1. The client receives a WM_IME_COMPOSITION message with a GCS_RESULTSTR
   flag (on Windows), or;
2. The client receives a "commit" signal of GtkIMContext (on Linux), or;
3. insertText of NSTextInput is called (on Mac).

This method is only used when window rendering is disabled.

</member>
        <member name="M:CefBrowserHost.SetWindowlessFrameRate(System.Int32)">

Set the maximum rate in frames per second (fps) that CefRenderHandler::
OnPaint will be called for a windowless browser. The actual fps may be
lower if the browser cannot generate frames at the requested rate. The
minimum value is 1 and the maximum value is 60 (default 30). Can also be
set at browser creation via CefBrowserSettings.windowless_frame_rate.

</member>
        <member name="M:CefBrowserHost.GetWindowlessFrameRate">

Returns the maximum rate in frames per second (fps) that
CefRenderHandler::OnPaint will be called for a windowless browser. The
actual fps may be lower if the browser cannot generate frames at the
requested rate. The minimum value is 1 and the maximum value is 60
(default 30). This method can only be called on the UI thread.

</member>
        <member name="M:CefBrowserHost.NotifyMoveOrResizeStarted">

Notify the browser that the window hosting it is about to be moved or
resized. This method is only used on Windows and Linux.

</member>
        <member name="M:CefBrowserHost.SendCaptureLostEvent">

Send a capture lost event to the browser.

</member>
        <member name="M:CefBrowserHost.SendTouchEvent(CefTouchEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Send a touch event to the browser for a windowless browser.

</member>
        <member name="M:CefBrowserHost.SendMouseWheelEvent(CefMouseEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)">

Send a mouse wheel event to the browser. The |x| and |y| coordinates are
relative to the upper-left corner of the view. The |deltaX| and |deltaY|
values represent the movement delta in the X and Y directions
respectively. In order to scroll inside select popups with window
rendering disabled CefRenderHandler::GetScreenPoint should be implemented
properly.

</member>
        <member name="M:CefBrowserHost.SendMouseMoveEvent(CefMouseEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

Send a mouse move event to the browser. The |x| and |y| coordinates are
relative to the upper-left corner of the view.

</member>
        <member name="M:CefBrowserHost.SendMouseClickEvent(CefMouseEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cef_mouse_button_type_t,System.Boolean,System.Int32)">

Send a mouse click event to the browser. The |x| and |y| coordinates are
relative to the upper-left corner of the view.

</member>
        <member name="M:CefBrowserHost.SendKeyEvent(CefKeyEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Send a key event to the browser.

</member>
        <member name="M:CefBrowserHost.SendExternalBeginFrame">

Issue a BeginFrame request to Chromium.  Only valid when
CefWindowInfo::external_begin_frame_enabled is set to true.

</member>
        <member name="M:CefBrowserHost.Invalidate(cef_paint_element_type_t)">

Invalidate the view. The browser will call CefRenderHandler::OnPaint
asynchronously. This method is only used when window rendering is
disabled.

</member>
        <member name="M:CefBrowserHost.NotifyScreenInfoChanged">

Send a notification to the browser that the screen info has changed. The
browser will then call CefRenderHandler::GetScreenInfo to update the
screen information with the new values. This simulates moving the webview
window from one display to another, or changing the properties of the
current display. This method is only used when window rendering is
disabled.

</member>
        <member name="M:CefBrowserHost.WasHidden(System.Boolean)">

Notify the browser that it has been hidden or shown. Layouting and
CefRenderHandler::OnPaint notification will stop when the browser is
hidden. This method is only used when window rendering is disabled.

</member>
        <member name="M:CefBrowserHost.WasResized">

Notify the browser that the widget has been resized. The browser will
first call CefRenderHandler::GetViewRect to get the new size and then call
CefRenderHandler::OnPaint asynchronously with the updated regions. This
method is only used when window rendering is disabled.

</member>
        <member name="M:CefBrowserHost.IsWindowRenderingDisabled">

Returns true if window rendering is disabled.

</member>
        <member name="M:CefBrowserHost.AddWordToDictionary(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Add the specified |word| to the spelling dictionary.

</member>
        <member name="M:CefBrowserHost.ReplaceMisspelling(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

If a misspelled word is currently selected in an editable node calling
this method will replace it with the specified |word|.

</member>
        <member name="M:CefBrowserHost.GetNavigationEntries(scoped_refptr&lt;CefNavigationEntryVisitor&gt;,System.Boolean)">

Retrieve a snapshot of current navigation entries as values sent to the
specified visitor. If |current_only| is true only the current navigation
entry will be sent, otherwise all navigation entries will be sent.

</member>
        <member name="M:CefBrowserHost.AddDevToolsMessageObserver(scoped_refptr&lt;CefDevToolsMessageObserver&gt;)">

Add an observer for DevTools protocol messages (method results and
events). The observer will remain registered until the returned
Registration object is destroyed. See the SendDevToolsMessage
documentation for additional usage information.

</member>
        <member name="M:CefBrowserHost.ExecuteDevToolsMethod(System.Int32,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefDictionaryValue&gt;)">

Execute a method call over the DevTools protocol. This is a more
structured version of SendDevToolsMessage. |message_id| is an incremental
number that uniquely identifies the message (pass 0 to have the next
number assigned automatically based on previous values). |method| is the
method name. |params| are the method parameters, which may be empty. See
the DevTools protocol documentation (linked above) for details of
supported methods and the expected |params| dictionary contents. This
method will return the assigned message ID if called on the UI thread and
the message was successfully submitted for validation, otherwise 0. See
the SendDevToolsMessage documentation for additional usage information.

</member>
        <member name="M:CefBrowserHost.HasDevTools">

Returns true if this browser currently has an associated DevTools browser.
Must be called on the browser process UI thread.

</member>
        <member name="M:CefBrowserHost.CloseDevTools">

Explicitly close the associated DevTools browser, if any.

</member>
        <member name="M:CefBrowserHost.ShowDevTools(CefWindowInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefClient&gt;,CefStructBase&lt;CefBrowserSettingsTraits&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Open developer tools (DevTools) in its own browser. The DevTools browser
will remain associated with this browser. If the DevTools browser is
already open then it will be focused, in which case the |windowInfo|,
|client| and |settings| parameters will be ignored. If
|inspect_element_at| is non-empty then the element at the specified (x,y)
location will be inspected. The |windowInfo| parameter will be ignored if
this browser is wrapped in a CefBrowserView.

</member>
        <member name="M:CefBrowserHost.StopFinding(System.Boolean)">

Cancel all searches that are currently going on.

</member>
        <member name="M:CefBrowserHost.Find(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean)">

Search for |searchText|. |forward| indicates whether to search forward or
backward within the page. |matchCase| indicates whether the search should
be case-sensitive. |findNext| indicates whether this is the first request
or a follow-up. The search will be restarted if |searchText| or
|matchCase| change. The search will be stopped if |searchText| is empty.
The CefFindHandler instance, if any, returned via
CefClient::GetFindHandler will be called to report find results.

</member>
        <member name="M:CefBrowserHost.PrintToPDF(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStructBase&lt;CefPdfPrintSettingsTraits&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefPdfPrintCallback&gt;)">

Print the current browser contents to the PDF file specified by |path| and
execute |callback| on completion. The caller is responsible for deleting
|path| when done. For PDF printing to work on Linux you must implement the
CefPrintHandler::GetPdfPaperSize method.

</member>
        <member name="M:CefBrowserHost.Print">

Print the current browser contents.

</member>
        <member name="M:CefBrowserHost.StartDownload(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Download the file at |url| using CefDownloadHandler.

</member>
        <member name="M:CefBrowserHost.RunFileDialog(cef_file_dialog_mode_t,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefRunFileDialogCallback&gt;)">

Call to run a file chooser dialog. Only a single file chooser dialog may
be pending at any given time. |mode| represents the type of dialog to
display. |title| to the title to be used for the dialog and may be empty
to show the default title ("Open" or "Save" depending on the mode).
|default_file_path| is the path with optional directory and/or file name
component that will be initially selected in the dialog. |accept_filters|
are used to restrict the selectable file types and may any combination of
(a) valid lower-cased MIME types (e.g. "text/*" or "image/*"), (b)
individual file extensions (e.g.
".txt" or ".png"), or (c) combined description and file extension
delimited using "|" and ";" (e.g. "Image Types|.png;.gif;.jpg").
|callback| will be executed after the dialog is dismissed or immediately
if another dialog is already pending. The dialog will be initiated
asynchronously on the UI thread.

</member>
        <member name="M:CefBrowserHost.SetZoomLevel(System.Double)">

Change the zoom level to the specified value. Specify 0.0 to reset the
zoom level. If called on the UI thread the change will be applied
immediately. Otherwise, the change will be applied asynchronously on the
UI thread.

</member>
        <member name="M:CefBrowserHost.GetZoomLevel">

Get the current zoom level. The default zoom level is 0.0. This method can
only be called on the UI thread.

</member>
        <member name="M:CefBrowserHost.GetRequestContext">

Returns the request context for this browser.

</member>
        <member name="M:CefBrowserHost.GetClient">

Returns the client for this browser.

</member>
        <member name="M:CefBrowserHost.HasView">

Returns true if this browser is wrapped in a CefBrowserView.

</member>
        <member name="M:CefBrowserHost.GetOpenerWindowHandle">

Retrieve the window handle (if any) of the browser that opened this
browser. Will return NULL for non-popup browsers or if this browser is
wrapped in a CefBrowserView. This method can be used in combination with
custom handling of modal windows.

</member>
        <member name="M:CefBrowserHost.GetWindowHandle">

Retrieve the window handle (if any) for this browser. If this browser is
wrapped in a CefBrowserView this method should be called on the browser
process UI thread and it will return the handle for the top-level native
window.

</member>
        <member name="M:CefBrowserHost.SetFocus(System.Boolean)">

Set whether the browser is focused.

</member>
        <member name="M:CefBrowserHost.TryCloseBrowser">

Helper for closing a browser. Call this method from the top-level window
close handler (if any). Internally this calls CloseBrowser(false) if the
close has not yet been initiated. This method returns false while the
close is pending and true after the close has completed. See
CloseBrowser() and CefLifeSpanHandler::DoClose() documentation for
additional usage information. This method must be called on the browser
process UI thread.

</member>
        <member name="M:CefBrowserHost.CloseBrowser(System.Boolean)">

Request that the browser close. The JavaScript 'onbeforeunload' event will
be fired. If |force_close| is false the event handler, if any, will be
allowed to prompt the user and the user can optionally cancel the close.
If |force_close| is true the prompt will not be displayed and the close
will proceed. Results in a call to CefLifeSpanHandler::DoClose() if the
event handler allows the close or if |force_close| is true. See
CefLifeSpanHandler::DoClose() documentation for additional usage
information.

</member>
        <member name="M:CefBrowserHost.GetBrowser">

Returns the hosted browser object.

</member>
        <member name="M:CefBrowserHost.CreateBrowserSync(CefWindowInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefClient&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStructBase&lt;CefBrowserSettingsTraits&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefDictionaryValue&gt;,scoped_refptr&lt;CefRequestContext&gt;)">

Create a new browser using the window parameters specified by
|windowInfo|. If |request_context| is empty the global request context
will be used. This method can only be called on the browser process UI
thread. The optional |extra_info| parameter provides an opportunity to
specify extra information specific to the created browser that will be
passed to CefRenderProcessHandler::OnBrowserCreated() in the render
process.

</member>
        <member name="M:CefBrowserHost.CreateBrowser(CefWindowInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefClient&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStructBase&lt;CefBrowserSettingsTraits&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefDictionaryValue&gt;,scoped_refptr&lt;CefRequestContext&gt;)">

Create a new browser using the window parameters specified by
|windowInfo|. All values will be copied internally and the actual window
(if any) will be created on the UI thread. If |request_context| is empty
the global request context will be used. This method can be called on any
browser process thread and will not block. The optional |extra_info|
parameter provides an opportunity to specify extra information specific to
the created browser that will be passed to
CefRenderProcessHandler::OnBrowserCreated() in the render process.

</member>
        <member name="T:CefBrowserHost">

Class used to represent the browser process aspects of a browser. The
methods of this class can only be called in the browser process. They may be
called on any thread in that process unless otherwise indicated in the
comments.

</member>
        <member name="M:CefDownloadImageCallback.OnDownloadImageFinished(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,scoped_refptr&lt;CefImage&gt;)">

Method that will be executed when the image download has completed.
|image_url| is the URL that was downloaded and |http_status_code| is the
resulting HTTP status code. |image| is the resulting image, possibly at
multiple scale factors, or empty if the download failed.

</member>
        <member name="T:CefDownloadImageCallback">

Callback interface for CefBrowserHost::DownloadImage. The methods of this
class will be called on the browser process UI thread.

</member>
        <member name="M:CefPdfPrintCallback.OnPdfPrintFinished(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

Method that will be executed when the PDF printing has completed. |path|
is the output path. |ok| will be true if the printing completed
successfully or false otherwise.

</member>
        <member name="T:CefPdfPrintCallback">

Callback interface for CefBrowserHost::PrintToPDF. The methods of this class
will be called on the browser process UI thread.

</member>
        <member name="M:CefNavigationEntryVisitor.Visit(scoped_refptr&lt;CefNavigationEntry&gt;,System.Boolean,System.Int32,System.Int32)">

Method that will be executed. Do not keep a reference to |entry| outside
of this callback. Return true to continue visiting entries or false to
stop. |current| is true if this entry is the currently loaded navigation
entry. |index| is the 0-based index of this entry and |total| is the total
number of entries.

</member>
        <member name="T:CefNavigationEntryVisitor">

Callback interface for CefBrowserHost::GetNavigationEntries. The methods of
this class will be called on the browser process UI thread.

</member>
        <member name="M:CefRunFileDialogCallback.OnFileDialogDismissed(std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called asynchronously after the file dialog is dismissed.
|file_paths| will be a single value or a list of values depending on the
dialog mode. If the selection was cancelled |file_paths| will be empty.

</member>
        <member name="T:CefRunFileDialogCallback">

Callback interface for CefBrowserHost::RunFileDialog. The methods of this
class will be called on the browser process UI thread.

</member>
        <member name="M:CefBrowser.GetFrameNames(std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the names of all existing frames.

</member>
        <member name="M:CefBrowser.GetFrameIdentifiers(std.vector&lt;System.Int64,std.allocator&lt;System.Int64&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the identifiers of all existing frames.

</member>
        <member name="M:CefBrowser.GetFrameCount">

Returns the number of frames that currently exist.

</member>
        <member name="M:CefBrowser.GetFrame(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the frame with the specified name, or NULL if not found.

</member>
        <member name="M:CefBrowser.GetFrame(System.Int64)">

Returns the frame with the specified identifier, or NULL if not found.

</member>
        <member name="M:CefBrowser.GetFocusedFrame">

Returns the focused frame for the browser.

</member>
        <member name="M:CefBrowser.GetMainFrame">

Returns the main (top-level) frame for the browser. In the browser process
this will return a valid object until after
CefLifeSpanHandler::OnBeforeClose is called. In the renderer process this
will return NULL if the main frame is hosted in a different renderer
process (e.g. for cross-origin sub-frames). The main frame object will
change during cross-origin navigation or re-navigation after renderer
process termination (due to crashes, etc).

</member>
        <member name="M:CefBrowser.HasDocument">

Returns true if a document has been loaded in the browser.

</member>
        <member name="M:CefBrowser.IsPopup">

Returns true if the browser is a popup.

</member>
        <member name="M:CefBrowser.IsSame(scoped_refptr&lt;CefBrowser&gt;)">

Returns true if this object is pointing to the same handle as |that|
object.

</member>
        <member name="M:CefBrowser.GetIdentifier">

Returns the globally unique identifier for this browser. This value is
also used as the tabId for extension APIs.

</member>
        <member name="M:CefBrowser.StopLoad">

Stop loading the page.

</member>
        <member name="M:CefBrowser.ReloadIgnoreCache">

Reload the current page ignoring any cached data.

</member>
        <member name="M:CefBrowser.Reload">

Reload the current page.

</member>
        <member name="M:CefBrowser.IsLoading">

Returns true if the browser is currently loading.

</member>
        <member name="M:CefBrowser.GoForward">

Navigate forwards.

</member>
        <member name="M:CefBrowser.CanGoForward">

Returns true if the browser can navigate forwards.

</member>
        <member name="M:CefBrowser.GoBack">

Navigate backwards.

</member>
        <member name="M:CefBrowser.CanGoBack">

Returns true if the browser can navigate backwards.

</member>
        <member name="M:CefBrowser.GetHost">

Returns the browser host object. This method can only be called in the
browser process.

</member>
        <member name="M:CefBrowser.IsValid">

True if this object is currently valid. This will return false after
CefLifeSpanHandler::OnBeforeClose is called.

</member>
        <member name="T:CefBrowser">

Class used to represent a browser. When used in the browser process the
methods of this class may be called on any thread unless otherwise indicated
in the comments. When used in the render process the methods of this class
may only be called on the main thread.

</member>
        <member name="M:CefRequestContext.GetMediaRouter(scoped_refptr&lt;CefCompletionCallback&gt;)">

Returns the MediaRouter object associated with this context.  If
|callback| is non-NULL it will be executed asnychronously on the UI thread
after the manager's context has been initialized.

</member>
        <member name="M:CefRequestContext.GetExtension(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the extension matching |extension_id| or NULL if no matching
extension is accessible in this context (see HasExtension). This method
must be called on the browser process UI thread.

</member>
        <member name="M:CefRequestContext.GetExtensions(std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Retrieve the list of all extensions that this context has access to (see
HasExtension). |extension_ids| will be populated with the list of
extension ID values. Returns true on success. This method must be called
on the browser process UI thread.

</member>
        <member name="M:CefRequestContext.HasExtension(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns true if this context has access to the extension identified by
|extension_id|. This may not be the context that was used to load the
extension (see DidLoadExtension). This method must be called on the
browser process UI thread.

</member>
        <member name="M:CefRequestContext.DidLoadExtension(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns true if this context was used to load the extension identified by
|extension_id|. Other contexts sharing the same storage will also have
access to the extension (see HasExtension). This method must be called on
the browser process UI thread.

</member>
        <member name="M:CefRequestContext.ResolveHost(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefResolveCallback&gt;)">

Attempts to resolve |origin| to a list of associated IP addresses.
|callback| will be executed on the UI thread after completion.

</member>
        <member name="M:CefRequestContext.CloseAllConnections(scoped_refptr&lt;CefCompletionCallback&gt;)">

Clears all active and idle connections that Chromium currently has.
This is only recommended if you have released all other CEF objects but
don't yet want to call CefShutdown(). If |callback| is non-NULL it will be
executed on the UI thread after completion.

</member>
        <member name="M:CefRequestContext.ClearHttpAuthCredentials(scoped_refptr&lt;CefCompletionCallback&gt;)">

Clears all HTTP authentication credentials that were added as part of
handling GetAuthCredentials. If |callback| is non-NULL it will be executed
on the UI thread after completion.

</member>
        <member name="M:CefRequestContext.ClearCertificateExceptions(scoped_refptr&lt;CefCompletionCallback&gt;)">

Clears all certificate exceptions that were added as part of handling
CefRequestHandler::OnCertificateError(). If you call this it is
recommended that you also call CloseAllConnections() or you risk not
being prompted again for server certificates if you reconnect quickly.
If |callback| is non-NULL it will be executed on the UI thread after
completion.

</member>
        <member name="M:CefRequestContext.SetPreference(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefValue&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the |value| associated with preference |name|. Returns true if the
value is set successfully and false otherwise. If |value| is NULL the
preference will be restored to its default value. If setting the
preference fails then |error| will be populated with a detailed
description of the problem. This method must be called on the browser
process UI thread.

</member>
        <member name="M:CefRequestContext.CanSetPreference(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns true if the preference with the specified |name| can be modified
using SetPreference. As one example preferences set via the command-line
usually cannot be modified. This method must be called on the browser
process UI thread.

</member>
        <member name="M:CefRequestContext.GetAllPreferences(System.Boolean)">

Returns all preferences as a dictionary. If |include_defaults| is true
then preferences currently at their default value will be included. The
returned object contains a copy of the underlying preference values and
modifications to the returned object will not modify the underlying
preference values. This method must be called on the browser process UI
thread.

</member>
        <member name="M:CefRequestContext.GetPreference(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the value for the preference with the specified |name|. Returns
NULL if the preference does not exist. The returned object contains a copy
of the underlying preference value and modifications to the returned
object will not modify the underlying preference value. This method must
be called on the browser process UI thread.

</member>
        <member name="M:CefRequestContext.HasPreference(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns true if a preference with the specified |name| exists. This method
must be called on the browser process UI thread.

</member>
        <member name="M:CefRequestContext.ClearSchemeHandlerFactories">

Clear all registered scheme handler factories. Returns false on error.
This function may be called on any thread in the browser process.

</member>
        <member name="M:CefRequestContext.RegisterSchemeHandlerFactory(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefSchemeHandlerFactory&gt;)">

Register a scheme handler factory for the specified |scheme_name| and
optional |domain_name|. An empty |domain_name| value for a standard scheme
will cause the factory to match all domain names. The |domain_name| value
will be ignored for non-standard schemes. If |scheme_name| is a built-in
scheme and no handler is returned by |factory| then the built-in scheme
handler factory will be called. If |scheme_name| is a custom scheme then
you must also implement the CefApp::OnRegisterCustomSchemes() method in
all processes. This function may be called multiple times to change or
remove the factory that matches the specified |scheme_name| and optional
|domain_name|. Returns false if an error occurs. This function may be
called on any thread in the browser process.

</member>
        <member name="M:CefRequestContext.GetCookieManager(scoped_refptr&lt;CefCompletionCallback&gt;)">

Returns the cookie manager for this object. If |callback| is non-NULL it
will be executed asnychronously on the UI thread after the manager's
storage has been initialized.

</member>
        <member name="M:CefRequestContext.GetCachePath">

Returns the cache path for this object. If empty an "incognito mode"
in-memory cache is being used.

</member>
        <member name="M:CefRequestContext.GetHandler">

Returns the handler for this context if any.

</member>
        <member name="M:CefRequestContext.IsGlobal">

Returns true if this object is the global context. The global context is
used by default when creating a browser or URL request with a NULL context
argument.

</member>
        <member name="M:CefRequestContext.IsSharingWith(scoped_refptr&lt;CefRequestContext&gt;)">

Returns true if this object is sharing the same storage as |that| object.

</member>
        <member name="M:CefRequestContext.IsSame(scoped_refptr&lt;CefRequestContext&gt;)">

Returns true if this object is pointing to the same context as |that|
object.

</member>
        <member name="M:CefRequestContext.CreateContext(scoped_refptr&lt;CefRequestContext&gt;,scoped_refptr&lt;CefRequestContextHandler&gt;)">

Creates a new context object that shares storage with |other| and uses an
optional |handler|.

</member>
        <member name="M:CefRequestContext.CreateContext(CefStructBase&lt;CefRequestContextSettingsTraits&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefRequestContextHandler&gt;)">

Creates a new context object with the specified |settings| and optional
|handler|.

</member>
        <member name="M:CefRequestContext.GetGlobalContext">

Returns the global context object.

</member>
        <member name="T:CefRequestContext">

A request context provides request handling for a set of related browser
or URL request objects. A request context can be specified when creating a
new browser via the CefBrowserHost static factory methods or when creating a
new URL request via the CefURLRequest static factory methods. Browser
objects with different request contexts will never be hosted in the same
render process. Browser objects with the same request context may or may not
be hosted in the same render process depending on the process model. Browser
objects created indirectly via the JavaScript window.open function or
targeted links will share the same render process and the same request
context as the source browser. When running in single-process mode there is
only a single render process (the main process) and so all browsers created
in single-process mode will share the same request context. This will be the
first request context passed into a CefBrowserHost static factory method and
all other request context objects will be ignored.

</member>
        <member name="M:CefResolveCallback.OnResolveCompleted(cef_errorcode_t,std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called on the UI thread after the ResolveHost request has completed.
|result| will be the result code. |resolved_ips| will be the list of
resolved IP addresses or empty if the resolution failed.

</member>
        <member name="T:CefResolveCallback">

Callback interface for CefRequestContext::ResolveHost.

</member>
        <member name="M:CefMediaSource.IsDialSource">

Returns true if this source outputs its content via DIAL.

</member>
        <member name="M:CefMediaSource.IsCastSource">

Returns true if this source outputs its content via Cast.

</member>
        <member name="M:CefMediaSource.GetId">

Returns the ID (media source URN or URL) for this source.

</member>
        <member name="T:CefMediaSource">

Represents a source from which media can be routed. Instances of this object
are retrieved via CefMediaRouter::GetSource. The methods of this class may
be called on any browser process thread unless otherwise indicated.

</member>
        <member name="M:CefMediaSinkDeviceInfoCallback.OnMediaSinkDeviceInfo(CefStructBase&lt;CefMediaSinkDeviceInfoTraits&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Method that will be executed asyncronously once device information has
been retrieved.

</member>
        <member name="T:CefMediaSinkDeviceInfoCallback">

Callback interface for CefMediaSink::GetDeviceInfo. The methods of this
class will be called on the browser process UI thread.

</member>
        <member name="M:CefMediaSink.IsCompatibleWith(scoped_refptr&lt;CefMediaSource&gt;)">

Returns true if this sink is compatible with |source|.

</member>
        <member name="M:CefMediaSink.IsDialSink">

Returns true if this sink accepts content via DIAL.

</member>
        <member name="M:CefMediaSink.IsCastSink">

Returns true if this sink accepts content via Cast.

</member>
        <member name="M:CefMediaSink.GetDeviceInfo(scoped_refptr&lt;CefMediaSinkDeviceInfoCallback&gt;)">

Asynchronously retrieves device info.

</member>
        <member name="M:CefMediaSink.GetIconType">

Returns the icon type for this sink.

</member>
        <member name="M:CefMediaSink.GetDescription">

Returns the description of this sink.

</member>
        <member name="M:CefMediaSink.GetName">

Returns the name of this sink.

</member>
        <member name="M:CefMediaSink.GetId">

Returns the ID for this sink.

</member>
        <member name="T:CefMediaSink">

Represents a sink to which media can be routed. Instances of this object are
retrieved via CefMediaObserver::OnSinks. The methods of this class may
be called on any browser process thread unless otherwise indicated.

</member>
        <member name="M:CefMediaRouteCreateCallback.OnMediaRouteCreateFinished(cef_media_route_create_result_t,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefMediaRoute&gt;)">

Method that will be executed when the route creation has finished.
|result| will be CEF_MRCR_OK if the route creation succeeded. |error| will
be a description of the error if the route creation failed. |route| is the
resulting route, or empty if the route creation failed.

</member>
        <member name="T:CefMediaRouteCreateCallback">

Callback interface for CefMediaRouter::CreateRoute. The methods of this
class will be called on the browser process UI thread.

</member>
        <member name="M:CefMediaRoute.Terminate">

Terminate this route. Will result in an asynchronous call to
CefMediaObserver::OnRoutes on all registered observers.

</member>
        <member name="M:CefMediaRoute.SendRouteMessage(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)">

Send a message over this route. |message| will be copied if necessary.

</member>
        <member name="M:CefMediaRoute.GetSink">

Returns the sink associated with this route.

</member>
        <member name="M:CefMediaRoute.GetSource">

Returns the source associated with this route.

</member>
        <member name="M:CefMediaRoute.GetId">

Returns the ID for this route.

</member>
        <member name="T:CefMediaRoute">

Represents the route between a media source and sink. Instances of this
object are created via CefMediaRouter::CreateRoute and retrieved via
CefMediaObserver::OnRoutes. Contains the status and metadata of a
routing operation. The methods of this class may be called on any browser
process thread unless otherwise indicated.

</member>
        <member name="M:CefMediaObserver.OnRouteMessageReceived(scoped_refptr&lt;CefMediaRoute&gt;,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)">

A message was recieved over |route|. |message| is only valid for
the scope of this callback and should be copied if necessary.

</member>
        <member name="M:CefMediaObserver.OnRouteStateChanged(scoped_refptr&lt;CefMediaRoute&gt;,cef_media_route_connection_state_t)">

The connection state of |route| has changed.

</member>
        <member name="M:CefMediaObserver.OnRoutes(std.vector&lt;scoped_refptr&lt;CefMediaRoute&gt;,std.allocator&lt;scoped_refptr&lt;CefMediaRoute&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

The list of available media routes has changed or
CefMediaRouter::NotifyCurrentRoutes was called.

</member>
        <member name="M:CefMediaObserver.OnSinks(std.vector&lt;scoped_refptr&lt;CefMediaSink&gt;,std.allocator&lt;scoped_refptr&lt;CefMediaSink&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

The list of available media sinks has changed or
CefMediaRouter::NotifyCurrentSinks was called.

</member>
        <member name="T:CefMediaObserver">

Implemented by the client to observe MediaRouter events and registered via
CefMediaRouter::AddObserver. The methods of this class will be called on the
browser process UI thread.

</member>
        <member name="M:CefMediaRouter.NotifyCurrentRoutes">

Trigger an asynchronous call to CefMediaObserver::OnRoutes on all
registered observers.

</member>
        <member name="M:CefMediaRouter.CreateRoute(scoped_refptr&lt;CefMediaSource&gt;,scoped_refptr&lt;CefMediaSink&gt;,scoped_refptr&lt;CefMediaRouteCreateCallback&gt;)">

Create a new route between |source| and |sink|. Source and sink must be
valid, compatible (as reported by CefMediaSink::IsCompatibleWith), and a
route between them must not already exist. |callback| will be executed
on success or failure. If route creation succeeds it will also trigger an
asynchronous call to CefMediaObserver::OnRoutes on all registered
observers.

</member>
        <member name="M:CefMediaRouter.NotifyCurrentSinks">

Trigger an asynchronous call to CefMediaObserver::OnSinks on all
registered observers.

</member>
        <member name="M:CefMediaRouter.AddObserver(scoped_refptr&lt;CefMediaObserver&gt;)">

Add an observer for MediaRouter events. The observer will remain
registered until the returned Registration object is destroyed.

</member>
        <member name="M:CefMediaRouter.GetGlobalMediaRouter(scoped_refptr&lt;CefCompletionCallback&gt;)">

Returns the MediaRouter object associated with the global request context.
If |callback| is non-NULL it will be executed asnychronously on the UI
thread after the manager's storage has been initialized. Equivalent to
calling CefRequestContext::GetGlobalContext()-&gt;GetMediaRouter().

</member>
        <member name="T:CefMediaRouter">

Supports discovery of and communication with media devices on the local
network via the Cast and DIAL protocols. The methods of this class may be
called on any browser process thread unless otherwise indicated.

</member>
        <member name="M:CefExtensionHandler.GetExtensionResource(scoped_refptr&lt;CefExtension&gt;,scoped_refptr&lt;CefBrowser&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefGetExtensionResourceCallback&gt;)">

Called to retrieve an extension resource that would normally be loaded
from disk (e.g. if a file parameter is specified to
chrome.tabs.executeScript). |extension| and |browser| are the source of
the resource request. |file| is the requested relative file path. To
handle the resource request return true and execute |callback| either
synchronously or asynchronously. For the default behavior which reads the
resource from the extension directory on disk return false. Localization
substitutions will not be applied to resources handled via this method.

</member>
        <member name="M:CefExtensionHandler.CanAccessBrowser(scoped_refptr&lt;CefExtension&gt;,scoped_refptr&lt;CefBrowser&gt;,System.Boolean,scoped_refptr&lt;CefBrowser&gt;)">

Called when the tabId associated with |target_browser| is specified to an
extension API call that accepts a tabId parameter (e.g. chrome.tabs.*).
|extension| and |browser| are the source of the API call. Return true
to allow access of false to deny access. Access to incognito browsers
should not be allowed unless the source extension has incognito access
enabled, in which case |include_incognito| will be true.

</member>
        <member name="M:CefExtensionHandler.GetActiveBrowser(scoped_refptr&lt;CefExtension&gt;,scoped_refptr&lt;CefBrowser&gt;,System.Boolean)">

Called when no tabId is specified to an extension API call that accepts a
tabId parameter (e.g. chrome.tabs.*). |extension| and |browser| are the
source of the API call. Return the browser that will be acted on by the
API call or return NULL to act on |browser|. The returned browser must
share the same CefRequestContext as |browser|. Incognito browsers should
not be considered unless the source extension has incognito access
enabled, in which case |include_incognito| will be true.

</member>
        <member name="M:CefExtensionHandler.OnBeforeBrowser(scoped_refptr&lt;CefExtension&gt;,scoped_refptr&lt;CefBrowser&gt;,scoped_refptr&lt;CefBrowser&gt;,System.Int32,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,CefWindowInfo*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefClient&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStructBase&lt;CefBrowserSettingsTraits&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Called when an extension API (e.g. chrome.tabs.create) requests creation
of a new browser. |extension| and |browser| are the source of the API
call. |active_browser| may optionally be specified via the windowId
property or returned via the GetActiveBrowser() callback and provides the
default |client| and |settings| values for the new browser. |index| is the
position value optionally specified via the index property. |url| is the
URL that will be loaded in the browser. |active| is true if the new
browser should be active when opened.  To allow creation of the browser
optionally modify |windowInfo|, |client| and |settings| and return false.
To cancel creation of the browser return true. Successful creation will be
indicated by a call to CefLifeSpanHandler::OnAfterCreated. Any
modifications to |windowInfo| will be ignored if |active_browser| is
wrapped in a CefBrowserView.

</member>
        <member name="M:CefExtensionHandler.OnExtensionUnloaded(scoped_refptr&lt;CefExtension&gt;)">

Called after the CefExtension::Unload request has completed.

</member>
        <member name="M:CefExtensionHandler.OnExtensionLoaded(scoped_refptr&lt;CefExtension&gt;)">

Called if the CefRequestContext::LoadExtension request succeeds.
|extension| is the loaded extension.

</member>
        <member name="M:CefExtensionHandler.OnExtensionLoadFailed(cef_errorcode_t)">

Called if the CefRequestContext::LoadExtension request fails. |result|
will be the error code.

</member>
        <member name="T:CefExtensionHandler">

Implement this interface to handle events related to browser extensions.
The methods of this class will be called on the UI thread. See
CefRequestContext::LoadExtension for information about extension loading.

</member>
        <member name="M:CefGetExtensionResourceCallback.Cancel">

Cancel the request.

</member>
        <member name="M:CefGetExtensionResourceCallback.Continue(scoped_refptr&lt;CefStreamReader&gt;)">

Continue the request. Read the resource contents from |stream|.

</member>
        <member name="T:CefGetExtensionResourceCallback">

Callback interface used for asynchronous continuation of
CefExtensionHandler::GetExtensionResource.

</member>
        <member name="M:CefExtension.Unload">

Unload this extension if it is not an internal extension and is currently
loaded. Will result in a call to CefExtensionHandler::OnExtensionUnloaded
on success.

</member>
        <member name="M:CefExtension.IsLoaded">

Returns true if this extension is currently loaded. Must be called on the
browser process UI thread.

</member>
        <member name="M:CefExtension.GetLoaderContext">

Returns the request context that loaded this extension. Will return NULL
for internal extensions or if the extension has been unloaded. See the
CefRequestContext::LoadExtension documentation for more information about
loader contexts. Must be called on the browser process UI thread.

</member>
        <member name="M:CefExtension.GetHandler">

Returns the handler for this extension. Will return NULL for internal
extensions or if no handler was passed to
CefRequestContext::LoadExtension.

</member>
        <member name="M:CefExtension.IsSame(scoped_refptr&lt;CefExtension&gt;)">

Returns true if this object is the same extension as |that| object.
Extensions are considered the same if identifier, path and loader context
match.

</member>
        <member name="M:CefExtension.GetManifest">

Returns the extension manifest contents as a CefDictionaryValue object.
See https://developer.chrome.com/extensions/manifest for details.

</member>
        <member name="M:CefExtension.GetPath">

Returns the absolute path to the extension directory on disk. This value
will be prefixed with PK_DIR_RESOURCES if a relative path was passed to
CefRequestContext::LoadExtension.

</member>
        <member name="M:CefExtension.GetIdentifier">

Returns the unique extension identifier. This is calculated based on the
extension public key, if available, or on the extension path. See
https://developer.chrome.com/extensions/manifest/key for details.

</member>
        <member name="T:CefExtension">

Object representing an extension. Methods may be called on any thread unless
otherwise indicated.

</member>
        <member name="M:CefDeleteCookiesCallback.OnComplete(System.Int32)">

Method that will be called upon completion. |num_deleted| will be the
number of cookies that were deleted.

</member>
        <member name="T:CefDeleteCookiesCallback">

Interface to implement to be notified of asynchronous completion via
CefCookieManager::DeleteCookies().

</member>
        <member name="M:CefSetCookieCallback.OnComplete(System.Boolean)">

Method that will be called upon completion. |success| will be true if the
cookie was set successfully.

</member>
        <member name="T:CefSetCookieCallback">

Interface to implement to be notified of asynchronous completion via
CefCookieManager::SetCookie().

</member>
        <member name="M:CefCookieVisitor.Visit(CefStructBase&lt;CefCookieTraits&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Method that will be called once for each cookie. |count| is the 0-based
index for the current cookie. |total| is the total number of cookies.
Set |deleteCookie| to true to delete the cookie currently being visited.
Return false to stop visiting cookies. This method may never be called if
no cookies are found.

</member>
        <member name="T:CefCookieVisitor">

Interface to implement for visiting cookie values. The methods of this class
will always be called on the UI thread.

</member>
        <member name="M:CefCookieManager.FlushStore(scoped_refptr&lt;CefCompletionCallback&gt;)">

Flush the backing store (if any) to disk. If |callback| is non-NULL it
will be executed asnychronously on the UI thread after the flush is
complete. Returns false if cookies cannot be accessed.

</member>
        <member name="M:CefCookieManager.DeleteCookies(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefDeleteCookiesCallback&gt;)">

Delete all cookies that match the specified parameters. If both |url| and
|cookie_name| values are specified all host and domain cookies matching
both will be deleted. If only |url| is specified all host cookies (but not
domain cookies) irrespective of path will be deleted. If |url| is empty
all cookies for all hosts and domains will be deleted. If |callback| is
non-NULL it will be executed asnychronously on the UI thread after the
cookies have been deleted. Returns false if a non-empty invalid URL is
specified or if cookies cannot be accessed. Cookies can alternately be
deleted using the Visit*Cookies() methods.

</member>
        <member name="M:CefCookieManager.SetCookie(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStructBase&lt;CefCookieTraits&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefSetCookieCallback&gt;)">

Sets a cookie given a valid URL and explicit user-provided cookie
attributes. This function expects each attribute to be well-formed. It
will check for disallowed characters (e.g. the ';' character is disallowed
within the cookie value attribute) and fail without setting the cookie if
such characters are found. If |callback| is non-NULL it will be executed
asnychronously on the UI thread after the cookie has been set. Returns
false if an invalid URL is specified or if cookies cannot be accessed.

</member>
        <member name="M:CefCookieManager.VisitUrlCookies(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,scoped_refptr&lt;CefCookieVisitor&gt;)">

Visit a subset of cookies on the UI thread. The results are filtered by
the given url scheme, host, domain and path. If |includeHttpOnly| is true
HTTP-only cookies will also be included in the results. The returned
cookies are ordered by longest path, then by earliest creation date.
Returns false if cookies cannot be accessed.

</member>
        <member name="M:CefCookieManager.VisitAllCookies(scoped_refptr&lt;CefCookieVisitor&gt;)">

Visit all cookies on the UI thread. The returned cookies are ordered by
longest path, then by earliest creation date. Returns false if cookies
cannot be accessed.

</member>
        <member name="M:CefCookieManager.GetGlobalManager(scoped_refptr&lt;CefCompletionCallback&gt;)">

Returns the global cookie manager. By default data will be stored at
cef_settings_t.cache_path if specified or in memory otherwise. If
|callback| is non-NULL it will be executed asnychronously on the UI thread
after the manager's storage has been initialized. Using this method is
equivalent to calling
CefRequestContext::GetGlobalContext()-&gt;GetDefaultCookieManager().

</member>
        <member name="T:CefCookieManager">

Class used for managing cookies. The methods of this class may be called on
any thread unless otherwise indicated.

</member>
        <member name="M:CefCompletionCallback.OnComplete">

Method that will be called once the task is complete.

</member>
        <member name="T:CefCompletionCallback">

Generic callback interface used for asynchronous completion.

</member>
        <member name="M:CefCallback.Cancel">

Cancel processing.

</member>
        <member name="M:CefCallback.Continue">

Continue processing.

</member>
        <member name="T:CefCallback">

Generic callback interface used for asynchronous continuation.

</member>
        <member name="T:CefRegistration">

Generic callback interface used for managing the lifespan of a registration.

</member>
        <member name="M:CefNavigationEntry.GetSSLStatus">

Returns the SSL information for this navigation entry.

</member>
        <member name="M:CefNavigationEntry.GetHttpStatusCode">

Returns the HTTP status code for the last known successful navigation
response. May be 0 if the response has not yet been received or if the
navigation has not yet completed.

</member>
        <member name="M:CefNavigationEntry.GetCompletionTime">

Returns the time for the last known successful navigation completion. A
navigation may be completed more than once if the page is reloaded. May be
0 if the navigation has not yet completed.

</member>
        <member name="M:CefNavigationEntry.HasPostData">

Returns true if this navigation includes post data.

</member>
        <member name="M:CefNavigationEntry.GetTransitionType">

Returns the transition type which indicates what the user did to move to
this page from the previous page.

</member>
        <member name="M:CefNavigationEntry.GetTitle">

Returns the title set by the page. This value may be empty.

</member>
        <member name="M:CefNavigationEntry.GetOriginalURL">

Returns the original URL that was entered by the user before any
redirects.

</member>
        <member name="M:CefNavigationEntry.GetDisplayURL">

Returns a display-friendly version of the URL.

</member>
        <member name="M:CefNavigationEntry.GetURL">

Returns the actual URL of the page. For some pages this may be data: URL
or similar. Use GetDisplayURL() to return a display-friendly version.

</member>
        <member name="M:CefNavigationEntry.IsValid">

Returns true if this object is valid. Do not call any other methods if
this function returns false.

</member>
        <member name="T:CefNavigationEntry">

Class used to represent an entry in navigation history.

</member>
        <member name="M:CefSSLStatus.GetX509Certificate">

Returns the X.509 certificate.

</member>
        <member name="M:CefSSLStatus.GetContentStatus">

Returns a bitmask containing the page security content status.

</member>
        <member name="M:CefSSLStatus.GetSSLVersion">

Returns the SSL version used for the SSL connection.

</member>
        <member name="M:CefSSLStatus.GetCertStatus">

Returns a bitmask containing any and all problems verifying the server
certificate.

</member>
        <member name="M:CefSSLStatus.IsSecureConnection">

Returns true if the status is related to a secure SSL/TLS connection.

</member>
        <member name="T:CefSSLStatus">

Class representing the SSL information for a navigation entry.

</member>
        <member name="M:CefX509Certificate.GetPEMEncodedIssuerChain(std.vector&lt;scoped_refptr&lt;CefBinaryValue&gt;,std.allocator&lt;scoped_refptr&lt;CefBinaryValue&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the PEM encoded data for the certificate issuer chain.
If we failed to encode a certificate in the chain it is still
present in the array but is an empty string.

</member>
        <member name="M:CefX509Certificate.GetDEREncodedIssuerChain(std.vector&lt;scoped_refptr&lt;CefBinaryValue&gt;,std.allocator&lt;scoped_refptr&lt;CefBinaryValue&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the DER encoded data for the certificate issuer chain.
If we failed to encode a certificate in the chain it is still
present in the array but is an empty string.

</member>
        <member name="M:CefX509Certificate.GetIssuerChainSize">

Returns the number of certificates in the issuer chain.
If 0, the certificate is self-signed.

</member>
        <member name="M:CefX509Certificate.GetPEMEncoded">

Returns the PEM encoded data for the X.509 certificate.

</member>
        <member name="M:CefX509Certificate.GetDEREncoded">

Returns the DER encoded data for the X.509 certificate.

</member>
        <member name="M:CefX509Certificate.GetValidExpiry">

Returns the date after which the X.509 certificate is invalid.
CefBaseTime.GetTimeT() will return 0 if no date was specified.

</member>
        <member name="M:CefX509Certificate.GetValidStart">

Returns the date before which the X.509 certificate is invalid.
CefBaseTime.GetTimeT() will return 0 if no date was specified.

</member>
        <member name="M:CefX509Certificate.GetSerialNumber">

Returns the DER encoded serial number for the X.509 certificate. The value
possibly includes a leading 00 byte.

</member>
        <member name="M:CefX509Certificate.GetIssuer">

Returns the issuer of the X.509 certificate.

</member>
        <member name="M:CefX509Certificate.GetSubject">

Returns the subject of the X.509 certificate. For HTTPS server
certificates this represents the web server.  The common name of the
subject should match the host name of the web server.

</member>
        <member name="T:CefX509Certificate">

Class representing a X.509 certificate.

</member>
        <member name="M:CefX509CertPrincipal.GetDomainComponents(std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Retrieve the list of domain components.

</member>
        <member name="M:CefX509CertPrincipal.GetOrganizationUnitNames(std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Retrieve the list of organization unit names.

</member>
        <member name="M:CefX509CertPrincipal.GetOrganizationNames(std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Retrieve the list of organization names.

</member>
        <member name="M:CefX509CertPrincipal.GetStreetAddresses(std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Retrieve the list of street addresses.

</member>
        <member name="M:CefX509CertPrincipal.GetCountryName">

Returns the country name.

</member>
        <member name="M:CefX509CertPrincipal.GetStateOrProvinceName">

Returns the state or province name.

</member>
        <member name="M:CefX509CertPrincipal.GetLocalityName">

Returns the locality name.

</member>
        <member name="M:CefX509CertPrincipal.GetCommonName">

Returns the common name.

</member>
        <member name="M:CefX509CertPrincipal.GetDisplayName">

Returns a name that can be used to represent the issuer. It tries in this
order: Common Name (CN), Organization Name (O) and Organizational Unit
Name (OU) and returns the first non-empty one found.

</member>
        <member name="T:CefX509CertPrincipal">

Class representing the issuer or subject field of an X.509 certificate.

</member>
        <member name="M:CefFrame.SendProcessMessage(cef_process_id_t,scoped_refptr&lt;CefProcessMessage&gt;)">

Send a message to the specified |target_process|. Ownership of the message
contents will be transferred and the |message| reference will be
invalidated. Message delivery is not guaranteed in all cases (for example,
if the browser is closing, navigating, or if the target process crashes).
Send an ACK message back from the target process if confirmation is
required.

</member>
        <member name="M:CefFrame.CreateURLRequest(scoped_refptr&lt;CefRequest&gt;,scoped_refptr&lt;CefURLRequestClient&gt;)">

Create a new URL request that will be treated as originating from this
frame and the associated browser. This request may be intercepted by the
client via CefResourceRequestHandler or CefSchemeHandlerFactory. Use
CefURLRequest::Create instead if you do not want the request to have this
association, in which case it may be handled differently (see
documentation on that method). Requests may originate from both the
browser process and the render process.

For requests originating from the browser process:
  - POST data may only contain a single element of type PDE_TYPE_FILE or
    PDE_TYPE_BYTES.

For requests originating from the render process:
  - POST data may only contain a single element of type PDE_TYPE_BYTES.
  - If the response contains Content-Disposition or Mime-Type header
    values that would not normally be rendered then the response may
    receive special handling inside the browser (for example, via the
    file download code path instead of the URL request code path).

The |request| object will be marked as read-only after calling this
method.

</member>
        <member name="M:CefFrame.VisitDOM(scoped_refptr&lt;CefDOMVisitor&gt;)">

Visit the DOM document. This method can only be called from the render
process.

</member>
        <member name="M:CefFrame.GetV8Context">

Get the V8 context associated with the frame. This method can only be
called from the render process.

</member>
        <member name="M:CefFrame.GetBrowser">

Returns the browser that this frame belongs to.

</member>
        <member name="M:CefFrame.GetURL">

Returns the URL currently loaded in this frame.

</member>
        <member name="M:CefFrame.GetParent">

Returns the parent of this frame or NULL if this is the main (top-level)
frame.

</member>
        <member name="M:CefFrame.GetName">

Returns the name for this frame. If the frame has an assigned name (for
example, set via the iframe "name" attribute) then that value will be
returned. Otherwise a unique name will be constructed based on the frame
parent hierarchy. The main (top-level) frame will always have an empty
name value.

</member>
        <member name="M:CefFrame.IsFocused">

Returns true if this is the focused frame.

</member>
        <member name="M:CefFrame.IsMain">

Returns true if this is the main (top-level) frame.

</member>
        <member name="M:CefFrame.ExecuteJavaScript(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">

Execute a string of JavaScript code in this frame. The |script_url|
parameter is the URL where the script in question can be found, if any.
The renderer may request this URL to show the developer the source of the
error.  The |start_line| parameter is the base line number to use for
error reporting.

</member>
        <member name="M:CefFrame.LoadURL(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Load the specified |url|.

</member>
        <member name="M:CefFrame.LoadRequest(scoped_refptr&lt;CefRequest&gt;)">

Load the request represented by the |request| object.

WARNING: This method will fail with "bad IPC message" reason
INVALID_INITIATOR_ORIGIN (213) unless you first navigate to the
request origin using some other mechanism (LoadURL, link click, etc).

</member>
        <member name="M:CefFrame.GetText(scoped_refptr&lt;CefStringVisitor&gt;)">

Retrieve this frame's display text as a string sent to the specified
visitor.

</member>
        <member name="M:CefFrame.GetSource(scoped_refptr&lt;CefStringVisitor&gt;)">

Retrieve this frame's HTML source as a string sent to the specified
visitor.

</member>
        <member name="M:CefFrame.ViewSource">

Save this frame's HTML source to a temporary file and open it in the
default text viewing application. This method can only be called from the
browser process.

</member>
        <member name="M:CefFrame.SelectAll">

Execute select all in this frame.

</member>
        <member name="M:CefFrame.Delete">

Execute delete in this frame.

</member>
        <member name="M:CefFrame.Paste">

Execute paste in this frame.

</member>
        <member name="M:CefFrame.Copy">

Execute copy in this frame.

</member>
        <member name="M:CefFrame.Cut">

Execute cut in this frame.

</member>
        <member name="M:CefFrame.Redo">

Execute redo in this frame.

</member>
        <member name="M:CefFrame.Undo">

Execute undo in this frame.

</member>
        <member name="M:CefFrame.IsValid">

True if this object is currently attached to a valid frame.

</member>
        <member name="T:CefFrame">

Class used to represent a frame in the browser window. When used in the
browser process the methods of this class may be called on any thread unless
otherwise indicated in the comments. When used in the render process the
methods of this class may only be called on the main thread.

</member>
        <member name="M:CefStringVisitor.Visit(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Method that will be executed.

</member>
        <member name="T:CefStringVisitor">

Implement this interface to receive string values asynchronously.

</member>
        <member name="M:CefPostDataElement.GetBytes(System.UInt32,System.Void*)">

Read up to |size| bytes into |bytes| and return the number of bytes
actually read.

</member>
        <member name="M:CefPostDataElement.GetBytesCount">

Return the number of bytes.

</member>
        <member name="M:CefPostDataElement.GetFile">

Return the file name.

</member>
        <member name="M:CefPostDataElement.GetType">

Return the type of this post data element.

</member>
        <member name="M:CefPostDataElement.SetToBytes(System.UInt32,System.Void!System.Runtime.CompilerServices.IsConst*)">

The post data element will represent bytes.  The bytes passed
in will be copied.

</member>
        <member name="M:CefPostDataElement.SetToFile(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

The post data element will represent a file.

</member>
        <member name="M:CefPostDataElement.SetToEmpty">

Remove all contents from the post data element.

</member>
        <member name="M:CefPostDataElement.IsReadOnly">

Returns true if this object is read-only.

</member>
        <member name="M:CefPostDataElement.Create">

Create a new CefPostDataElement object.

</member>
        <member name="D:CefPostDataElement.Type">

Post data elements may represent either bytes or files.

</member>
        <member name="T:CefPostDataElement">

Class used to represent a single element in the request post data. The
methods of this class may be called on any thread.

</member>
        <member name="M:CefPostData.RemoveElements">

Remove all existing post data elements.

</member>
        <member name="M:CefPostData.AddElement(scoped_refptr&lt;CefPostDataElement&gt;)">

Add the specified post data element.  Returns true if the add succeeds.

</member>
        <member name="M:CefPostData.RemoveElement(scoped_refptr&lt;CefPostDataElement&gt;)">

Remove the specified post data element.  Returns true if the removal
succeeds.

</member>
        <member name="M:CefPostData.GetElements(std.vector&lt;scoped_refptr&lt;CefPostDataElement&gt;,std.allocator&lt;scoped_refptr&lt;CefPostDataElement&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Retrieve the post data elements.

</member>
        <member name="M:CefPostData.GetElementCount">

Returns the number of existing post data elements.

</member>
        <member name="M:CefPostData.HasExcludedElements">

Returns true if the underlying POST data includes elements that are not
represented by this CefPostData object (for example, multi-part file
upload data). Modifying CefPostData objects with excluded elements may
result in the request failing.

</member>
        <member name="M:CefPostData.IsReadOnly">

Returns true if this object is read-only.

</member>
        <member name="M:CefPostData.Create">

Create a new CefPostData object.

</member>
        <member name="T:CefPostData">

Class used to represent post data for a web request. The methods of this
class may be called on any thread.

</member>
        <member name="M:CefRequest.GetIdentifier">

Returns the globally unique identifier for this request or 0 if not
specified. Can be used by CefResourceRequestHandler implementations in the
browser process to track a single request across multiple callbacks.

</member>
        <member name="M:CefRequest.GetTransitionType">

Get the transition type for this request. Only available in the browser
process and only applies to requests that represent a main frame or
sub-frame navigation.

</member>
        <member name="M:CefRequest.GetResourceType">

Get the resource type for this request. Only available in the browser
process.

</member>
        <member name="M:CefRequest.SetFirstPartyForCookies(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the URL to the first party for cookies used in combination with
CefURLRequest.

</member>
        <member name="M:CefRequest.GetFirstPartyForCookies">

Get the URL to the first party for cookies used in combination with
CefURLRequest.

</member>
        <member name="M:CefRequest.SetFlags(System.Int32)">

Set the flags used in combination with CefURLRequest.  See
cef_urlrequest_flags_t for supported values.

</member>
        <member name="M:CefRequest.GetFlags">

Get the flags used in combination with CefURLRequest. See
cef_urlrequest_flags_t for supported values.

</member>
        <member name="M:CefRequest.Set(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefPostData&gt;,std.multimap&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;,std.less&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;,std.allocator&lt;std.pair&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst,CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set all values at one time.

</member>
        <member name="M:CefRequest.SetHeaderByName(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

Set the header |name| to |value|. If |overwrite| is true any existing
values will be replaced with the new value. If |overwrite| is false any
existing values will not be overwritten. The Referer value cannot be set
using this method.

</member>
        <member name="M:CefRequest.GetHeaderByName(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the first header value for |name| or an empty string if not found.
Will not return the Referer value if any. Use GetHeaderMap instead if
|name| might have multiple values.

</member>
        <member name="M:CefRequest.SetHeaderMap(std.multimap&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;,std.less&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;,std.allocator&lt;std.pair&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst,CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the header values. If a Referer value exists in the header map it will
be removed and ignored.

</member>
        <member name="M:CefRequest.GetHeaderMap(std.multimap&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;,std.less&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;,std.allocator&lt;std.pair&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst,CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Get the header values. Will not include the Referer value if any.

</member>
        <member name="M:CefRequest.SetPostData(scoped_refptr&lt;CefPostData&gt;)">

Set the post data.

</member>
        <member name="M:CefRequest.GetPostData">

Get the post data.

</member>
        <member name="M:CefRequest.GetReferrerPolicy">

Get the referrer policy.

</member>
        <member name="M:CefRequest.GetReferrerURL">

Get the referrer URL.

</member>
        <member name="M:CefRequest.SetReferrer(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cef_referrer_policy_t)">

Set the referrer URL and policy. If non-empty the referrer URL must be
fully qualified with an HTTP or HTTPS scheme component. Any username,
password or ref component will be removed.

</member>
        <member name="M:CefRequest.SetMethod(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the request method type.

</member>
        <member name="M:CefRequest.GetMethod">

Get the request method type. The value will default to POST if post data
is provided and GET otherwise.

</member>
        <member name="M:CefRequest.SetURL(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the fully qualified URL.

</member>
        <member name="M:CefRequest.GetURL">

Get the fully qualified URL.

</member>
        <member name="M:CefRequest.IsReadOnly">

Returns true if this object is read-only.

</member>
        <member name="M:CefRequest.Create">

Create a new CefRequest object.

</member>
        <member name="T:CefRequest">

Class used to represent a web request. The methods of this class may be
called on any thread.

</member>
        <member name="M:CefProcessMessage.GetSharedMemoryRegion">

Returns the shared memory region.
Returns nullptr when message contains an argument list.

</member>
        <member name="M:CefProcessMessage.GetArgumentList">

Returns the list of arguments.
Returns nullptr when message contains a shared memory region.

</member>
        <member name="M:CefProcessMessage.GetName">

Returns the message name.

</member>
        <member name="M:CefProcessMessage.Copy">

Returns a writable copy of this object.
Returns nullptr when message contains a shared memory region.

</member>
        <member name="M:CefProcessMessage.IsReadOnly">

Returns true if the values of this object are read-only. Some APIs may
expose read-only objects.

</member>
        <member name="M:CefProcessMessage.IsValid">

Returns true if this object is valid. Do not call any other methods if
this function returns false.

</member>
        <member name="M:CefProcessMessage.Create(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Create a new CefProcessMessage object with the specified name.

</member>
        <member name="T:CefProcessMessage">

Class representing a message. Can be used on any process and thread.

</member>
        <member name="M:CefSharedMemoryRegion.Memory">

Returns the pointer to the memory. Returns nullptr for invalid instances.
The returned pointer is only valid for the life span of this object.

</member>
        <member name="M:CefSharedMemoryRegion.Size">

Returns the size of the mapping in bytes. Returns 0 for invalid instances.

</member>
        <member name="M:CefSharedMemoryRegion.IsValid">

Returns true if the mapping is valid.

</member>
        <member name="T:CefSharedMemoryRegion">

Class that wraps platform-dependent share memory region mapping.

</member>
        <member name="M:CefDOMNode.GetElementBounds">

Returns the bounds of the element in device pixels. Use
"window.devicePixelRatio" to convert to/from CSS pixels.

</member>
        <member name="M:CefDOMNode.GetElementInnerText">

Returns the inner text of the element.

</member>
        <member name="M:CefDOMNode.SetElementAttribute(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the value for the element attribute named |attrName|. Returns true on
success.

</member>
        <member name="M:CefDOMNode.GetElementAttributes(std.map&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;,std.less&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;,std.allocator&lt;std.pair&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst,CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns a map of all element attributes.

</member>
        <member name="M:CefDOMNode.GetElementAttribute(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the element attribute named |attrName|.

</member>
        <member name="M:CefDOMNode.HasElementAttribute(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns true if this element has an attribute named |attrName|.

</member>
        <member name="M:CefDOMNode.HasElementAttributes">

Returns true if this element has attributes.

</member>
        <member name="M:CefDOMNode.GetElementTagName">

Returns the tag name of this element.

</member>
        <member name="M:CefDOMNode.GetLastChild">

Returns the last child node.

</member>
        <member name="M:CefDOMNode.GetFirstChild">

Return the first child node.

</member>
        <member name="M:CefDOMNode.HasChildren">

Returns true if this node has child nodes.

</member>
        <member name="M:CefDOMNode.GetNextSibling">

Returns the next sibling node.

</member>
        <member name="M:CefDOMNode.GetPreviousSibling">

Returns the previous sibling node.

</member>
        <member name="M:CefDOMNode.GetParent">

Returns the parent node.

</member>
        <member name="M:CefDOMNode.GetDocument">

Returns the document associated with this node.

</member>
        <member name="M:CefDOMNode.GetAsMarkup">

Returns the contents of this node as markup.

</member>
        <member name="M:CefDOMNode.SetValue(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the value of this node. Returns true on success.

</member>
        <member name="M:CefDOMNode.GetValue">

Returns the value of this node.

</member>
        <member name="M:CefDOMNode.GetName">

Returns the name of this node.

</member>
        <member name="M:CefDOMNode.IsSame(scoped_refptr&lt;CefDOMNode&gt;)">

Returns true if this object is pointing to the same handle as |that|
object.

</member>
        <member name="M:CefDOMNode.GetFormControlElementType">

Returns the type of this form control element node.

</member>
        <member name="M:CefDOMNode.IsFormControlElement">

Returns true if this is a form control element node.

</member>
        <member name="M:CefDOMNode.IsEditable">

Returns true if this is an editable node.

</member>
        <member name="M:CefDOMNode.IsElement">

Returns true if this is an element node.

</member>
        <member name="M:CefDOMNode.IsText">

Returns true if this is a text node.

</member>
        <member name="M:CefDOMNode.GetType">

Returns the type for this node.

</member>
        <member name="T:CefDOMNode">

Class used to represent a DOM node. The methods of this class should only be
called on the render process main thread.

</member>
        <member name="M:CefDOMDocument.GetCompleteURL(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns a complete URL based on the document base URL and the specified
partial URL.

</member>
        <member name="M:CefDOMDocument.GetBaseURL">

Returns the base URL for the document.

</member>
        <member name="M:CefDOMDocument.GetSelectionAsText">

Returns the contents of this selection as text.

</member>
        <member name="M:CefDOMDocument.GetSelectionAsMarkup">

Returns the contents of this selection as markup.

</member>
        <member name="M:CefDOMDocument.GetSelectionEndOffset">

Returns the selection offset within the end node.

</member>
        <member name="M:CefDOMDocument.GetSelectionStartOffset">

Returns the selection offset within the start node.

</member>
        <member name="M:CefDOMDocument.HasSelection">

Returns true if a portion of the document is selected.

</member>
        <member name="M:CefDOMDocument.GetFocusedNode">

Returns the node that currently has keyboard focus.

</member>
        <member name="M:CefDOMDocument.GetElementById(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the document element with the specified ID value.

</member>
        <member name="M:CefDOMDocument.GetTitle">

Returns the title of an HTML document.

</member>
        <member name="M:CefDOMDocument.GetHead">

Returns the HEAD node of an HTML document.

</member>
        <member name="M:CefDOMDocument.GetBody">

Returns the BODY node of an HTML document.

</member>
        <member name="M:CefDOMDocument.GetDocument">

Returns the root document node.

</member>
        <member name="M:CefDOMDocument.GetType">

Returns the document type.

</member>
        <member name="T:CefDOMDocument">

Class used to represent a DOM document. The methods of this class should
only be called on the render process main thread thread.

</member>
        <member name="M:CefDOMVisitor.Visit(scoped_refptr&lt;CefDOMDocument&gt;)">

Method executed for visiting the DOM. The document object passed to this
method represents a snapshot of the DOM at the time this method is
executed. DOM objects are only valid for the scope of this method. Do not
keep references to or attempt to access any DOM objects outside the scope
of this method.

</member>
        <member name="T:CefDOMVisitor">

Interface to implement for visiting the DOM. The methods of this class will
be called on the render process main thread.

</member>
        <member name="M:CefDragData.HasImage">

Returns true if an image representation of drag data is available.

</member>
        <member name="M:CefDragData.GetImageHotspot">

Get the image hotspot (drag start location relative to image dimensions).

</member>
        <member name="M:CefDragData.GetImage">

Get the image representation of drag data. May return NULL if no image
representation is available.

</member>
        <member name="M:CefDragData.ClearFilenames">

Clear list of filenames.

</member>
        <member name="M:CefDragData.AddFile(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Add a file that is being dragged into the webview.

</member>
        <member name="M:CefDragData.ResetFileContents">

Reset the file contents. You should do this before calling
CefBrowserHost::DragTargetDragEnter as the web view does not allow us to
drag in this kind of data.

</member>
        <member name="M:CefDragData.SetFragmentBaseURL(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the base URL that the fragment came from.

</member>
        <member name="M:CefDragData.SetFragmentHtml(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the text/html fragment that is being dragged.

</member>
        <member name="M:CefDragData.SetFragmentText(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the plain text fragment that is being dragged.

</member>
        <member name="M:CefDragData.SetLinkMetadata(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the metadata associated with the link being dragged.

</member>
        <member name="M:CefDragData.SetLinkTitle(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the title associated with the link being dragged.

</member>
        <member name="M:CefDragData.SetLinkURL(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the link URL that is being dragged.

</member>
        <member name="M:CefDragData.GetFileNames(std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Retrieve the list of file names that are being dragged into the browser
window.

</member>
        <member name="M:CefDragData.GetFileContents(scoped_refptr&lt;CefStreamWriter&gt;)">

Write the contents of the file being dragged out of the web view into
|writer|. Returns the number of bytes sent to |writer|. If |writer| is
NULL this method will return the size of the file contents in bytes.
Call GetFileName() to get a suggested name for the file.

</member>
        <member name="M:CefDragData.GetFileName">

Return the name of the file being dragged out of the browser window.

</member>
        <member name="M:CefDragData.GetFragmentBaseURL">

Return the base URL that the fragment came from. This value is used for
resolving relative URLs and may be empty.

</member>
        <member name="M:CefDragData.GetFragmentHtml">

Return the text/html fragment that is being dragged.

</member>
        <member name="M:CefDragData.GetFragmentText">

Return the plain text fragment that is being dragged.

</member>
        <member name="M:CefDragData.GetLinkMetadata">

Return the metadata, if any, associated with the link being dragged.

</member>
        <member name="M:CefDragData.GetLinkTitle">

Return the title associated with the link being dragged.

</member>
        <member name="M:CefDragData.GetLinkURL">

Return the link URL that is being dragged.

</member>
        <member name="M:CefDragData.IsFile">

Returns true if the drag data is a file.

</member>
        <member name="M:CefDragData.IsFragment">

Returns true if the drag data is a text or html fragment.

</member>
        <member name="M:CefDragData.IsLink">

Returns true if the drag data is a link.

</member>
        <member name="M:CefDragData.IsReadOnly">

Returns true if this object is read-only.

</member>
        <member name="M:CefDragData.Clone">

Returns a copy of the current object.

</member>
        <member name="M:CefDragData.Create">

Create a new CefDragData object.

</member>
        <member name="T:CefDragData">

Class used to represent drag data. The methods of this class may be called
on any thread.

</member>
        <member name="M:CefStreamWriter.MayBlock">

Returns true if this writer performs work like accessing the file system
which may block. Used as a hint for determining the thread to access the
writer from.

</member>
        <member name="M:CefStreamWriter.Flush">

Flush the stream.

</member>
        <member name="M:CefStreamWriter.Tell">

Return the current offset position.

</member>
        <member name="M:CefStreamWriter.Seek(System.Int64,System.Int32)">

Seek to the specified offset position. |whence| may be any one of
SEEK_CUR, SEEK_END or SEEK_SET. Returns zero on success and non-zero on
failure.

</member>
        <member name="M:CefStreamWriter.Write(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32)">

Write raw binary data.

</member>
        <member name="M:CefStreamWriter.CreateForHandler(scoped_refptr&lt;CefWriteHandler&gt;)">

Create a new CefStreamWriter object for a custom handler.

</member>
        <member name="M:CefStreamWriter.CreateForFile(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Create a new CefStreamWriter object for a file.

</member>
        <member name="T:CefStreamWriter">

Class used to write data to a stream. The methods of this class may be
called on any thread.

</member>
        <member name="M:CefWriteHandler.MayBlock">

Return true if this handler performs work like accessing the file system
which may block. Used as a hint for determining the thread to access the
handler from.

</member>
        <member name="M:CefWriteHandler.Flush">

Flush the stream.

</member>
        <member name="M:CefWriteHandler.Tell">

Return the current offset position.

</member>
        <member name="M:CefWriteHandler.Seek(System.Int64,System.Int32)">

Seek to the specified offset position. |whence| may be any one of
SEEK_CUR, SEEK_END or SEEK_SET. Return zero on success and non-zero on
failure.

</member>
        <member name="M:CefWriteHandler.Write(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32)">

Write raw binary data.

</member>
        <member name="T:CefWriteHandler">

Interface the client can implement to provide a custom stream writer. The
methods of this class may be called on any thread.

</member>
        <member name="M:CefStreamReader.MayBlock">

Returns true if this reader performs work like accessing the file system
which may block. Used as a hint for determining the thread to access the
reader from.

</member>
        <member name="M:CefStreamReader.Eof">

Return non-zero if at end of file.

</member>
        <member name="M:CefStreamReader.Tell">

Return the current offset position.

</member>
        <member name="M:CefStreamReader.Seek(System.Int64,System.Int32)">

Seek to the specified offset position. |whence| may be any one of
SEEK_CUR, SEEK_END or SEEK_SET. Returns zero on success and non-zero on
failure.

</member>
        <member name="M:CefStreamReader.Read(System.Void*,System.UInt32,System.UInt32)">

Read raw binary data.

</member>
        <member name="M:CefStreamReader.CreateForHandler(scoped_refptr&lt;CefReadHandler&gt;)">

Create a new CefStreamReader object from a custom handler.

</member>
        <member name="M:CefStreamReader.CreateForData(System.Void*,System.UInt32)">

Create a new CefStreamReader object from data.

</member>
        <member name="M:CefStreamReader.CreateForFile(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Create a new CefStreamReader object from a file.

</member>
        <member name="T:CefStreamReader">

Class used to read data from a stream. The methods of this class may be
called on any thread.

</member>
        <member name="M:CefReadHandler.MayBlock">

Return true if this handler performs work like accessing the file system
which may block. Used as a hint for determining the thread to access the
handler from.

</member>
        <member name="M:CefReadHandler.Eof">

Return non-zero if at end of file.

</member>
        <member name="M:CefReadHandler.Tell">

Return the current offset position.

</member>
        <member name="M:CefReadHandler.Seek(System.Int64,System.Int32)">

Seek to the specified offset position. |whence| may be any one of
SEEK_CUR, SEEK_END or SEEK_SET. Return zero on success and non-zero on
failure.

</member>
        <member name="M:CefReadHandler.Read(System.Void*,System.UInt32,System.UInt32)">

Read raw binary data.

</member>
        <member name="T:CefReadHandler">

Interface the client can implement to provide a custom stream reader. The
methods of this class may be called on any thread.

</member>
        <member name="M:CefImage.GetAsJPEG(System.Single,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the JPEG representation that most closely matches |scale_factor|.
|quality| determines the compression level with 0 == lowest and 100 ==
highest. The JPEG format does not support alpha transparency and the alpha
channel, if any, will be discarded. |pixel_width| and |pixel_height| are
the output representation size in pixel coordinates. Returns a
CefBinaryValue containing the JPEG image data on success or NULL on
failure.

</member>
        <member name="M:CefImage.GetAsPNG(System.Single,System.Boolean,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the PNG representation that most closely matches |scale_factor|.
If |with_transparency| is true any alpha transparency in the image will be
represented in the resulting PNG data. |pixel_width| and |pixel_height|
are the output representation size in pixel coordinates. Returns a
CefBinaryValue containing the PNG image data on success or NULL on
failure.

</member>
        <member name="M:CefImage.GetAsBitmap(System.Single,cef_color_type_t,cef_alpha_type_t,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the bitmap representation that most closely matches
|scale_factor|. Only 32-bit RGBA/BGRA formats are supported. |color_type|
and |alpha_type| values specify the desired output pixel format.
|pixel_width| and |pixel_height| are the output representation size in
pixel coordinates. Returns a CefBinaryValue containing the pixel data on
success or NULL on failure.

</member>
        <member name="M:CefImage.GetRepresentationInfo(System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns information for the representation that most closely matches
|scale_factor|. |actual_scale_factor| is the actual scale factor for the
representation. |pixel_width| and |pixel_height| are the representation
size in pixel coordinates. Returns true on success.

</member>
        <member name="M:CefImage.RemoveRepresentation(System.Single)">

Removes the representation for |scale_factor|. Returns true on success.

</member>
        <member name="M:CefImage.HasRepresentation(System.Single)">

Returns true if this image contains a representation for |scale_factor|.

</member>
        <member name="M:CefImage.GetHeight">

Returns the image height in density independent pixel (DIP) units.

</member>
        <member name="M:CefImage.GetWidth">

Returns the image width in density independent pixel (DIP) units.

</member>
        <member name="M:CefImage.AddJPEG(System.Single,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)">

Create a JPEG image representation for |scale_factor|. |jpeg_data| is the
image data of size |jpeg_data_size|. The JPEG format does not support
transparency so the alpha byte will be set to 0xFF for all pixels.

</member>
        <member name="M:CefImage.AddPNG(System.Single,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)">

Add a PNG image representation for |scale_factor|. |png_data| is the image
data of size |png_data_size|. Any alpha transparency in the PNG data will
be maintained.

</member>
        <member name="M:CefImage.AddBitmap(System.Single,System.Int32,System.Int32,cef_color_type_t,cef_alpha_type_t,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)">

Add a bitmap image representation for |scale_factor|. Only 32-bit
RGBA/BGRA formats are supported. |pixel_width| and |pixel_height| are the
bitmap representation size in pixel coordinates. |pixel_data| is the array
of pixel data and should be |pixel_width| x |pixel_height| x 4 bytes in
size. |color_type| and |alpha_type| values specify the pixel format.

</member>
        <member name="M:CefImage.IsSame(scoped_refptr&lt;CefImage&gt;)">

Returns true if this Image and |that| Image share the same underlying
storage. Will also return true if both images are empty.

</member>
        <member name="M:CefImage.IsEmpty">

Returns true if this Image is empty.

</member>
        <member name="M:CefImage.CreateImage">

Create a new CefImage. It will initially be empty. Use the Add*() methods
to add representations at different scale factors.

</member>
        <member name="T:CefImage">

Container for a single image represented at different scale factors. All
image representations should be the same size in density independent pixel
(DIP) units. For example, if the image at scale factor 1.0 is 100x100 pixels
then the image at scale factor 2.0 should be 200x200 pixels -- both images
will display with a DIP size of 100x100 units. The methods of this class can
be called on any browser process thread.

</member>
        <member name="M:CefListValue.SetList(System.UInt32,scoped_refptr&lt;CefListValue&gt;)">

Sets the value at the specified index as type list. Returns true if the
value was set successfully. If |value| is currently owned by another
object then the value will be copied and the |value| reference will not
change. Otherwise, ownership will be transferred to this object and the
|value| reference will be invalidated.

</member>
        <member name="M:CefListValue.SetDictionary(System.UInt32,scoped_refptr&lt;CefDictionaryValue&gt;)">

Sets the value at the specified index as type dict. Returns true if the
value was set successfully. If |value| is currently owned by another
object then the value will be copied and the |value| reference will not
change. Otherwise, ownership will be transferred to this object and the
|value| reference will be invalidated.

</member>
        <member name="M:CefListValue.SetBinary(System.UInt32,scoped_refptr&lt;CefBinaryValue&gt;)">

Sets the value at the specified index as type binary. Returns true if the
value was set successfully. If |value| is currently owned by another
object then the value will be copied and the |value| reference will not
change. Otherwise, ownership will be transferred to this object and the
|value| reference will be invalidated.

</member>
        <member name="M:CefListValue.SetString(System.UInt32,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Sets the value at the specified index as type string. Returns true if the
value was set successfully.

</member>
        <member name="M:CefListValue.SetDouble(System.UInt32,System.Double)">

Sets the value at the specified index as type double. Returns true if the
value was set successfully.

</member>
        <member name="M:CefListValue.SetInt(System.UInt32,System.Int32)">

Sets the value at the specified index as type int. Returns true if the
value was set successfully.

</member>
        <member name="M:CefListValue.SetBool(System.UInt32,System.Boolean)">

Sets the value at the specified index as type bool. Returns true if the
value was set successfully.

</member>
        <member name="M:CefListValue.SetNull(System.UInt32)">

Sets the value at the specified index as type null. Returns true if the
value was set successfully.

</member>
        <member name="M:CefListValue.SetValue(System.UInt32,scoped_refptr&lt;CefValue&gt;)">

Sets the value at the specified index. Returns true if the value was set
successfully. If |value| represents simple data then the underlying data
will be copied and modifications to |value| will not modify this object.
If |value| represents complex data (binary, dictionary or list) then the
underlying data will be referenced and modifications to |value| will
modify this object.

</member>
        <member name="M:CefListValue.GetList(System.UInt32)">

Returns the value at the specified index as type list. The returned
value will reference existing data and modifications to the value will
modify this object.

</member>
        <member name="M:CefListValue.GetDictionary(System.UInt32)">

Returns the value at the specified index as type dictionary. The returned
value will reference existing data and modifications to the value will
modify this object.

</member>
        <member name="M:CefListValue.GetBinary(System.UInt32)">

Returns the value at the specified index as type binary. The returned
value will reference existing data.

</member>
        <member name="M:CefListValue.GetString(System.UInt32)">

Returns the value at the specified index as type string.

</member>
        <member name="M:CefListValue.GetDouble(System.UInt32)">

Returns the value at the specified index as type double.

</member>
        <member name="M:CefListValue.GetInt(System.UInt32)">

Returns the value at the specified index as type int.

</member>
        <member name="M:CefListValue.GetBool(System.UInt32)">

Returns the value at the specified index as type bool.

</member>
        <member name="M:CefListValue.GetValue(System.UInt32)">

Returns the value at the specified index. For simple types the returned
value will copy existing data and modifications to the value will not
modify this object. For complex types (binary, dictionary and list) the
returned value will reference existing data and modifications to the value
will modify this object.

</member>
        <member name="M:CefListValue.GetType(System.UInt32)">

Returns the value type at the specified index.

</member>
        <member name="M:CefListValue.Remove(System.UInt32)">

Removes the value at the specified index.

</member>
        <member name="M:CefListValue.Clear">

Removes all values. Returns true on success.

</member>
        <member name="M:CefListValue.GetSize">

Returns the number of values.

</member>
        <member name="M:CefListValue.SetSize(System.UInt32)">

Sets the number of values. If the number of values is expanded all
new value slots will default to type null. Returns true on success.

</member>
        <member name="M:CefListValue.Copy">

Returns a writable copy of this object.

</member>
        <member name="M:CefListValue.IsEqual(scoped_refptr&lt;CefListValue&gt;)">

Returns true if this object and |that| object have an equivalent
underlying value but are not necessarily the same object.

</member>
        <member name="M:CefListValue.IsSame(scoped_refptr&lt;CefListValue&gt;)">

Returns true if this object and |that| object have the same underlying
data. If true modifications to this object will also affect |that| object
and vice-versa.

</member>
        <member name="M:CefListValue.IsReadOnly">

Returns true if the values of this object are read-only. Some APIs may
expose read-only objects.

</member>
        <member name="M:CefListValue.IsOwned">

Returns true if this object is currently owned by another object.

</member>
        <member name="M:CefListValue.IsValid">

Returns true if this object is valid. This object may become invalid if
the underlying data is owned by another object (e.g. list or dictionary)
and that other object is then modified or destroyed. Do not call any other
methods if this method returns false.

</member>
        <member name="M:CefListValue.Create">

Creates a new object that is not owned by any other object.

</member>
        <member name="T:CefListValue">

Class representing a list value. Can be used on any process and thread.

</member>
        <member name="M:CefDictionaryValue.SetList(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefListValue&gt;)">

Sets the value at the specified key as type list. Returns true if the
value was set successfully. If |value| is currently owned by another
object then the value will be copied and the |value| reference will not
change. Otherwise, ownership will be transferred to this object and the
|value| reference will be invalidated.

</member>
        <member name="M:CefDictionaryValue.SetDictionary(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefDictionaryValue&gt;)">

Sets the value at the specified key as type dict. Returns true if the
value was set successfully. If |value| is currently owned by another
object then the value will be copied and the |value| reference will not
change. Otherwise, ownership will be transferred to this object and the
|value| reference will be invalidated.

</member>
        <member name="M:CefDictionaryValue.SetBinary(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefBinaryValue&gt;)">

Sets the value at the specified key as type binary. Returns true if the
value was set successfully. If |value| is currently owned by another
object then the value will be copied and the |value| reference will not
change. Otherwise, ownership will be transferred to this object and the
|value| reference will be invalidated.

</member>
        <member name="M:CefDictionaryValue.SetString(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Sets the value at the specified key as type string. Returns true if the
value was set successfully.

</member>
        <member name="M:CefDictionaryValue.SetDouble(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">

Sets the value at the specified key as type double. Returns true if the
value was set successfully.

</member>
        <member name="M:CefDictionaryValue.SetInt(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">

Sets the value at the specified key as type int. Returns true if the
value was set successfully.

</member>
        <member name="M:CefDictionaryValue.SetBool(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

Sets the value at the specified key as type bool. Returns true if the
value was set successfully.

</member>
        <member name="M:CefDictionaryValue.SetNull(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Sets the value at the specified key as type null. Returns true if the
value was set successfully.

</member>
        <member name="M:CefDictionaryValue.SetValue(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr&lt;CefValue&gt;)">

Sets the value at the specified key. Returns true if the value was set
successfully. If |value| represents simple data then the underlying data
will be copied and modifications to |value| will not modify this object.
If |value| represents complex data (binary, dictionary or list) then the
underlying data will be referenced and modifications to |value| will
modify this object.

</member>
        <member name="M:CefDictionaryValue.GetList(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the value at the specified key as type list. The returned value
will reference existing data and modifications to the value will modify
this object.

</member>
        <member name="M:CefDictionaryValue.GetDictionary(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the value at the specified key as type dictionary. The returned
value will reference existing data and modifications to the value will
modify this object.

</member>
        <member name="M:CefDictionaryValue.GetBinary(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the value at the specified key as type binary. The returned
value will reference existing data.

</member>
        <member name="M:CefDictionaryValue.GetString(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the value at the specified key as type string.

</member>
        <member name="M:CefDictionaryValue.GetDouble(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the value at the specified key as type double.

</member>
        <member name="M:CefDictionaryValue.GetInt(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the value at the specified key as type int.

</member>
        <member name="M:CefDictionaryValue.GetBool(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the value at the specified key as type bool.

</member>
        <member name="M:CefDictionaryValue.GetValue(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the value at the specified key. For simple types the returned
value will copy existing data and modifications to the value will not
modify this object. For complex types (binary, dictionary and list) the
returned value will reference existing data and modifications to the value
will modify this object.

</member>
        <member name="M:CefDictionaryValue.GetType(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns the value type for the specified key.

</member>
        <member name="M:CefDictionaryValue.Remove(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Removes the value at the specified key. Returns true is the value was
removed successfully.

</member>
        <member name="M:CefDictionaryValue.GetKeys(std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,std.allocator&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Reads all keys for this dictionary into the specified vector.

</member>
        <member name="M:CefDictionaryValue.HasKey(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Returns true if the current dictionary has a value for the given key.

</member>
        <member name="M:CefDictionaryValue.Clear">

Removes all values. Returns true on success.

</member>
        <member name="M:CefDictionaryValue.GetSize">

Returns the number of values.

</member>
        <member name="M:CefDictionaryValue.Copy(System.Boolean)">

Returns a writable copy of this object. If |exclude_empty_children| is
true any empty dictionaries or lists will be excluded from the copy.

</member>
        <member name="M:CefDictionaryValue.IsEqual(scoped_refptr&lt;CefDictionaryValue&gt;)">

Returns true if this object and |that| object have an equivalent
underlying value but are not necessarily the same object.

</member>
        <member name="M:CefDictionaryValue.IsSame(scoped_refptr&lt;CefDictionaryValue&gt;)">

Returns true if this object and |that| object have the same underlying
data. If true modifications to this object will also affect |that| object
and vice-versa.

</member>
        <member name="M:CefDictionaryValue.IsReadOnly">

Returns true if the values of this object are read-only. Some APIs may
expose read-only objects.

</member>
        <member name="M:CefDictionaryValue.IsOwned">

Returns true if this object is currently owned by another object.

</member>
        <member name="M:CefDictionaryValue.IsValid">

Returns true if this object is valid. This object may become invalid if
the underlying data is owned by another object (e.g. list or dictionary)
and that other object is then modified or destroyed. Do not call any other
methods if this method returns false.

</member>
        <member name="M:CefDictionaryValue.Create">

Creates a new object that is not owned by any other object.

</member>
        <member name="T:CefDictionaryValue">

Class representing a dictionary value. Can be used on any process and
thread.

</member>
        <member name="M:CefBinaryValue.GetData(System.Void*,System.UInt32,System.UInt32)">

Read up to |buffer_size| number of bytes into |buffer|. Reading begins at
the specified byte |data_offset|. Returns the number of bytes read.

</member>
        <member name="M:CefBinaryValue.GetSize">

Returns the data size.

</member>
        <member name="M:CefBinaryValue.Copy">

Returns a copy of this object. The data in this object will also be
copied.

</member>
        <member name="M:CefBinaryValue.IsEqual(scoped_refptr&lt;CefBinaryValue&gt;)">

Returns true if this object and |that| object have an equivalent
underlying value but are not necessarily the same object.

</member>
        <member name="M:CefBinaryValue.IsSame(scoped_refptr&lt;CefBinaryValue&gt;)">

Returns true if this object and |that| object have the same underlying
data.

</member>
        <member name="M:CefBinaryValue.IsOwned">

Returns true if this object is currently owned by another object.

</member>
        <member name="M:CefBinaryValue.IsValid">

Returns true if this object is valid. This object may become invalid if
the underlying data is owned by another object (e.g. list or dictionary)
and that other object is then modified or destroyed. Do not call any other
methods if this method returns false.

</member>
        <member name="M:CefBinaryValue.Create(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)">

Creates a new object that is not owned by any other object. The specified
|data| will be copied.

</member>
        <member name="T:CefBinaryValue">

Class representing a binary value. Can be used on any process and thread.

</member>
        <member name="M:CefValue.SetList(scoped_refptr&lt;CefListValue&gt;)">

Sets the underlying value as type list. Returns true if the value was set
successfully. This object keeps a reference to |value| and ownership of
the underlying data remains unchanged.

</member>
        <member name="M:CefValue.SetDictionary(scoped_refptr&lt;CefDictionaryValue&gt;)">

Sets the underlying value as type dict. Returns true if the value was set
successfully. This object keeps a reference to |value| and ownership of
the underlying data remains unchanged.

</member>
        <member name="M:CefValue.SetBinary(scoped_refptr&lt;CefBinaryValue&gt;)">

Sets the underlying value as type binary. Returns true if the value was
set successfully. This object keeps a reference to |value| and ownership
of the underlying data remains unchanged.

</member>
        <member name="M:CefValue.SetString(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Sets the underlying value as type string. Returns true if the value was
set successfully.

</member>
        <member name="M:CefValue.SetDouble(System.Double)">

Sets the underlying value as type double. Returns true if the value was
set successfully.

</member>
        <member name="M:CefValue.SetInt(System.Int32)">

Sets the underlying value as type int. Returns true if the value was set
successfully.

</member>
        <member name="M:CefValue.SetBool(System.Boolean)">

Sets the underlying value as type bool. Returns true if the value was set
successfully.

</member>
        <member name="M:CefValue.SetNull">

Sets the underlying value as type null. Returns true if the value was set
successfully.

</member>
        <member name="M:CefValue.GetList">

Returns the underlying value as type list. The returned reference may
become invalid if the value is owned by another object or if ownership is
transferred to another object in the future. To maintain a reference to
the value after assigning ownership to a dictionary or list pass this
object to the SetValue() method instead of passing the returned reference
to SetList().

</member>
        <member name="M:CefValue.GetDictionary">

Returns the underlying value as type dictionary. The returned reference
may become invalid if the value is owned by another object or if ownership
is transferred to another object in the future. To maintain a reference to
the value after assigning ownership to a dictionary or list pass this
object to the SetValue() method instead of passing the returned reference
to SetDictionary().

</member>
        <member name="M:CefValue.GetBinary">

Returns the underlying value as type binary. The returned reference may
become invalid if the value is owned by another object or if ownership is
transferred to another object in the future. To maintain a reference to
the value after assigning ownership to a dictionary or list pass this
object to the SetValue() method instead of passing the returned reference
to SetBinary().

</member>
        <member name="M:CefValue.GetString">

Returns the underlying value as type string.

</member>
        <member name="M:CefValue.GetDouble">

Returns the underlying value as type double.

</member>
        <member name="M:CefValue.GetInt">

Returns the underlying value as type int.

</member>
        <member name="M:CefValue.GetBool">

Returns the underlying value as type bool.

</member>
        <member name="M:CefValue.GetType">

Returns the underlying value type.

</member>
        <member name="M:CefValue.Copy">

Returns a copy of this object. The underlying data will also be copied.

</member>
        <member name="M:CefValue.IsEqual(scoped_refptr&lt;CefValue&gt;)">

Returns true if this object and |that| object have an equivalent
underlying value but are not necessarily the same object.

</member>
        <member name="M:CefValue.IsSame(scoped_refptr&lt;CefValue&gt;)">

Returns true if this object and |that| object have the same underlying
data. If true modifications to this object will also affect |that| object
and vice-versa.

</member>
        <member name="M:CefValue.IsReadOnly">

Returns true if the underlying data is read-only. Some APIs may expose
read-only objects.

</member>
        <member name="M:CefValue.IsOwned">

Returns true if the underlying data is owned by another object.

</member>
        <member name="M:CefValue.IsValid">

Returns true if the underlying data is valid. This will always be true for
simple types. For complex types (binary, dictionary and list) the
underlying data may become invalid if owned by another object (e.g. list
or dictionary) and that other object is then modified or destroyed. This
value object can be re-used by calling Set*() even if the underlying data
is invalid.

</member>
        <member name="M:CefValue.Create">

Creates a new object.

</member>
        <member name="T:CefValue">

Class that wraps other data value types. Complex types (binary, dictionary
and list) will be referenced but not owned by this object. Can be used on
any process and thread.

</member>
        <member name="M:CefDevToolsMessageObserver.OnDevToolsAgentDetached(scoped_refptr&lt;CefBrowser&gt;)">

Method that will be called when the DevTools agent has detached. |browser|
is the originating browser instance. Any method results that were pending
before the agent became detached will not be delivered, and any active
event subscriptions will be canceled.

</member>
        <member name="M:CefDevToolsMessageObserver.OnDevToolsAgentAttached(scoped_refptr&lt;CefBrowser&gt;)">

Method that will be called when the DevTools agent has attached. |browser|
is the originating browser instance. This will generally occur in response
to the first message sent while the agent is detached.

</member>
        <member name="M:CefDevToolsMessageObserver.OnDevToolsEvent(scoped_refptr&lt;CefBrowser&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)">

Method that will be called on receipt of a DevTools protocol event.
|browser| is the originating browser instance. |method| is the "method"
value. |params| is the UTF8-encoded JSON "params" dictionary value (which
may be empty). |params| is only valid for the scope of this callback and
should be copied if necessary. See the OnDevToolsMessage documentation for
additional details on |params| contents.

</member>
        <member name="M:CefDevToolsMessageObserver.OnDevToolsMethodResult(scoped_refptr&lt;CefBrowser&gt;,System.Int32,System.Boolean,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)">

Method that will be called after attempted execution of a DevTools
protocol method. |browser| is the originating browser instance.
|message_id| is the "id" value that identifies the originating method call
message. If the method succeeded |success| will be true and |result| will
be the UTF8-encoded JSON "result" dictionary value (which may be empty).
If the method failed |success| will be false and |result| will be the
UTF8-encoded JSON "error" dictionary value. |result| is only valid for the
scope of this callback and should be copied if necessary. See the
OnDevToolsMessage documentation for additional details on |result|
contents.

</member>
        <member name="M:CefDevToolsMessageObserver.OnDevToolsMessage(scoped_refptr&lt;CefBrowser&gt;,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)">

Method that will be called on receipt of a DevTools protocol message.
|browser| is the originating browser instance. |message| is a UTF8-encoded
JSON dictionary representing either a method result or an event. |message|
is only valid for the scope of this callback and should be copied if
necessary. Return true if the message was handled or false if the message
should be further processed and passed to the OnDevToolsMethodResult or
OnDevToolsEvent methods as appropriate.

Method result dictionaries include an "id" (int) value that identifies the
orginating method call sent from CefBrowserHost::SendDevToolsMessage, and
optionally either a "result" (dictionary) or "error" (dictionary) value.
The "error" dictionary will contain "code" (int) and "message" (string)
values. Event dictionaries include a "method" (string) value and
optionally a "params" (dictionary) value. See the DevTools protocol
documentation at https://chromedevtools.github.io/devtools-protocol/ for
details of supported method calls and the expected "result" or "params"
dictionary contents. JSON dictionaries can be parsed using the
CefParseJSON function if desired, however be aware of performance
considerations when parsing large messages (some of which may exceed 1MB
in size).

</member>
        <member name="T:CefDevToolsMessageObserver">

Callback interface for CefBrowserHost::AddDevToolsMessageObserver. The
methods of this class will be called on the browser process UI thread.

</member>
        <member name="M:CefWindowInfo.SetAsWindowless(HWND__*)">

Create the browser using windowless (off-screen) rendering. No window
will be created for the browser and all rendering will occur via the
CefRenderHandler interface. The |parent| value will be used to identify
monitor info and to act as the parent window for dialogs, context menus,
etc. If |parent| is not provided then the main screen monitor will be used
and some functionality that requires a parent window may not function
correctly. In order to create windowless browsers the
CefSettings.windowless_rendering_enabled value must be set to true.
Transparent painting is enabled by default but can be disabled by setting
CefBrowserSettings.background_color to an opaque value.

</member>
        <member name="M:CefWindowInfo.SetAsPopup(HWND__*,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Create the browser as a popup window.

</member>
        <member name="M:CefWindowInfo.SetAsChild(HWND__*,CefRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Create the browser as a child window.

</member>
        <member name="T:CefWindowInfo">

Class representing window information.

</member>
        <member name="T:CefMainArgs">

Class representing CefExecuteProcess arguments.

</member>
        <member name="T:CefAudioParameters">

Class representing CefAudioParameters settings

</member>
        <member name="T:CefCompositionUnderline">

Class representing IME composition underline.

</member>
        <member name="T:CefBoxLayoutSettings">

Class representing CefBoxLayout settings.

</member>
        <member name="T:CefCursorInfo">

Class representing cursor information.

</member>
        <member name="T:CefTouchHandleState">

Class representing the state of a touch handle.

</member>
        <member name="T:CefPopupFeatures">

Class representing popup window features.

</member>
        <member name="T:CefTouchEvent">

Class representing a touch event.

</member>
        <member name="T:CefMouseEvent">

Class representing a mouse event.

</member>
        <member name="T:CefKeyEvent">

Class representing a a keyboard event.

</member>
        <member name="T:CefScreenInfo">

Class representing the virtual screen information for use when window
rendering is disabled.

</member>
        <member name="T:CefDraggableRegion">

Class representing a draggable region.

</member>
        <member name="T:CefInsets">

Class representing insets.

</member>
        <member name="T:CefRange">

Class representing a range.

</member>
        <member name="T:CefSize">

Class representing a size.

</member>
        <member name="M:CefRect.Contains(System.Int32,System.Int32)">

Returns true if the point identified by point_x and point_y falls inside
this rectangle.  The point (x, y) is inside the rectangle, but the
point (x + width, y + height) is not.

</member>
        <member name="T:CefRect">

Class representing a rectangle.

</member>
        <member name="T:CefPoint">

Class representing a point.

</member>
        <member name="F:CEF_TEST_CERT_EXPIRED">
Expired certificate. Loads the "expired_cert.pem" file.
</member>
        <member name="F:CEF_TEST_CERT_OK_DOMAIN">
Valid certificate using the domain ("localhost"). Loads the
"localhost_cert.pem" file.
</member>
        <member name="F:CEF_TEST_CERT_OK_IP">
Valid certificate using the IP (127.0.0.1). Loads the "ok_cert.pem" file.
</member>
        <member name="F:CEF_PERMISSION_RESULT_IGNORE">

Ignore the permission request. If the prompt remains unhandled (e.g.
OnShowPermissionPrompt returns false and there is no default permissions
UI) then any related promises may remain unresolved.

</member>
        <member name="F:CEF_PERMISSION_RESULT_DISMISS">

Dismiss the permission request as an explicit user action.

</member>
        <member name="F:CEF_PERMISSION_RESULT_DENY">

Deny the permission request as an explicit user action.

</member>
        <member name="F:CEF_PERMISSION_RESULT_ACCEPT">

Accept the permission request as an explicit user action.

</member>
        <member name="F:CEF_MEDIA_PERMISSION_DESKTOP_VIDEO_CAPTURE">

Desktop video capture permission.

</member>
        <member name="F:CEF_MEDIA_PERMISSION_DESKTOP_AUDIO_CAPTURE">

Desktop audio capture permission.

</member>
        <member name="F:CEF_MEDIA_PERMISSION_DEVICE_VIDEO_CAPTURE">

Device video capture permission.

</member>
        <member name="F:CEF_MEDIA_PERMISSION_DEVICE_AUDIO_CAPTURE">

Device audio capture permission.

</member>
        <member name="F:CEF_MEDIA_PERMISSION_NONE">

No permission.

</member>
        <member name="F:_cef_touch_handle_state_t.alpha">

Alpha state. Only set if |flags| contains CEF_THS_FLAG_ALPHA.

</member>
        <member name="F:_cef_touch_handle_state_t.origin">

Origin state. Only set if |flags| contains CEF_THS_FLAG_ORIGIN.

</member>
        <member name="F:_cef_touch_handle_state_t.orientation">

Orientation state. Only set if |flags| contains CEF_THS_FLAG_ORIENTATION.

</member>
        <member name="F:_cef_touch_handle_state_t.enabled">

Enabled state. Only set if |flags| contains CEF_THS_FLAG_ENABLED.

</member>
        <member name="F:_cef_touch_handle_state_t.flags">

Combination of cef_touch_handle_state_flags_t values indicating what state
is set.

</member>
        <member name="F:_cef_touch_handle_state_t.touch_handle_id">

Touch handle id. Increments for each new touch handle.

</member>
        <member name="T:_cef_media_sink_device_info_t">

Device information for a MediaSink object.

</member>
        <member name="F:_cef_audio_parameters_t.frames_per_buffer">

Number of frames per buffer

</member>
        <member name="F:_cef_audio_parameters_t.sample_rate">

Sample rate
</member>
        <member name="F:_cef_audio_parameters_t.channel_layout">

Layout of the audio channels

</member>
        <member name="T:_cef_audio_parameters_t">

Structure representing the audio parameters for setting up the audio
handler.

</member>
        <member name="F:CEF_CHANNEL_LAYOUT_MAX">
Max value, must always equal the largest entry ever logged.
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_5_1_4_DOWNMIX">
Front L, Front R, Front C, LFE, Side L, Side R,
Front Height L, Front Height R, Rear Height L, Rear Height R
Will be represented as six channels (5.1) due to eight channel limit
kMaxConcurrentChannels
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_BITSTREAM">
Actual channel layout is specified in the bitstream and the actual channel
count is unknown at Chromium media pipeline level (useful for audio
pass-through mode).
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_4_1_QUAD_SIDE">
Front L, Front R, Side L, Side R, LFE
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_STEREO_AND_KEYBOARD_MIC">
Front L, Front R, Front C. Front C contains the keyboard mic audio. This
layout is only intended for input for WebRTC. The Front C channel
is stripped away in the WebRTC audio input pipeline and never seen outside
of that.
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_DISCRETE">
Channels are not explicitly mapped to speakers.
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_OCTAGONAL">
Front L, Front R, Front C, Side L, Side R, Rear L, Back R, Back C.
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_7_1_WIDE_BACK">
Front L, Front R, Front C, LFE, Back L, Back R, Front LofC, Front RofC
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_7_0_FRONT">
Front L, Front R, Front C, Side L, Side R, Front LofC, Front RofC
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_6_1_FRONT">
Stereo L, Stereo R, Side L, Side R, Front LofC, Front RofC, LFE
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_6_1_BACK">
Stereo L, Stereo R, Front C, LFE, Back L, Back R, Rear Center
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_6_1">
Stereo L, Stereo R, Front C, LFE, Side L, Side R, Rear Center
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_HEXAGONAL">
Stereo L, Stereo R, Front C, Rear L, Rear R, Rear C
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_6_0_FRONT">
Stereo L, Stereo R, Side L, Side R, Front LofC, Front RofC
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_6_0">
Stereo L, Stereo R, Front C, Side L, Side R, Back C
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_4_1">
Stereo L, Stereo R, Front C, Rear C, LFE
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_3_1">
Stereo L, Stereo R, Front C, LFE
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_2POINT1">
Stereo L, Stereo R, LFE
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_STEREO_DOWNMIX">
Stereo L, Stereo R
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_7_1_WIDE">
Front L, Front R, Front C, LFE, Side L, Side R, Front LofC, Front RofC
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_7_1">
Front L, Front R, Front C, LFE, Side L, Side R, Back L, Back R
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_7_0">
Front L, Front R, Front C, Side L, Side R, Back L, Back R
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_5_1_BACK">
Front L, Front R, Front C, LFE, Back L, Back R
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_5_0_BACK">
Front L, Front R, Front C, Back L, Back R
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_5_1">
Front L, Front R, Front C, LFE, Side L, Side R
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_5_0">
Front L, Front R, Front C, Side L, Side R
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_QUAD">
Front L, Front R, Back L, Back R
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_2_2">
Front L, Front R, Side L, Side R
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_4_0">
Front L, Front R, Front C, Back C
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_SURROUND">
Front L, Front R, Front C
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_2_1">
Front L, Front R, Back C
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_STEREO">
Front L, Front R
</member>
        <member name="F:CEF_CHANNEL_LAYOUT_MONO">
Front C
</member>
        <member name="F:_cef_composition_underline_t.style">

Style.

</member>
        <member name="F:_cef_composition_underline_t.thick">

Set to true (1) for thick underline.

</member>
        <member name="F:_cef_composition_underline_t.background_color">

Background color.

</member>
        <member name="F:_cef_composition_underline_t.color">

Text color.

</member>
        <member name="F:_cef_composition_underline_t.range">

Underline character range.

</member>
        <member name="T:_cef_composition_underline_t">

Structure representing IME composition underline information. This is a thin
wrapper around Blink's WebCompositionUnderline class and should be kept in
sync with that.

</member>
        <member name="T:_cef_range_t">

Structure representing a range.

</member>
        <member name="F:CEF_SCHEME_OPTION_FETCH_ENABLED">

If CEF_SCHEME_OPTION_FETCH_ENABLED is set the scheme can perform Fetch API
requests.

</member>
        <member name="F:CEF_SCHEME_OPTION_CSP_BYPASSING">

If CEF_SCHEME_OPTION_CSP_BYPASSING is set the scheme can bypass Content-
Security-Policy (CSP) checks. This value should not be set in most cases
where CEF_SCHEME_OPTION_STANDARD is set.

</member>
        <member name="F:CEF_SCHEME_OPTION_CORS_ENABLED">

If CEF_SCHEME_OPTION_CORS_ENABLED is set the scheme can be sent CORS
requests. This value should be set in most cases where
CEF_SCHEME_OPTION_STANDARD is set.

</member>
        <member name="F:CEF_SCHEME_OPTION_SECURE">

If CEF_SCHEME_OPTION_SECURE is set the scheme will be treated with the
same security rules as those applied to "https" URLs. For example, loading
this scheme from other secure schemes will not trigger mixed content
warnings.

</member>
        <member name="F:CEF_SCHEME_OPTION_DISPLAY_ISOLATED">

If CEF_SCHEME_OPTION_DISPLAY_ISOLATED is set the scheme can only be
displayed from other content hosted with the same scheme. For example,
pages in other origins cannot create iframes or hyperlinks to URLs with
the scheme. For schemes that must be accessible from other schemes don't
set this, set CEF_SCHEME_OPTION_CORS_ENABLED, and use CORS
"Access-Control-Allow-Origin" headers to further restrict access.

</member>
        <member name="F:CEF_SCHEME_OPTION_LOCAL">

If CEF_SCHEME_OPTION_LOCAL is set the scheme will be treated with the same
security rules as those applied to "file" URLs. Normal pages cannot link
to or access local URLs. Also, by default, local URLs can only perform
XMLHttpRequest calls to the same URL (origin + path) that originated the
request. To allow XMLHttpRequest calls from a local URL to other URLs with
the same origin set the CefSettings.file_access_from_file_urls_allowed
value to true (1). To allow XMLHttpRequest calls from a local URL to all
origins set the CefSettings.universal_access_from_file_urls_allowed value
to true (1).

</member>
        <member name="F:CEF_SCHEME_OPTION_STANDARD">

If CEF_SCHEME_OPTION_STANDARD is set the scheme will be treated as a
standard scheme. Standard schemes are subject to URL canonicalization and
parsing rules as defined in the Common Internet Scheme Syntax RFC 1738
Section 3.1 available at http://www.ietf.org/rfc/rfc1738.txt
In particular, the syntax for standard scheme URLs must be of the form:
<pre>
 [scheme]://[username]:[password]@[host]:[port]/[url-path]
</pre> Standard scheme URLs must have a host component that is a fully
qualified domain name as defined in Section 3.5 of RFC 1034 [13] and
Section 2.1 of RFC 1123. These URLs will be canonicalized to
"scheme://host/path" in the simplest case and
"scheme://username:password@host:port/path" in the most explicit case. For
example, "scheme:host/path" and "scheme:///host/path" will both be
canonicalized to "scheme://host/path". The origin of a standard scheme URL
is the combination of scheme, host and port (i.e., "scheme://host:port" in
the most explicit case).
For non-standard scheme URLs only the "scheme:" component is parsed and
canonicalized. The remainder of the URL will be passed to the handler as-
is. For example, "scheme:///some%20text" will remain the same.
Non-standard scheme URLs cannot be used as a target for form submission.

</member>
        <member name="F:CEF_HORIZONTAL_ALIGNMENT_RIGHT">

Align the text's right edge with that of its display area.

</member>
        <member name="F:CEF_HORIZONTAL_ALIGNMENT_CENTER">

Align the text's center with that of its display area.

</member>
        <member name="F:CEF_HORIZONTAL_ALIGNMENT_LEFT">

Align the text's left edge with that of its display area.

</member>
        <member name="F:_cef_box_layout_settings_t.default_flex">

Default flex for views when none is specified via CefBoxLayout methods.
Using the preferred size as the basis, free space along the main axis is
distributed to views in the ratio of their flex weights. Similarly, if the
views will overflow the parent, space is subtracted in these ratios. A
flex of 0 means this view is not resized. Flex values must not be
negative.

</member>
        <member name="F:_cef_box_layout_settings_t.minimum_cross_axis_size">

Minimum cross axis size.

</member>
        <member name="F:_cef_box_layout_settings_t.cross_axis_alignment">

Specifies where along the cross axis the child views should be laid out.

</member>
        <member name="F:_cef_box_layout_settings_t.main_axis_alignment">

Specifies where along the main axis the child views should be laid out.

</member>
        <member name="F:_cef_box_layout_settings_t.between_child_spacing">

Adds additional space between child views.

</member>
        <member name="F:_cef_box_layout_settings_t.inside_border_insets">

Adds additional space around the child view area.

</member>
        <member name="F:_cef_box_layout_settings_t.inside_border_vertical_spacing">

Adds additional vertical space between the child view area and the host
view border.

</member>
        <member name="F:_cef_box_layout_settings_t.inside_border_horizontal_spacing">

Adds additional horizontal space between the child view area and the host
view border.

</member>
        <member name="F:_cef_box_layout_settings_t.horizontal">

If true (1) the layout will be horizontal, otherwise the layout will be
vertical.

</member>
        <member name="T:_cef_box_layout_settings_t">

Settings used when initializing a CefBoxLayout.

</member>
        <member name="F:CEF_CROSS_AXIS_ALIGNMENT_END">

Child views will be right-aligned.

</member>
        <member name="F:CEF_CROSS_AXIS_ALIGNMENT_CENTER">

Child views will be center-aligned.

</member>
        <member name="F:CEF_CROSS_AXIS_ALIGNMENT_START">

Child views will be left-aligned.

</member>
        <member name="F:CEF_CROSS_AXIS_ALIGNMENT_STRETCH">

Child views will be stretched to fit.

</member>
        <member name="F:CEF_MAIN_AXIS_ALIGNMENT_END">

Child views will be right-aligned.

</member>
        <member name="F:CEF_MAIN_AXIS_ALIGNMENT_CENTER">

Child views will be center-aligned.

</member>
        <member name="F:CEF_MAIN_AXIS_ALIGNMENT_START">

Child views will be left-aligned.

</member>
        <member name="F:CEF_ALPHA_TYPE_POSTMULTIPLIED">

Transparency with post-multiplied alpha component.

</member>
        <member name="F:CEF_ALPHA_TYPE_PREMULTIPLIED">

Transparency with pre-multiplied alpha component.

</member>
        <member name="F:CEF_ALPHA_TYPE_OPAQUE">

No transparency. The alpha component is ignored.

</member>
        <member name="F:CEF_COLOR_TYPE_BGRA_8888">

BGRA with 8 bits per pixel (32bits total).

</member>
        <member name="F:CEF_COLOR_TYPE_RGBA_8888">

RGBA with 8 bits per pixel (32bits total).

</member>
        <member name="F:RESPONSE_FILTER_ERROR">

An error occurred during filtering.

</member>
        <member name="F:RESPONSE_FILTER_DONE">

Some or all of the pre-filter data was read successfully and all available
filtered output has been written.

</member>
        <member name="F:RESPONSE_FILTER_NEED_MORE_DATA">

Some or all of the pre-filter data was read successfully but more data is
needed in order to continue filtering (filtered output is pending).

</member>
        <member name="F:REFERRER_POLICY_LAST_VALUE">
Always the last value in this enumeration.
</member>
        <member name="F:REFERRER_POLICY_NO_REFERRER">

Always clear the referrer regardless of the request destination.

</member>
        <member name="F:REFERRER_POLICY_ORIGIN_CLEAR_ON_TRANSITION_FROM_SECURE_TO_INSECURE">

Strip the referrer down to the origin, but clear it entirely if the
referrer value is HTTPS and the destination is HTTP.

</member>
        <member name="F:REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_CROSS_ORIGIN">

Clear the referrer when the request's referrer is cross-origin with the
request's destination.

</member>
        <member name="F:REFERRER_POLICY_ORIGIN">

Strip the referrer down to the origin regardless of the redirect location.

</member>
        <member name="F:REFERRER_POLICY_NEVER_CLEAR_REFERRER">

Never change the referrer.

</member>
        <member name="F:REFERRER_POLICY_ORIGIN_ONLY_ON_TRANSITION_CROSS_ORIGIN">

Strip the referrer down to an origin when the origin of the referrer is
different from the destination's origin.

</member>
        <member name="F:REFERRER_POLICY_REDUCE_REFERRER_GRANULARITY_ON_TRANSITION_CROSS_ORIGIN">

A slight variant on CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE:
If the request destination is HTTP, an HTTPS referrer will be cleared. If
the request's destination is cross-origin with the referrer (but does not
downgrade), the referrer's granularity will be stripped down to an origin
rather than a full URL. Same-origin requests will send the full referrer.

</member>
        <member name="F:REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE">

Clear the referrer header if the header value is HTTPS but the request
destination is HTTP. This is the default behavior.

</member>
        <member name="F:_cef_pdf_print_settings_t.backgrounds_enabled">

Set to true (1) to print background graphics or false (0) to not print
background graphics.

</member>
        <member name="F:_cef_pdf_print_settings_t.landscape">

Set to true (1) for landscape mode or false (0) for portrait mode.

</member>
        <member name="F:_cef_pdf_print_settings_t.selection_only">

Set to true (1) to print the selection only or false (0) to print all.

</member>
        <member name="F:_cef_pdf_print_settings_t.header_footer_enabled">

Set to true (1) to print headers and footers or false (0) to not print
headers and footers.

</member>
        <member name="F:_cef_pdf_print_settings_t.margin_type">

Margin type.

</member>
        <member name="F:_cef_pdf_print_settings_t.margin_top">

Margins in points. Only used if |margin_type| is set to
PDF_PRINT_MARGIN_CUSTOM.

</member>
        <member name="F:_cef_pdf_print_settings_t.scale_factor">

The percentage to scale the PDF by before printing (e.g. 50 is 50%).
If this value is less than or equal to zero the default value of 100
will be used.

</member>
        <member name="F:_cef_pdf_print_settings_t.page_width">

Output page size in microns. If either of these values is less than or
equal to zero then the default paper size (A4) will be used.

</member>
        <member name="F:_cef_pdf_print_settings_t.header_footer_url">

URL to display in the footer. Only used if |header_footer_enabled| is set
to true (1).

</member>
        <member name="F:_cef_pdf_print_settings_t.header_footer_title">

Page title to display in the header. Only used if |header_footer_enabled|
is set to true (1).

</member>
        <member name="T:_cef_pdf_print_settings_t">

Structure representing PDF print settings.

</member>
        <member name="F:PDF_PRINT_MARGIN_CUSTOM">

Custom margins using the |margin_*| values from cef_pdf_print_settings_t.

</member>
        <member name="F:PDF_PRINT_MARGIN_MINIMUM">

Minimum margins.

</member>
        <member name="F:PDF_PRINT_MARGIN_NONE">

No margins.

</member>
        <member name="F:PDF_PRINT_MARGIN_DEFAULT">

Default margins.

</member>
        <member name="F:JSON_WRITER_PRETTY_PRINT">

Return a slightly nicer formatted json string (pads with whitespace to
help with readability).

</member>
        <member name="F:JSON_WRITER_OMIT_DOUBLE_TYPE_PRESERVATION">

This option instructs the writer to write doubles that have no fractional
part as a normal integer (i.e., without using exponential notation
or appending a '.0') as long as the value is within the range of a
64-bit int.

</member>
        <member name="F:JSON_WRITER_OMIT_BINARY_VALUES">

This option instructs the writer that if a Binary value is encountered,
the value (and key if within a dictionary) will be omitted from the
output, and success will be returned. Otherwise, if a binary value is
encountered, failure will be returned.

</member>
        <member name="F:JSON_WRITER_DEFAULT">

Default behavior.

</member>
        <member name="F:JSON_PARSER_ALLOW_TRAILING_COMMAS">

Allows commas to exist after the last element in structures.

</member>
        <member name="F:JSON_PARSER_RFC">

Parses the input strictly according to RFC 4627. See comments in
Chromium's base/json/json_reader.h file for known limitations/
deviations from the RFC.

</member>
        <member name="F:UU_REPLACE_PLUS_WITH_SPACE">

URL queries use "+" for space. This flag controls that replacement.

</member>
        <member name="F:UU_PATH_SEPARATORS">

Unescapes '/' and '\\'. If these characters were unescaped, the resulting
URL won't be the same as the source one. Moreover, they are dangerous to
unescape in strings that will be used as file paths or names. This value
should only be used when slashes don't have special meaning, like data
URLs.

</member>
        <member name="F:UU_SPACES">

Convert %20 to spaces. In some places where we're showing URLs, we may
want this. In places where the URL may be copied and pasted out, then
you wouldn't want this since it might not be interpreted in one piece
by other applications.

</member>
        <member name="F:UU_NORMAL">

Don't unescape anything special, but all normal unescaping will happen.
This is a placeholder and can't be combined with other flags (since it's
just the absence of them). All other unescape rules imply "normal" in
addition to their special meaning. Things like escaped letters, digits,
and most symbols will get unescaped with this mode.

</member>
        <member name="F:UU_NONE">

Don't unescape anything at all.

</member>
        <member name="T:_cef_cursor_info_t">

Structure representing cursor information. |buffer| will be
|size.width|*|size.height|*4 bytes in size and represents a BGRA image with
an upper-left origin.

</member>
        <member name="F:FILE_DIALOG_SAVE">

Allows picking a nonexistent file, and prompts to overwrite if the file
already exists.

</member>
        <member name="F:FILE_DIALOG_OPEN_FOLDER">

Like Open, but selects a folder to open.

</member>
        <member name="F:FILE_DIALOG_OPEN_MULTIPLE">

Like Open, but allows picking multiple files to open.

</member>
        <member name="F:FILE_DIALOG_OPEN">

Requires that the file exists before allowing the user to pick it.

</member>
        <member name="T:_cef_popup_features_t">

Popup window features.

</member>
        <member name="F:FOCUS_SOURCE_SYSTEM">

The source is a system-generated focus event.

</member>
        <member name="F:FOCUS_SOURCE_NAVIGATION">

The source is explicit navigation via the API (LoadURL(), etc).

</member>
        <member name="F:_cef_key_event_t.focus_on_editable_field">

True if the focus is currently on an editable field on the page. This is
useful for determining if standard key events should be intercepted.

</member>
        <member name="F:_cef_key_event_t.unmodified_character">

Same as |character| but unmodified by any concurrently-held modifiers
(except shift). This is useful for working out shortcut keys.

</member>
        <member name="F:_cef_key_event_t.character">

The character generated by the keystroke.

</member>
        <member name="F:_cef_key_event_t.is_system_key">

Indicates whether the event is considered a "system key" event (see
http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx for details).
This value will always be false on non-Windows platforms.

</member>
        <member name="F:_cef_key_event_t.native_key_code">

The actual key code genenerated by the platform.

</member>
        <member name="F:_cef_key_event_t.windows_key_code">

The Windows key code for the key event. This value is used by the DOM
specification. Sometimes it comes directly from the event (i.e. on
Windows) and sometimes it's determined using a mapping function. See
WebCore/platform/chromium/KeyboardCodes.h for the list of values.

</member>
        <member name="F:_cef_key_event_t.modifiers">

Bit flags describing any pressed modifier keys. See
cef_event_flags_t for values.

</member>
        <member name="F:_cef_key_event_t.type">

The type of keyboard event.

</member>
        <member name="T:_cef_key_event_t">

Structure representing keyboard event information.

</member>
        <member name="F:KEYEVENT_CHAR">

Notification that a character was typed. Use this for text input. Key
down events may generate 0, 1, or more than one character event depending
on the key, locale, and operating system.

</member>
        <member name="F:KEYEVENT_KEYUP">

Notification that a key was released.

</member>
        <member name="F:KEYEVENT_KEYDOWN">

Notification that a key was pressed. This does not necessarily correspond
to a character depending on the key and language. Use KEYEVENT_CHAR for
character input.

</member>
        <member name="F:KEYEVENT_RAWKEYDOWN">

Notification that a key transitioned from "up" to "down".

</member>
        <member name="F:CM_MEDIATYPE_PLUGIN">

A plugin node is selected.

</member>
        <member name="F:CM_MEDIATYPE_FILE">

A file node is selected.

</member>
        <member name="F:CM_MEDIATYPE_CANVAS">

An canvas node is selected.

</member>
        <member name="F:CM_MEDIATYPE_AUDIO">

An audio node is selected.

</member>
        <member name="F:CM_MEDIATYPE_VIDEO">

A video node is selected.

</member>
        <member name="F:CM_MEDIATYPE_IMAGE">

An image node is selected.

</member>
        <member name="F:CM_MEDIATYPE_NONE">

No special node is in context.

</member>
        <member name="F:CM_TYPEFLAG_EDITABLE">

An editable element is selected.

</member>
        <member name="F:CM_TYPEFLAG_SELECTION">

There is a textual or mixed selection that is selected.

</member>
        <member name="F:CM_TYPEFLAG_MEDIA">

A media node is selected.

</member>
        <member name="F:CM_TYPEFLAG_LINK">

A link is selected.

</member>
        <member name="F:CM_TYPEFLAG_FRAME">

A subframe page is selected.

</member>
        <member name="F:CM_TYPEFLAG_PAGE">

The top page is selected.

</member>
        <member name="F:CM_TYPEFLAG_NONE">

No node is selected.

</member>
        <member name="F:EVENTFLAG_COMMAND_DOWN">
Mac OS-X command key.
</member>
        <member name="F:_cef_touch_event_t.pointer_type">

The device type that caused the event.

</member>
        <member name="F:_cef_touch_event_t.modifiers">

Bit flags describing any pressed modifier keys. See
cef_event_flags_t for values.

</member>
        <member name="F:_cef_touch_event_t.type">

The state of the touch point. Touches begin with one CEF_TET_PRESSED event
followed by zero or more CEF_TET_MOVED events and finally one
CEF_TET_RELEASED or CEF_TET_CANCELLED event. Events not respecting this
order will be ignored.

</member>
        <member name="F:_cef_touch_event_t.pressure">

The normalized pressure of the pointer input in the range of [0,1].
Set to 0 if not applicable.

</member>
        <member name="F:_cef_touch_event_t.rotation_angle">

Rotation angle in radians. Set to 0 if not applicable.

</member>
        <member name="F:_cef_touch_event_t.radius_y">

Y radius in pixels. Set to 0 if not applicable.

</member>
        <member name="F:_cef_touch_event_t.radius_x">

X radius in pixels. Set to 0 if not applicable.

</member>
        <member name="F:_cef_touch_event_t.y">

Y coordinate relative to the top side of the view.

</member>
        <member name="F:_cef_touch_event_t.x">

X coordinate relative to the left side of the view.

</member>
        <member name="F:_cef_touch_event_t.id">

Id of a touch point. Must be unique per touch, can be any number except
-1. Note that a maximum of 16 concurrent touches will be tracked; touches
beyond that will be ignored.

</member>
        <member name="T:_cef_touch_event_t">

Structure representing touch event information.

</member>
        <member name="F:_cef_mouse_event_t.modifiers">

Bit flags describing any pressed modifier keys. See
cef_event_flags_t for values.

</member>
        <member name="F:_cef_mouse_event_t.y">

Y coordinate relative to the top side of the view.

</member>
        <member name="F:_cef_mouse_event_t.x">

X coordinate relative to the left side of the view.

</member>
        <member name="T:_cef_mouse_event_t">

Structure representing mouse event information.

</member>
        <member name="F:_cef_screen_info_t.available_rect">

This is set from the rcWork member of MONITORINFOEX, to whit:
  "A RECT structure that specifies the work area rectangle of the
  display monitor that can be used by applications, expressed in
  virtual-screen coordinates. Windows uses this rectangle to
  maximize an application on the monitor. The rest of the area in
  rcMonitor contains system windows such as the task bar and side
  bars. Note that if the monitor is not the primary display monitor,
  some of the rectangle's coordinates may be negative values".
The |rect| and |available_rect| properties are used to determine the
available surface for rendering popup views.

</member>
        <member name="F:_cef_screen_info_t.rect">

This is set from the rcMonitor member of MONITORINFOEX, to whit:
  "A RECT structure that specifies the display monitor rectangle,
  expressed in virtual-screen coordinates. Note that if the monitor
  is not the primary display monitor, some of the rectangle's
  coordinates may be negative values."
The |rect| and |available_rect| properties are used to determine the
available surface for rendering popup views.

</member>
        <member name="F:_cef_screen_info_t.is_monochrome">

This can be true for black and white printers.

</member>
        <member name="F:_cef_screen_info_t.depth_per_component">

The bits per color component. This assumes that the colors are balanced
equally.

</member>
        <member name="F:_cef_screen_info_t.depth">

The screen depth in bits per pixel.

</member>
        <member name="F:_cef_screen_info_t.device_scale_factor">

Device scale factor. Specifies the ratio between physical and logical
pixels.

</member>
        <member name="T:_cef_screen_info_t">

Screen information used when window rendering is disabled. This structure is
passed as a parameter to CefRenderHandler::GetScreenInfo and should be
filled in by the client.

</member>
        <member name="F:COM_INIT_MODE_MTA">

Initialize COM using multi-threaded apartments.

</member>
        <member name="F:COM_INIT_MODE_STA">

Initialize COM using single-threaded apartments.

</member>
        <member name="F:COM_INIT_MODE_NONE">

No COM initialization.

</member>
        <member name="F:ML_TYPE_IO">

Supports tasks, timers and asynchronous IO events.

</member>
        <member name="F:ML_TYPE_UI">

Supports tasks, timers and native UI events (e.g. Windows messages).

</member>
        <member name="F:ML_TYPE_DEFAULT">

Supports tasks and timers.

</member>
        <member name="F:TP_REALTIME_AUDIO">

Suitable for low-latency, glitch-resistant audio.

</member>
        <member name="F:TP_DISPLAY">

Suitable for threads which generate data for the display (at ~60Hz).

</member>
        <member name="F:TP_NORMAL">

Default priority level.

</member>
        <member name="F:TP_BACKGROUND">

Suitable for threads that shouldn't disrupt high priority work.

</member>
        <member name="F:TID_RENDERER">

The main thread in the renderer. Used for all WebKit and V8 interaction.
Tasks may be posted to this thread after
CefRenderProcessHandler::OnWebKitInitialized but are not guaranteed to
run before sub-process termination (sub-processes may be killed at any
time without warning).

</member>
        <member name="F:TID_IO">

Used to process IPC and network messages. Do not perform blocking tasks on
this thread. All tasks posted after
CefBrowserProcessHandler::OnContextInitialized() and before CefShutdown()
are guaranteed to run.

</member>
        <member name="F:TID_PROCESS_LAUNCHER">

Used to launch and terminate browser processes.

</member>
        <member name="F:TID_FILE_USER_BLOCKING">

Used for blocking tasks like file system access that affect UI
immediately after a user interaction. All tasks posted after
CefBrowserProcessHandler::OnContextInitialized() and before CefShutdown()
are guaranteed to run.
Example: Generating data shown in the UI immediately after a click.

</member>
        <member name="F:TID_FILE_USER_VISIBLE">

Used for blocking tasks like file system access that affect UI or
responsiveness of future user interactions. Do not use if an immediate
response to a user interaction is expected. All tasks posted after
CefBrowserProcessHandler::OnContextInitialized() and before CefShutdown()
are guaranteed to run.
Examples:
- Updating the UI to reflect progress on a long task.
- Loading data that might be shown in the UI after a future user
  interaction.

</member>
        <member name="F:TID_FILE_BACKGROUND">

Used for blocking tasks like file system access where the user won't
notice if the task takes an arbitrarily long time to complete. All tasks
posted after CefBrowserProcessHandler::OnContextInitialized() and before
CefShutdown() are guaranteed to run.

</member>
        <member name="F:TID_UI">

The main thread in the browser. This will be the same as the main
application thread if CefInitialize() is called with a
CefSettings.multi_threaded_message_loop value of false. Do not perform
blocking tasks on this thread. All tasks posted after
CefBrowserProcessHandler::OnContextInitialized() and before CefShutdown()
are guaranteed to run. This thread will outlive all other CEF threads.

</member>
        <member name="F:PID_RENDERER">

Renderer process.

</member>
        <member name="F:PID_BROWSER">

Browser process.

</member>
        <member name="F:_cef_draggable_region_t.draggable">

True (1) this this region is draggable and false (0) otherwise.

</member>
        <member name="F:_cef_draggable_region_t.bounds">

Bounds of the region.

</member>
        <member name="T:_cef_draggable_region_t">
Structure representing a draggable region.

</member>
        <member name="F:UR_FAILED">

Request failed for some reason.

</member>
        <member name="F:UR_CANCELED">

Request was canceled programatically.

</member>
        <member name="F:UR_IO_PENDING">

An IO request is pending, and the caller will be informed when it is
completed.

</member>
        <member name="F:UR_SUCCESS">

Request succeeded.

</member>
        <member name="F:UR_UNKNOWN">

Unknown status.

</member>
        <member name="F:UR_FLAG_STOP_ON_REDIRECT">

If set 3XX responses will cause the fetch to halt immediately rather than
continue through the redirect.

</member>
        <member name="F:UR_FLAG_NO_RETRY_ON_5XX">

If set 5XX redirect errors will be propagated to the observer instead of
automatically re-tried. This currently only applies for requests
originated in the browser process.

</member>
        <member name="F:UR_FLAG_NO_DOWNLOAD_DATA">

If set the CefURLRequestClient::OnDownloadData method will not be called.

</member>
        <member name="F:UR_FLAG_REPORT_UPLOAD_PROGRESS">

If set upload progress events will be generated when a request has a body.

</member>
        <member name="F:UR_FLAG_ALLOW_STORED_CREDENTIALS">

If set user name, password, and cookies may be sent with the request, and
cookies may be saved from the response.

</member>
        <member name="F:UR_FLAG_DISABLE_CACHE">

If set the cache will not be used at all. Setting this value is equivalent
to specifying the "Cache-Control: no-store" request header. Setting this
value in combination with UR_FLAG_ONLY_FROM_CACHE will cause the request
to fail.

</member>
        <member name="F:UR_FLAG_ONLY_FROM_CACHE">

If set the request will fail if it cannot be served from the cache (or
some equivalent local store). Setting this value is equivalent to
specifying the "Cache-Control: only-if-cached" request header. Setting
this value in combination with UR_FLAG_SKIP_CACHE or UR_FLAG_DISABLE_CACHE
will cause the request to fail.

</member>
        <member name="F:UR_FLAG_SKIP_CACHE">

If set the cache will be skipped when handling the request. Setting this
value is equivalent to specifying the "Cache-Control: no-cache" request
header. Setting this value in combination with UR_FLAG_ONLY_FROM_CACHE
will cause the request to fail.

</member>
        <member name="F:UR_FLAG_NONE">

Default behavior.

</member>
        <member name="F:TT_QUALIFIER_MASK">

General mask defining the bits used for the qualifiers.

</member>
        <member name="F:TT_IS_REDIRECT_MASK">

Used to test whether a transition involves a redirect.

</member>
        <member name="F:TT_SERVER_REDIRECT_FLAG">

Redirects sent from the server by HTTP headers.

</member>
        <member name="F:TT_CLIENT_REDIRECT_FLAG">

Redirects caused by JavaScript or a meta refresh tag on the page.

</member>
        <member name="F:TT_CHAIN_END_FLAG">

The last transition in a redirect chain.

</member>
        <member name="F:TT_CHAIN_START_FLAG">

The beginning of a navigation chain.

</member>
        <member name="F:TT_FROM_API_FLAG">

The transition originated from an external application; the exact
definition of this is embedder dependent. Chrome runtime and
extension system only.

</member>
        <member name="F:TT_HOME_PAGE_FLAG">

User is navigating to the home page. Chrome runtime only.

</member>
        <member name="F:TT_DIRECT_LOAD_FLAG">

Loaded a URL directly via CreateBrowser, LoadURL or LoadRequest.

</member>
        <member name="F:TT_FORWARD_BACK_FLAG">

Used the Forward or Back function to navigate among browsing history.
Will be ORed to the transition type for the original load.

</member>
        <member name="F:TT_BLOCKED_FLAG">
Qualifiers.
Any of the core values above can be augmented by one or more qualifiers.
These qualifiers further define the transition.

Attempted to visit a URL but was blocked.

</member>
        <member name="F:TT_SOURCE_MASK">

General mask defining the bits used for the source values.

</member>
        <member name="F:TT_KEYWORD_GENERATED">

Corresponds to a visit generated for a keyword. See description of
TT_KEYWORD for more details. Chrome runtime only.

</member>
        <member name="F:TT_KEYWORD">

The url was generated from a replaceable keyword other than the default
search provider. If the user types a keyword (which also applies to
tab-to-search) in the omnibox this qualifier is applied to the transition
type of the generated url. TemplateURLModel then may generate an
additional visit with a transition type of TT_KEYWORD_GENERATED against
the url 'http://' + keyword. For example, if you do a tab-to-search
against wikipedia the generated url has a transition qualifer of
TT_KEYWORD, and TemplateURLModel generates a visit for 'wikipedia.org'
with a transition type of TT_KEYWORD_GENERATED. Chrome runtime only.

</member>
        <member name="F:TT_RELOAD">

Source is a "reload" of the page via the Reload function or by re-visiting
the same URL. NOTE: This is distinct from the concept of whether a
particular load uses "reload semantics" (i.e. bypasses cached data).

</member>
        <member name="F:TT_FORM_SUBMIT">

Source is a form submission by the user. NOTE: In some situations
submitting a form does not result in this transition type. This can happen
if the form uses a script to submit the contents.

</member>
        <member name="F:TT_AUTO_TOPLEVEL">

This is a toplevel navigation. This is any content that is automatically
loaded in a toplevel frame.  For example, opening a tab to show the ASH
screen saver, opening the devtools window, opening the NTP after the safe
browsing warning, opening web-based dialog boxes are examples of
AUTO_TOPLEVEL navigations. Chrome runtime only.

</member>
        <member name="F:TT_GENERATED">

User got to this page by typing in the URL bar and selecting an entry
that did not look like a URL.  For example, a match might have the URL
of a Google search result page, but appear like "Search Google for ...".
These are not quite the same as EXPLICIT navigations because the user
didn't type or see the destination URL. Chrome runtime only.
See also TT_KEYWORD.

</member>
        <member name="F:TT_MANUAL_SUBFRAME">

Source is a subframe navigation explicitly requested by the user that will
generate new navigation entries in the back/forward list. These are
probably more important than frames that were automatically loaded in
the background because the user probably cares about the fact that this
link was loaded.

</member>
        <member name="F:TT_AUTO_SUBFRAME">

Source is a subframe navigation. This is any content that is automatically
loaded in a non-toplevel frame. For example, if a page consists of several
frames containing ads, those ad URLs will have this transition type.
The user may not even realize the content in these pages is a separate
frame, so may not care about the URL.

</member>
        <member name="F:TT_AUTO_BOOKMARK">

User got to this page through a suggestion in the UI (for example, via the
destinations page). Chrome runtime only.

</member>
        <member name="F:TT_EXPLICIT">

Source is some other "explicit" navigation. This is the default value for
navigations where the actual type is unknown. See also
TT_DIRECT_LOAD_FLAG.

</member>
        <member name="F:TT_LINK">

Source is a link click or the JavaScript window.open function. This is
also the default value for requests like sub-resource loads that are not
navigations.

</member>
        <member name="F:RT_NAVIGATION_PRELOAD_SUB_FRAME">

A sub-frame service worker navigation preload request.

</member>
        <member name="F:RT_NAVIGATION_PRELOAD_MAIN_FRAME">

A main-frame service worker navigation preload request.

</member>
        <member name="F:RT_PLUGIN_RESOURCE">

A resource that a plugin requested.

</member>
        <member name="F:RT_CSP_REPORT">

A report of Content Security Policy violations.

</member>
        <member name="F:RT_SERVICE_WORKER">

Main resource of a service worker.

</member>
        <member name="F:RT_XHR">

XMLHttpRequest.

</member>
        <member name="F:RT_FAVICON">

Favicon.

</member>
        <member name="F:RT_PREFETCH">

Explicitly requested prefetch.

</member>
        <member name="F:RT_SHARED_WORKER">

Main resource of a shared worker.

</member>
        <member name="F:RT_WORKER">

Main resource of a dedicated worker.

</member>
        <member name="F:RT_MEDIA">

Media resource.

</member>
        <member name="F:RT_OBJECT">

Object (or embed) tag for a plugin, or a resource that a plugin requested.

</member>
        <member name="F:RT_SUB_RESOURCE">

Some other subresource. This is the default type if the actual type is
unknown.

</member>
        <member name="F:RT_FONT_RESOURCE">

Font.

</member>
        <member name="F:RT_IMAGE">

Image (jpg/gif/png/etc).

</member>
        <member name="F:RT_SCRIPT">

External script.

</member>
        <member name="F:RT_STYLESHEET">

CSS stylesheet.

</member>
        <member name="F:RT_SUB_FRAME">

Frame or iframe.

</member>
        <member name="F:RT_MAIN_FRAME">

Top level page.

</member>
        <member name="F:V8_PROPERTY_ATTRIBUTE_DONTDELETE">

Not configurable

</member>
        <member name="F:V8_PROPERTY_ATTRIBUTE_DONTENUM">

Not enumerable

</member>
        <member name="F:V8_PROPERTY_ATTRIBUTE_READONLY">

Not writeable

</member>
        <member name="F:V8_PROPERTY_ATTRIBUTE_NONE">

Writeable, Enumerable, Configurable

</member>
        <member name="F:WOD_NEW_PICTURE_IN_PICTURE">

Creates a new document picture-in-picture window showing a child WebView.

</member>
        <member name="F:WOD_SWITCH_TO_TAB">

Activates an existing tab containing the url, rather than navigating.
This is similar to SINGLETON_TAB, but searches across all windows from
the current profile and anonymity (instead of just the current one);
closes the current tab on switching if the current tab was the NTP with
no session history; and behaves like CURRENT_TAB instead of
NEW_FOREGROUND_TAB when no existing tab is found.

</member>
        <member name="F:WOD_IGNORE_ACTION">

Special case error condition from the renderer.

</member>
        <member name="F:WOD_OFF_THE_RECORD">

New off-the-record (incognito) window.

</member>
        <member name="F:WOD_SAVE_TO_DISK">

Alt key while clicking.

</member>
        <member name="F:WOD_NEW_WINDOW">

Shift key while clicking.

</member>
        <member name="F:WOD_NEW_POPUP">

New popup window.

</member>
        <member name="F:WOD_NEW_BACKGROUND_TAB">

Middle mouse button or meta/ctrl key while clicking.

</member>
        <member name="F:WOD_NEW_FOREGROUND_TAB">

Shift key + Middle mouse button or meta/ctrl key while clicking.

</member>
        <member name="F:WOD_SINGLETON_TAB">

Indicates that only one tab with the url should exist in the same window.

</member>
        <member name="F:WOD_CURRENT_TAB">

Current tab. This is the default in most cases.

</member>
        <member name="F:PK_DIR_RESOURCES">

Directory containing application resources. Can be configured via
CefSettings.resources_dir_path.

</member>
        <member name="F:PK_USER_DATA">

"Application Data" directory under the user profile directory on Windows
and "~/Library/Application Support" directory on MacOS.

</member>
        <member name="F:PK_LOCAL_APP_DATA">

"Local Settings\Application Data" directory under the user profile
directory on Windows.

</member>
        <member name="F:PK_FILE_MODULE">

Path and filename of the module containing the CEF code (usually the
libcef module).

</member>
        <member name="F:PK_FILE_EXE">

Path and filename of the current executable.

</member>
        <member name="F:PK_DIR_TEMP">

Temporary directory.

</member>
        <member name="F:PK_DIR_MODULE">

Directory containing PK_FILE_MODULE.

</member>
        <member name="F:PK_DIR_EXE">

Directory containing PK_FILE_EXE.

</member>
        <member name="F:PK_DIR_CURRENT">

Current directory.

</member>
        <member name="F:TS_PROCESS_OOM">

Out of memory. Some platforms may use TS_PROCESS_CRASHED instead.

</member>
        <member name="F:TS_PROCESS_CRASHED">

Segmentation fault.

</member>
        <member name="F:TS_PROCESS_WAS_KILLED">

SIGKILL or task manager kill.

</member>
        <member name="F:TS_ABNORMAL_TERMINATION">

Non-zero exit status.

</member>
        <member name="F:_cef_cookie_t.priority">

Priority.

</member>
        <member name="F:_cef_cookie_t.same_site">

Same site.

</member>
        <member name="F:_cef_cookie_t.has_expires">

The cookie expiration date is only valid if |has_expires| is true.

</member>
        <member name="F:_cef_cookie_t.last_access">

The cookie last access date. This is automatically populated by the system
on access.

</member>
        <member name="F:_cef_cookie_t.creation">

The cookie creation date. This is automatically populated by the system on
cookie creation.

</member>
        <member name="F:_cef_cookie_t.httponly">

If |httponly| is true the cookie will only be sent for HTTP requests.

</member>
        <member name="F:_cef_cookie_t.secure">

If |secure| is true the cookie will only be sent for HTTPS requests.

</member>
        <member name="F:_cef_cookie_t.path">

If |path| is non-empty only URLs at or below the path will get the cookie
value.

</member>
        <member name="F:_cef_cookie_t.domain">

If |domain| is empty a host cookie will be created instead of a domain
cookie. Domain cookies are stored with a leading "." and are visible to
sub-domains whereas host cookies are not.

</member>
        <member name="F:_cef_cookie_t.value">

The cookie value.

</member>
        <member name="F:_cef_cookie_t.name">

The cookie name.

</member>
        <member name="T:_cef_cookie_t">

Cookie information.

</member>
        <member name="F:_cef_urlparts_t.fragment">

Fragment (hash) identifier component (i.e., the string following the '#').

</member>
        <member name="F:_cef_urlparts_t.query">

Query string component (i.e., everything following the '?').

</member>
        <member name="F:_cef_urlparts_t.path">

Path component including the first slash following the host.

</member>
        <member name="F:_cef_urlparts_t.origin">

Origin contains just the scheme, host, and port from a URL. Equivalent to
clearing any username and password, replacing the path with a slash, and
clearing everything after that. This value will be empty for non-standard
URLs.

</member>
        <member name="F:_cef_urlparts_t.port">

Port number component.

</member>
        <member name="F:_cef_urlparts_t.host">

Host component. This may be a hostname, an IPv4 address or an IPv6 literal
surrounded by square brackets (e.g., "[2001:db8::1]").

</member>
        <member name="F:_cef_urlparts_t.password">

Password component.

</member>
        <member name="F:_cef_urlparts_t.username">

User name component.

</member>
        <member name="F:_cef_urlparts_t.scheme">

Scheme component not including the colon (e.g., "http").

</member>
        <member name="F:_cef_urlparts_t.spec">

The complete URL specification.

</member>
        <member name="T:_cef_urlparts_t">

URL component parts.

</member>
        <member name="F:RV_CONTINUE_ASYNC">

Continue asynchronously (usually via a callback).

</member>
        <member name="F:RV_CONTINUE">

Continue immediately.

</member>
        <member name="F:RV_CANCEL">

Cancel immediately.

</member>
        <member name="F:_cef_browser_settings_t.chrome_status_bubble">

Controls whether the Chrome status bubble will be used. Only supported
with the Chrome runtime. For details about the status bubble see
https://www.chromium.org/user-experience/status-bubble/

</member>
        <member name="F:_cef_browser_settings_t.accept_language_list">

Comma delimited ordered list of language codes without any whitespace that
will be used in the "Accept-Language" HTTP header. May be set globally
using the CefSettings.accept_language_list value. If both values are
empty then "en-US,en" will be used.

</member>
        <member name="F:_cef_browser_settings_t.background_color">
END values that map to WebPreferences settings.

Background color used for the browser before a document is loaded and when
no document color is specified. The alpha component must be either fully
opaque (0xFF) or fully transparent (0x00). If the alpha component is fully
opaque then the RGB components will be used as the background color. If
the alpha component is fully transparent for a windowed browser then the
CefSettings.background_color value will be used. If the alpha component is
fully transparent for a windowless (off-screen) browser then transparent
painting will be enabled.

</member>
        <member name="F:_cef_browser_settings_t.webgl">

Controls whether WebGL can be used. Note that WebGL requires hardware
support and may not work on all systems even when enabled. Also
configurable using the "disable-webgl" command-line switch.

</member>
        <member name="F:_cef_browser_settings_t.databases">

Controls whether databases can be used. Also configurable using the
"disable-databases" command-line switch.

</member>
        <member name="F:_cef_browser_settings_t.local_storage">

Controls whether local storage can be used. Also configurable using the
"disable-local-storage" command-line switch.

</member>
        <member name="F:_cef_browser_settings_t.tab_to_links">

Controls whether the tab key can advance focus to links. Also configurable
using the "disable-tab-to-links" command-line switch.

</member>
        <member name="F:_cef_browser_settings_t.text_area_resize">

Controls whether text areas can be resized. Also configurable using the
"disable-text-area-resize" command-line switch.

</member>
        <member name="F:_cef_browser_settings_t.image_shrink_standalone_to_fit">

Controls whether standalone images will be shrunk to fit the page. Also
configurable using the "image-shrink-standalone-to-fit" command-line
switch.

</member>
        <member name="F:_cef_browser_settings_t.image_loading">

Controls whether image URLs will be loaded from the network. A cached
image will still be rendered if requested. Also configurable using the
"disable-image-loading" command-line switch.

</member>
        <member name="F:_cef_browser_settings_t.javascript_dom_paste">

Controls whether DOM pasting is supported in the editor via
execCommand("paste"). The |javascript_access_clipboard| setting must also
be enabled. Also configurable using the "disable-javascript-dom-paste"
command-line switch.

</member>
        <member name="F:_cef_browser_settings_t.javascript_access_clipboard">

Controls whether JavaScript can access the clipboard. Also configurable
using the "disable-javascript-access-clipboard" command-line switch.

</member>
        <member name="F:_cef_browser_settings_t.javascript_close_windows">

Controls whether JavaScript can be used to close windows that were not
opened via JavaScript. JavaScript can still be used to close windows that
were opened via JavaScript or that have no back/forward history. Also
configurable using the "disable-javascript-close-windows" command-line
switch.

</member>
        <member name="F:_cef_browser_settings_t.javascript">

Controls whether JavaScript can be executed. Also configurable using the
"disable-javascript" command-line switch.

</member>
        <member name="F:_cef_browser_settings_t.remote_fonts">

Controls the loading of fonts from remote sources. Also configurable using
the "disable-remote-fonts" command-line switch.

</member>
        <member name="F:_cef_browser_settings_t.default_encoding">

Default encoding for Web content. If empty "ISO-8859-1" will be used. Also
configurable using the "default-encoding" command-line switch.

</member>
        <member name="F:_cef_browser_settings_t.standard_font_family">
BEGIN values that map to WebPreferences settings.

Font settings.

</member>
        <member name="F:_cef_browser_settings_t.windowless_frame_rate">

The maximum rate in frames per second (fps) that CefRenderHandler::OnPaint
will be called for a windowless browser. The actual fps may be lower if
the browser cannot generate frames at the requested rate. The minimum
value is 1 and the maximum value is 60 (default 30). This value can also
be changed dynamically via CefBrowserHost::SetWindowlessFrameRate.

</member>
        <member name="F:_cef_browser_settings_t.size">

Size of this structure.

</member>
        <member name="T:_cef_browser_settings_t">

Browser initialization settings. Specify NULL or 0 to get the recommended
default values. The consequences of using custom values may not be well
tested. Many of these and other settings can also configured using command-
line switches.

</member>
        <member name="F:_cef_request_context_settings_t.cookieable_schemes_list">

Comma delimited list of schemes supported by the associated
CefCookieManager. If |cookieable_schemes_exclude_defaults| is false (0)
the default schemes ("http", "https", "ws" and "wss") will also be
supported. Specifying a |cookieable_schemes_list| value and setting
|cookieable_schemes_exclude_defaults| to true (1) will disable all loading
and saving of cookies for this manager. These values will be ignored if
|cache_path| matches the CefSettings.cache_path value.

</member>
        <member name="F:_cef_request_context_settings_t.accept_language_list">

Comma delimited ordered list of language codes without any whitespace that
will be used in the "Accept-Language" HTTP header. Can be set globally
using the CefSettings.accept_language_list value or overridden on a per-
browser basis using the CefBrowserSettings.accept_language_list value. If
all values are empty then "en-US,en" will be used. This value will be
ignored if |cache_path| matches the CefSettings.cache_path value.

</member>
        <member name="F:_cef_request_context_settings_t.persist_user_preferences">

To persist user preferences as a JSON file in the cache path directory set
this value to true (1). Can be set globally using the
CefSettings.persist_user_preferences value. This value will be ignored if
|cache_path| is empty or if it matches the CefSettings.cache_path value.

</member>
        <member name="F:_cef_request_context_settings_t.persist_session_cookies">

To persist session cookies (cookies without an expiry date or validity
interval) by default when using the global cookie manager set this value
to true (1). Session cookies are generally intended to be transient and
most Web browsers do not persist them. Can be set globally using the
CefSettings.persist_session_cookies value. This value will be ignored if
|cache_path| is empty or if it matches the CefSettings.cache_path value.

</member>
        <member name="F:_cef_request_context_settings_t.cache_path">

The location where cache data for this request context will be stored on
disk. If this value is non-empty then it must be an absolute path that is
either equal to or a child directory of CefSettings.root_cache_path. If
this value is empty then browsers will be created in "incognito mode"
where in-memory caches are used for storage and no data is persisted to
disk. HTML5 databases such as localStorage will only persist across
sessions if a cache path is specified. To share the global browser cache
and related configuration set this value to match the
CefSettings.cache_path value.

</member>
        <member name="F:_cef_request_context_settings_t.size">

Size of this structure.

</member>
        <member name="T:_cef_request_context_settings_t">

Request context initialization settings. Specify NULL or 0 to get the
recommended default values.

</member>
        <member name="F:_cef_settings_t.cookieable_schemes_list">

Comma delimited list of schemes supported by the associated
CefCookieManager. If |cookieable_schemes_exclude_defaults| is false (0)
the default schemes ("http", "https", "ws" and "wss") will also be
supported. Specifying a |cookieable_schemes_list| value and setting
|cookieable_schemes_exclude_defaults| to true (1) will disable all loading
and saving of cookies for this manager. Can be overridden
for individual CefRequestContext instances via the
CefRequestContextSettings.cookieable_schemes_list and
CefRequestContextSettings.cookieable_schemes_exclude_defaults values.

</member>
        <member name="F:_cef_settings_t.accept_language_list">

Comma delimited ordered list of language codes without any whitespace that
will be used in the "Accept-Language" HTTP header. May be overridden on a
per-browser basis using the CefBrowserSettings.accept_language_list value.
If both values are empty then "en-US,en" will be used. Can be overridden
for individual CefRequestContext instances via the
CefRequestContextSettings.accept_language_list value.

</member>
        <member name="F:_cef_settings_t.background_color">

Background color used for the browser before a document is loaded and when
no document color is specified. The alpha component must be either fully
opaque (0xFF) or fully transparent (0x00). If the alpha component is fully
opaque then the RGB components will be used as the background color. If
the alpha component is fully transparent for a windowed browser then the
default value of opaque white be used. If the alpha component is fully
transparent for a windowless (off-screen) browser then transparent
painting will be enabled.

</member>
        <member name="F:_cef_settings_t.uncaught_exception_stack_size">

The number of stack trace frames to capture for uncaught exceptions.
Specify a positive value to enable the
CefRenderProcessHandler::OnUncaughtException() callback. Specify 0
(default value) and OnUncaughtException() will not be called. Also
configurable using the "uncaught-exception-stack-size" command-line
switch.

</member>
        <member name="F:_cef_settings_t.remote_debugging_port">

Set to a value between 1024 and 65535 to enable remote debugging on the
specified port. Also configurable using the "remote-debugging-port"
command-line switch. Remote debugging can be accessed by loading the
chrome://inspect page in Google Chrome. Port numbers 9222 and 9229 are
discoverable by default. Other port numbers may need to be configured via
"Discover network targets" on the Devices tab.

</member>
        <member name="F:_cef_settings_t.pack_loading_disabled">

Set to true (1) to disable loading of pack files for resources and
locales. A resource bundle handler must be provided for the browser and
render processes via CefApp::GetResourceBundleHandler() if loading of pack
files is disabled. Also configurable using the "disable-pack-loading"
command- line switch.

</member>
        <member name="F:_cef_settings_t.locales_dir_path">

The fully qualified path for the locales directory. If this value is empty
the locales directory must be located in the module directory. If this
value is non-empty then it must be an absolute path. This value is ignored
on MacOS where pack files are always loaded from the app bundle Resources
directory. Also configurable using the "locales-dir-path" command-line
switch.

</member>
        <member name="F:_cef_settings_t.resources_dir_path">

The fully qualified path for the resources directory. If this value is
empty the *.pak files must be located in the module directory on
Windows/Linux or the app bundle Resources directory on MacOS. If this
value is non-empty then it must be an absolute path. Also configurable
using the "resources-dir-path" command-line switch.

</member>
        <member name="F:_cef_settings_t.javascript_flags">

Custom flags that will be used when initializing the V8 JavaScript engine.
The consequences of using custom flags may not be well tested. Also
configurable using the "js-flags" command-line switch.

</member>
        <member name="F:_cef_settings_t.log_severity">

The log severity. Only messages of this severity level or higher will be
logged. When set to DISABLE no messages will be written to the log file,
but FATAL messages will still be output to stderr. Also configurable using
the "log-severity" command-line switch with a value of "verbose", "info",
"warning", "error", "fatal" or "disable".

</member>
        <member name="F:_cef_settings_t.log_file">

The directory and file name to use for the debug log. If empty a default
log file name and location will be used. On Windows and Linux a
"debug.log" file will be written in the main executable directory. On
MacOS a "~/Library/Logs/[app name]_debug.log" file will be written where
[app name] is the name of the main app executable. Also configurable using
the "log-file" command-line switch.

</member>
        <member name="F:_cef_settings_t.locale">

The locale string that will be passed to WebKit. If empty the default
locale of "en-US" will be used. This value is ignored on Linux where
locale is determined using environment variable parsing with the
precedence order: LANGUAGE, LC_ALL, LC_MESSAGES and LANG. Also
configurable using the "lang" command-line switch.

</member>
        <member name="F:_cef_settings_t.user_agent_product">

Value that will be inserted as the product portion of the default
User-Agent string. If empty the Chromium product version will be used. If
|userAgent| is specified this value will be ignored. Also configurable
using the "user-agent-product" command-line switch.

</member>
        <member name="F:_cef_settings_t.user_agent">

Value that will be returned as the User-Agent HTTP header. If empty the
default User-Agent string will be used. Also configurable using the
"user-agent" command-line switch.

</member>
        <member name="F:_cef_settings_t.persist_user_preferences">

To persist user preferences as a JSON file in the cache path directory set
this value to true (1). A |cache_path| value must also be specified
to enable this feature. Also configurable using the
"persist-user-preferences" command-line switch. Can be overridden for
individual CefRequestContext instances via the
CefRequestContextSettings.persist_user_preferences value.

</member>
        <member name="F:_cef_settings_t.persist_session_cookies">

To persist session cookies (cookies without an expiry date or validity
interval) by default when using the global cookie manager set this value
to true (1). Session cookies are generally intended to be transient and
most Web browsers do not persist them. A |cache_path| value must also be
specified to enable this feature. Also configurable using the
"persist-session-cookies" command-line switch. Can be overridden for
individual CefRequestContext instances via the
CefRequestContextSettings.persist_session_cookies value.

</member>
        <member name="F:_cef_settings_t.user_data_path">

The location where user data such as the Widevine CDM module and spell
checking dictionary files will be stored on disk. If this value is empty
then the default platform-specific user data directory will be used
("~/.config/cef_user_data" directory on Linux, "~/Library/Application
Support/CEF/User Data" directory on MacOS, "AppData\Local\CEF\User Data"
directory under the user profile directory on Windows). If this value is
non-empty then it must be an absolute path. When using the Chrome runtime
this value will be ignored in favor of the |root_cache_path| value.

</member>
        <member name="F:_cef_settings_t.root_cache_path">

The root directory that all CefSettings.cache_path and
CefRequestContextSettings.cache_path values must have in common. If this
value is empty and CefSettings.cache_path is non-empty then it will
default to the CefSettings.cache_path value. If this value is non-empty
then it must be an absolute path. Failure to set this value correctly may
result in the sandbox blocking read/write access to the cache_path
directory.

</member>
        <member name="F:_cef_settings_t.cache_path">

The location where data for the global browser cache will be stored on
disk. If this value is non-empty then it must be an absolute path that is
either equal to or a child directory of CefSettings.root_cache_path. If
this value is empty then browsers will be created in "incognito mode"
where in-memory caches are used for storage and no data is persisted to
disk. HTML5 databases such as localStorage will only persist across
sessions if a cache path is specified. Can be overridden for individual
CefRequestContext instances via the CefRequestContextSettings.cache_path
value. When using the Chrome runtime the "default" profile will be used if
|cache_path| and |root_cache_path| have the same value.

</member>
        <member name="F:_cef_settings_t.command_line_args_disabled">

Set to true (1) to disable configuration of browser process features using
standard CEF and Chromium command-line arguments. Configuration can still
be specified using CEF data structures or via the
CefApp::OnBeforeCommandLineProcessing() method.

</member>
        <member name="F:_cef_settings_t.windowless_rendering_enabled">

Set to true (1) to enable windowless (off-screen) rendering support. Do
not enable this value if the application does not use windowless rendering
as it may reduce rendering performance on some systems.

</member>
        <member name="F:_cef_settings_t.external_message_pump">

Set to true (1) to control browser process main (UI) thread message pump
scheduling via the CefBrowserProcessHandler::OnScheduleMessagePumpWork()
callback. This option is recommended for use in combination with the
CefDoMessageLoopWork() function in cases where the CEF message loop must
be integrated into an existing application message loop (see additional
comments and warnings on CefDoMessageLoopWork). Enabling this option is
not recommended for most users; leave this option disabled and use either
the CefRunMessageLoop() function or multi_threaded_message_loop if
possible.

</member>
        <member name="F:_cef_settings_t.multi_threaded_message_loop">

Set to true (1) to have the browser process message loop run in a separate
thread. If false (0) then the CefDoMessageLoopWork() function must be
called from your application message loop. This option is only supported
on Windows and Linux.

</member>
        <member name="F:_cef_settings_t.chrome_runtime">

Set to true (1) to enable use of the Chrome runtime in CEF. This feature
is considered experimental and is not recommended for most users at this
time. See issue #2969 for details.

</member>
        <member name="F:_cef_settings_t.main_bundle_path">

The path to the main bundle on macOS. If this value is empty then it
defaults to the top-level app bundle. If this value is non-empty then it
must be an absolute path. Also configurable using the "main-bundle-path"
command-line switch.

</member>
        <member name="F:_cef_settings_t.framework_dir_path">

The path to the CEF framework directory on macOS. If this value is empty
then the framework must exist at "Contents/Frameworks/Chromium Embedded
Framework.framework" in the top-level app bundle. If this value is
non-empty then it must be an absolute path. Also configurable using the
"framework-dir-path" command-line switch.

</member>
        <member name="F:_cef_settings_t.no_sandbox">

Set to true (1) to disable the sandbox for sub-processes. See
cef_sandbox_win.h for requirements to enable the sandbox on Windows. Also
configurable using the "no-sandbox" command-line switch.

</member>
        <member name="F:_cef_settings_t.size">

Size of this structure.

</member>
        <member name="T:_cef_settings_t">

Initialization settings. Specify NULL or 0 to get the recommended default
values. Many of these and other settings can also configured using command-
line switches.

</member>
        <member name="F:STATE_DISABLED">

Disable or disallow the setting.

</member>
        <member name="F:STATE_ENABLED">

Enable or allow the setting.

</member>
        <member name="F:STATE_DEFAULT">

Use the default state for the setting.

</member>
        <member name="F:LOGSEVERITY_DISABLE">

Disable logging to file for all messages, and to stderr for messages with
severity less than FATAL.

</member>
        <member name="F:LOGSEVERITY_FATAL">

FATAL logging.

</member>
        <member name="F:LOGSEVERITY_ERROR">

ERROR logging.

</member>
        <member name="F:LOGSEVERITY_WARNING">

WARNING logging.

</member>
        <member name="F:LOGSEVERITY_INFO">

INFO logging.

</member>
        <member name="F:LOGSEVERITY_DEBUG">

DEBUG logging.

</member>
        <member name="F:LOGSEVERITY_VERBOSE">

Verbose logging.

</member>
        <member name="F:LOGSEVERITY_DEFAULT">

Default logging (currently INFO logging).

</member>
        <member name="F:_cef_window_info_t.window">

Handle for the new browser window. Only used with windowed rendering.

</member>
        <member name="F:_cef_window_info_t.external_begin_frame_enabled">

Set to true (1) to enable the ability to issue BeginFrame requests from
the client application by calling CefBrowserHost::SendExternalBeginFrame.

</member>
        <member name="F:_cef_window_info_t.shared_texture_enabled">

Set to true (1) to enable shared textures for windowless rendering. Only
valid if windowless_rendering_enabled above is also set to true. Currently
only supported on Windows (D3D11).

</member>
        <member name="F:_cef_window_info_t.windowless_rendering_enabled">

Set to true (1) to create the browser using windowless (off-screen)
rendering. No window will be created for the browser and all rendering
will occur via the CefRenderHandler interface. The |parent_window| value
will be used to identify monitor info and to act as the parent window for
dialogs, context menus, etc. If |parent_window| is not provided then the
main screen monitor will be used and some functionality that requires a
parent window may not function correctly. In order to create windowless
browsers the CefSettings.windowless_rendering_enabled value must be set to
true. Transparent painting is enabled by default but can be disabled by
setting CefBrowserSettings.background_color to an opaque value.

</member>
        <member name="T:_cef_window_info_t">

Structure representing window information.

</member>
        <member name="T:_cef_main_args_t">

Structure representing CefExecuteProcess arguments.

</member>
        <member name="T:_cef_insets_t">

Structure representing insets.

</member>
        <member name="T:_cef_size_t">

Structure representing a size.

</member>
        <member name="T:_cef_rect_t">

Structure representing a rectangle.

</member>
        <member name="T:_cef_point_t">

Structure representing a point.

</member>
        <member name="M:cef_string_list_copy(System.Void*)">

Creates a copy of an existing string list.

</member>
        <member name="M:cef_string_list_free(System.Void*)">

Free the string list.

</member>
        <member name="M:cef_string_list_clear(System.Void*)">

Clear the string list.

</member>
        <member name="M:cef_string_list_append(System.Void*,_cef_string_utf16_t!System.Runtime.CompilerServices.IsConst*)">

Append a new value at the end of the string list.

</member>
        <member name="M:cef_string_list_value(System.Void*,System.UInt32,_cef_string_utf16_t*)">

Retrieve the value at the specified zero-based string list index. Returns
true (1) if the value was successfully retrieved.

</member>
        <member name="M:cef_string_list_size(System.Void*)">

Return the number of elements in the string list.

</member>
        <member name="M:cef_string_list_alloc">

Allocate a new string map.

</member>
        <member name="D:cef_string_list_t">

CEF string maps are a set of key/value string pairs.

</member>
        <member name="T:CefStringTraitsUTF16">

Traits implementation for utf16 character strings.

</member>
        <member name="T:CefStringTraitsUTF8">

Traits implementation for utf8 character strings.

</member>
        <member name="T:CefStringTraitsWide">

Traits implementation for wide character strings.

</member>
        <member name="M:cef_string_utf16_to_lower(System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32,_cef_string_utf16_t*)">

These functions convert utf16 string case using the current ICU locale. This
may change the length of the string in some cases.

</member>
        <member name="M:cef_string_userfree_wide_free(_cef_string_wide_t*)">

These functions free the string structure allocated by the associated
alloc function. Any string contents will first be cleared.

</member>
        <member name="M:cef_string_userfree_wide_alloc">

These functions allocate a new string structure. They must be freed by
calling the associated free function.

</member>
        <member name="D:cef_string_userfree_wide_t">

It is sometimes necessary for the system to allocate string structures with
the expectation that the user will free them. The userfree types act as a
hint that the user is responsible for freeing the structure.

</member>
        <member name="M:cef_string_ascii_to_wide(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,_cef_string_wide_t*)">

These functions convert an ASCII string, typically a hardcoded constant, to
a Wide/UTF16 string. Use instead of the UTF8 conversion routines if you know
the string is ASCII.

</member>
        <member name="M:cef_string_wide_to_utf8(System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32,_cef_string_utf8_t*)">

These functions convert between UTF-8, -16, and -32 strings. They are
potentially slow so unnecessary conversions should be avoided. The best
possible result will always be written to |output| with the boolean return
value indicating whether the conversion is 100% valid.

</member>
        <member name="M:cef_string_wide_cmp(_cef_string_wide_t!System.Runtime.CompilerServices.IsConst*,_cef_string_wide_t!System.Runtime.CompilerServices.IsConst*)">

These functions compare two string values with the same results as strcmp().

</member>
        <member name="M:cef_string_wide_clear(_cef_string_wide_t*)">

Convenience macros for copying values.


These functions clear string values. The structure itself is not freed.

</member>
        <member name="M:cef_string_wide_set(System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32,_cef_string_wide_t*,System.Int32)">

These functions set string values. If |copy| is true (1) the value will be
copied instead of referenced. It is up to the user to properly manage
the lifespan of references.

</member>
        <member name="T:_cef_string_wide_t">

\file
CEF provides functions for converting between UTF-8, -16 and -32 strings.
CEF string types are safe for reading from multiple threads but not for
modification. It is the user's responsibility to provide synchronization if
modifying CEF strings from multiple threads.


CEF string type definitions. Whomever allocates |str| is responsible for
providing an appropriate |dtor| implementation that will free the string in
the same memory space. When reusing an existing string structure make sure
to call |dtor| for the old value before assigning new |str| and |dtor|
values. Static strings will have a NULL |dtor| value. Using the below
functions if you want this managed for you.

</member>
        <member name="M:CefTime.Delta(CefTime!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Return the delta between this object and |other| in milliseconds.

</member>
        <member name="M:CefTime.Now">

Set this object to now.

</member>
        <member name="M:CefTime.SetDoubleT(System.Double)">

Converts to/from a double which is the number of seconds since epoch
(Jan 1, 1970). Webkit uses this format to represent time. A value of 0
means "not initialized".

</member>
        <member name="M:CefTime.SetTimeT(System.Int64)">

Converts to/from time_t.

</member>
        <member name="T:CefTime">

Class representing a time.

</member>
        <member name="T:CefBaseTime">

Represents a wall clock time in UTC. Values are not guaranteed to be
monotonically non-decreasing and are subject to large amounts of skew.
Time is stored internally as microseconds since the Windows epoch (1601).

This is equivalent of Chromium `base::Time` (see base/time/time.h).

</member>
        <member name="M:cef_time_from_basetime(_cef_basetime_t!System.Runtime.CompilerServices.IsConst,_cef_time_t*)">

Converts cef_basetime_t to cef_time_t. Returns true (1) on success and
false (0) on failure.

</member>
        <member name="M:cef_time_to_basetime(_cef_time_t!System.Runtime.CompilerServices.IsConst*,_cef_basetime_t*)">

Converts cef_time_t to cef_basetime_t. Returns true (1) on success and
false (0) on failure.

</member>
        <member name="M:cef_time_delta(_cef_time_t!System.Runtime.CompilerServices.IsConst*,_cef_time_t!System.Runtime.CompilerServices.IsConst*,System.Int64*)">

Retrieve the delta in milliseconds between two time values. Returns true (1)
on success and false (0) on failure.
</member>
        <member name="M:cef_basetime_now">

Retrieve the current system time.

</member>
        <member name="M:cef_time_now(_cef_time_t*)">

Retrieve the current system time. Returns true (1) on success and false (0)
on failure.

</member>
        <member name="M:cef_time_to_doublet(_cef_time_t!System.Runtime.CompilerServices.IsConst*,System.Double*)">

Converts cef_time_t to/from a double which is the number of seconds since
epoch (Jan 1, 1970). Webkit uses this format to represent time. A value of 0
means "not initialized". Returns true (1) on success and false (0) on
failure.

</member>
        <member name="M:cef_time_to_timet(_cef_time_t!System.Runtime.CompilerServices.IsConst*,System.Int64*)">

Converts cef_time_t to/from time_t. Returns true (1) on success and false
(0) on failure.

</member>
        <member name="F:_cef_time_t.millisecond">

Milliseconds within the current second (0-999)

</member>
        <member name="F:_cef_time_t.second">

Second within the current minute (0-59 plus leap seconds which may take
it up to 60).

</member>
        <member name="F:_cef_time_t.minute">

Minute within the current hour (0-59)

</member>
        <member name="F:_cef_time_t.hour">

Hour within the current day (0-23)

</member>
        <member name="F:_cef_time_t.day_of_month">

1-based day of month (1-31)

</member>
        <member name="F:_cef_time_t.day_of_week">

0-based day of week (0 = Sunday, etc.)

</member>
        <member name="F:_cef_time_t.month">

1-based month (values 1 = January, etc.)

</member>
        <member name="F:_cef_time_t.year">

Four or five digit year "2007" (1601 to 30827 on Windows, 1970 to 2038 on
32-bit POSIX)

</member>
        <member name="T:_cef_time_t">

Time information. Values should always be in UTC.

</member>
        <member name="T:base.ThreadChecker">

ThreadChecker is a helper class used to help verify that some methods of a
class are called from the same thread. It provides identical functionality
to base::NonThreadSafe, but it is meant to be held as a member variable,
rather than inherited from base::NonThreadSafe.

While inheriting from base::NonThreadSafe may give a clear indication about
the thread-safety of a class, it may also lead to violations of the style
guide with regard to multiple inheritance. The choice between having a
ThreadChecker member and inheriting from base::NonThreadSafe should be based
on whether:
 - Derived classes need to know the thread they belong to, as opposed to
   having that functionality fully encapsulated in the base class.
 - Derived classes should be able to reassign the base class to another
   thread, via DetachFromThread.

If neither of these are true, then having a ThreadChecker member and calling
CalledOnValidThread is the preferable solution.

Example:

<pre>
  class MyClass {
   public:
    void Foo() {
      DCHECK(thread_checker_.CalledOnValidThread());
      ... (do stuff) ...
    }

   private:
    ThreadChecker thread_checker_;
  }
</pre>

In Release mode, CalledOnValidThread will always return true.

</member>
        <member name="T:base.cef_internal.ThreadCheckerDoNothing">

Do nothing implementation, for use in release mode.

Note: You should almost always use the ThreadChecker class to get the
right version for your build configuration.

</member>
        <member name="T:base.cef_internal.AutoUnlock">

AutoUnlock is a helper that will Release() the |lock| argument in the
constructor, and re-Acquire() it in the destructor.

</member>
        <member name="T:base.cef_internal.AutoLock">

A helper class that acquires the given Lock while the AutoLock is in scope.

</member>
        <member name="T:base.cef_internal.Lock">

A convenient wrapper for an OS specific critical section.  The only real
intelligence in this class is in debug mode for the support for the
AssertAcquired() method.

</member>
        <member name="M:base.PlatformThread.CurrentRef">

Gets the current thread reference, which can be used to check if
we're on the right thread quickly.

</member>
        <member name="M:base.PlatformThread.CurrentId">

Gets the current thread id, which may be useful for logging purposes.

</member>
        <member name="T:base.PlatformThreadRef">

Used for thread checking and debugging.
Meant to be as fast as possible.
These are produced by PlatformThread::CurrentRef(), and used to later
check if we are on the same thread or not by using ==. These are safe
to copy between threads, but can't be copied to another process as they
have no meaning there. Also, the internal identifier can be re-used
after a thread dies, so a PlatformThreadRef cannot be reliably used
to distinguish a new thread from an old, dead thread.

</member>
        <member name="D:base.PlatformThreadId">

Used for logging. Always an integer value.

</member>
        <member name="M:cef_get_current_platform_thread_handle">

Returns the current platform thread handle.

</member>
        <member name="M:cef_get_current_platform_thread_id">

Returns the current platform thread ID.

</member>
        <member name="M:cef_log(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">

Add a log message. See the LogSeverity defines for supported |severity|
values.

</member>
        <member name="M:cef_get_vlog_level(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">

Gets the current vlog level for the given file (usually taken from
__FILE__). Note that |N| is the size *with* the null terminator.

</member>
        <member name="M:cef_get_min_log_level">

Gets the current log level.

</member>
        <member name="M:base.AtomicRefCount.SubtleRefCountForDebug">

Returns the current reference count (with no barriers). This is subtle,
and should be used only for debugging.

</member>
        <member name="M:base.AtomicRefCount.IsZero">

Return whether the reference count is zero.  With conventional object
referencing counting, the object will be destroyed, so the reference count
should never be zero.  Hence this is generally used for a debug check.

</member>
        <member name="M:base.AtomicRefCount.IsOne">

Return whether the reference count is one.  If the reference count is used
in the conventional way, a refrerence count of 1 implies that the current
thread owns the reference and no other thread shares it.  This call
performs the test for a reference count of one, and performs the memory
barrier needed for the owning thread to act on the object, knowing that it
has exclusive access to the object.

</member>
        <member name="M:base.AtomicRefCount.Decrement">

Decrement a reference count, and return whether the result is non-zero.
Insert barriers to ensure that state written before the reference count
became zero will be visible to a thread that has just made the count zero.

</member>
        <member name="M:base.AtomicRefCount.Increment(System.Int32)">

Increment a reference count by "increment", which must exceed 0.
Returns the previous value of the count.

</member>
        <member name="M:base.AtomicRefCount.Increment">

Increment a reference count.
Returns the previous value of the count.

</member>
        <member name="M:CefResponse.SetURL(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the resolved URL after redirects or changed as a result of HSTS.



Set the resolved URL after redirects or changed as a result of HSTS.



Set the resolved URL after redirects or changed as a result of HSTS.

</member>
        <member name="M:CefResponse.GetURL">

Get the resolved URL after redirects or changed as a result of HSTS.



Get the resolved URL after redirects or changed as a result of HSTS.



Get the resolved URL after redirects or changed as a result of HSTS.

</member>
        <member name="M:CefResponse.SetHeaderMap(std.multimap&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;,std.less&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;,std.allocator&lt;std.pair&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst,CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set all response header fields.



Set all response header fields.



Set all response header fields.

</member>
        <member name="M:CefResponse.GetHeaderMap(std.multimap&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;,CefStringBase&lt;CefStringTraitsUTF16&gt;,std.less&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;,std.allocator&lt;std.pair&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst,CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Get all response header fields.



Get all response header fields.



Get all response header fields.

</member>
        <member name="M:CefResponse.SetHeaderByName(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">

Set the header |name| to |value|. If |overwrite| is true any existing
values will be replaced with the new value. If |overwrite| is false any
existing values will not be overwritten.



Set the header |name| to |value|. If |overwrite| is true any existing
values will be replaced with the new value. If |overwrite| is false any
existing values will not be overwritten.



Set the header |name| to |value|. If |overwrite| is true any existing
values will be replaced with the new value. If |overwrite| is false any
existing values will not be overwritten.

</member>
        <member name="M:CefResponse.GetHeaderByName(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Get the value for the specified response header field.



Get the value for the specified response header field.



Get the value for the specified response header field.

</member>
        <member name="M:CefResponse.SetCharset(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the response charset.



Set the response charset.



Set the response charset.

</member>
        <member name="M:CefResponse.GetCharset">

Get the response charset.



Get the response charset.



Get the response charset.

</member>
        <member name="M:CefResponse.SetMimeType(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the response mime type.



Set the response mime type.



Set the response mime type.

</member>
        <member name="M:CefResponse.GetMimeType">

Get the response mime type.



Get the response mime type.



Get the response mime type.

</member>
        <member name="M:CefResponse.SetStatusText(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

Set the response status text.



Set the response status text.



Set the response status text.

</member>
        <member name="M:CefResponse.GetStatusText">

Get the response status text.



Get the response status text.



Get the response status text.

</member>
        <member name="M:CefResponse.SetStatus(System.Int32)">

Set the response status code.



Set the response status code.



Set the response status code.

</member>
        <member name="M:CefResponse.GetStatus">

Get the response status code.



Get the response status code.



Get the response status code.

</member>
        <member name="M:CefResponse.SetError(cef_errorcode_t)">

Set the response error code. This can be used by custom scheme handlers
to return errors during initial request processing.



Set the response error code. This can be used by custom scheme handlers
to return errors during initial request processing.



Set the response error code. This can be used by custom scheme handlers
to return errors during initial request processing.

</member>
        <member name="M:CefResponse.GetError">

Get the response error code. Returns ERR_NONE if there was no error.



Get the response error code. Returns ERR_NONE if there was no error.



Get the response error code. Returns ERR_NONE if there was no error.

</member>
        <member name="M:CefResponse.IsReadOnly">

Returns true if this object is read-only.



Returns true if this object is read-only.



Returns true if this object is read-only.

</member>
        <member name="M:CefResponse.Create">

Create a new CefResponse object.



Create a new CefResponse object.



Create a new CefResponse object.

</member>
        <member name="T:CefResponse">

Class used to represent a web response. The methods of this class may be
called on any thread.



Class used to represent a web response. The methods of this class may be
called on any thread.



Class used to represent a web response. The methods of this class may be
called on any thread.

</member>
        <member name="M:CefDownloadItem.GetMimeType">

Returns the mime type.



Returns the mime type.

</member>
        <member name="M:CefDownloadItem.GetContentDisposition">

Returns the content disposition.



Returns the content disposition.

</member>
        <member name="M:CefDownloadItem.GetSuggestedFileName">

Returns the suggested file name.



Returns the suggested file name.

</member>
        <member name="M:CefDownloadItem.GetOriginalUrl">

Returns the original URL before any redirections.



Returns the original URL before any redirections.

</member>
        <member name="M:CefDownloadItem.GetURL">

Returns the URL.



Returns the URL.

</member>
        <member name="M:CefDownloadItem.GetId">

Returns the unique identifier for this download.



Returns the unique identifier for this download.

</member>
        <member name="M:CefDownloadItem.GetFullPath">

Returns the full path to the downloaded or downloading file.



Returns the full path to the downloaded or downloading file.

</member>
        <member name="M:CefDownloadItem.GetEndTime">

Returns the time that the download ended.



Returns the time that the download ended.

</member>
        <member name="M:CefDownloadItem.GetStartTime">

Returns the time that the download started.



Returns the time that the download started.

</member>
        <member name="M:CefDownloadItem.GetReceivedBytes">

Returns the number of received bytes.



Returns the number of received bytes.

</member>
        <member name="M:CefDownloadItem.GetTotalBytes">

Returns the total number of bytes.



Returns the total number of bytes.

</member>
        <member name="M:CefDownloadItem.GetPercentComplete">

Returns the rough percent complete or -1 if the receive total size is
unknown.



Returns the rough percent complete or -1 if the receive total size is
unknown.

</member>
        <member name="M:CefDownloadItem.GetCurrentSpeed">

Returns a simple speed estimate in bytes/s.



Returns a simple speed estimate in bytes/s.

</member>
        <member name="M:CefDownloadItem.IsCanceled">

Returns true if the download has been canceled or interrupted.



Returns true if the download has been canceled or interrupted.

</member>
        <member name="M:CefDownloadItem.IsComplete">

Returns true if the download is complete.



Returns true if the download is complete.

</member>
        <member name="M:CefDownloadItem.IsInProgress">

Returns true if the download is in progress.



Returns true if the download is in progress.

</member>
        <member name="M:CefDownloadItem.IsValid">

Returns true if this object is valid. Do not call any other methods if
this function returns false.



Returns true if this object is valid. Do not call any other methods if
this function returns false.

</member>
        <member name="T:CefDownloadItem">

Class used to represent a download item.



Class used to represent a download item.

</member>
        <member name="T:CefSharp.CookieManager">
            <exclude />
        </member>
        <!-- Discarding badly formed XML document comment for member 'M:_wassert(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:_cef_basetime_t'. -->
        <!-- Discarding badly formed XML document comment for member 'F:_cef_settings_t.browser_subprocess_path'. -->
        <!-- Discarding badly formed XML document comment for member 'F:RT_PING'. -->
        <!-- Discarding badly formed XML document comment for member 'F:UU_URL_SPECIAL_CHARS_EXCEPT_PATH_SEPARATORS'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefFrame.GetIdentifier'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefExtensionHandler.OnBeforeBackgroundBrowser(scoped_refptr<CefExtension>,CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefClient>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CefStructBase<CefBrowserSettingsTraits>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefMediaRouter.GetSource(CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefRequestContext.LoadExtension(CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefDictionaryValue>,scoped_refptr<CefExtensionHandler>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefBrowserHost.DownloadImage(CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.UInt32,System.Boolean,scoped_refptr<CefDownloadImageCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefBrowserHost.SendDevToolsMessage(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefMenuModel.SetFontList(System.Int32,CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefMenuModel.SetFontListAt(System.Int32,CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefRenderHandler.UpdateDragCursor(scoped_refptr<CefBrowser>,cef_drag_operations_mask_t)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceSkipCallback.Continue(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceReadCallback.Continue(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Skip(System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceSkipCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Read(System.Void*,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceReadCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefBrowserProcessHandler.OnScheduleMessagePumpWork(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceSkipCallback.Continue(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceReadCallback.Continue(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Skip(System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceSkipCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Read(System.Void*,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceReadCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefMenuModel.SetFontList(System.Int32,CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefMenuModel.SetFontListAt(System.Int32,CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefRenderHandler.UpdateDragCursor(scoped_refptr<CefBrowser>,cef_drag_operations_mask_t)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceSkipCallback.Continue(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceReadCallback.Continue(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Skip(System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceSkipCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Read(System.Void*,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceReadCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefBrowserProcessHandler.OnScheduleMessagePumpWork(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceSkipCallback.Continue(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceReadCallback.Continue(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Skip(System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceSkipCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Read(System.Void*,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceReadCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefMenuModel.SetFontList(System.Int32,CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefMenuModel.SetFontListAt(System.Int32,CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefRenderHandler.UpdateDragCursor(scoped_refptr<CefBrowser>,cef_drag_operations_mask_t)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceSkipCallback.Continue(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceReadCallback.Continue(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Skip(System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceSkipCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Read(System.Void*,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceReadCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefBrowserProcessHandler.OnScheduleMessagePumpWork(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefMenuModel.SetFontList(System.Int32,CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefMenuModel.SetFontListAt(System.Int32,CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefRenderHandler.UpdateDragCursor(scoped_refptr<CefBrowser>,cef_drag_operations_mask_t)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceSkipCallback.Continue(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceReadCallback.Continue(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Skip(System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceSkipCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Read(System.Void*,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceReadCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefBrowserProcessHandler.OnScheduleMessagePumpWork(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefMenuModel.SetFontList(System.Int32,CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefMenuModel.SetFontListAt(System.Int32,CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefRenderHandler.UpdateDragCursor(scoped_refptr<CefBrowser>,cef_drag_operations_mask_t)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceSkipCallback.Continue(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceReadCallback.Continue(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Skip(System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceSkipCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Read(System.Void*,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceReadCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefBrowserProcessHandler.OnScheduleMessagePumpWork(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefMenuModel.SetFontList(System.Int32,CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefMenuModel.SetFontListAt(System.Int32,CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceSkipCallback.Continue(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceReadCallback.Continue(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Skip(System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceSkipCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Read(System.Void*,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceReadCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceSkipCallback.Continue(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceReadCallback.Continue(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Skip(System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceSkipCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Read(System.Void*,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceReadCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceSkipCallback.Continue(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceReadCallback.Continue(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Skip(System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceSkipCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Read(System.Void*,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceReadCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefMenuModel.SetFontList(System.Int32,CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefMenuModel.SetFontListAt(System.Int32,CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefRenderHandler.UpdateDragCursor(scoped_refptr<CefBrowser>,cef_drag_operations_mask_t)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefBrowserProcessHandler.OnScheduleMessagePumpWork(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceSkipCallback.Continue(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceReadCallback.Continue(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Skip(System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceSkipCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Read(System.Void*,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceReadCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefMenuModel.SetFontList(System.Int32,CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefMenuModel.SetFontListAt(System.Int32,CefStringBase<CefStringTraitsUTF16>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefRenderHandler.UpdateDragCursor(scoped_refptr<CefBrowser>,cef_drag_operations_mask_t)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceSkipCallback.Continue(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceReadCallback.Continue(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Skip(System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceSkipCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Read(System.Void*,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceReadCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefBrowserProcessHandler.OnScheduleMessagePumpWork(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceSkipCallback.Continue(System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceReadCallback.Continue(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Skip(System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceSkipCallback>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:CefResourceHandler.Read(System.Void*,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,scoped_refptr<CefResourceReadCallback>)'. -->
    </members>
</doc>