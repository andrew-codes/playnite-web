"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const github_1 = require("../src/command-line/release/utils/github");
// axios types and values don't seem to match
const _axios = require("axios");
const axios = _axios;
/**
 * The default ChangelogRenderer implementation that nx exports for the common case of generating markdown
 * from the given commits and other metadata.
 */
const defaultChangelogRenderer = async ({ commits, releaseVersion, project, entryWhenNoChanges, changelogRenderOptions, repoSlug, }) => {
    const markdownLines = [];
    const breakingChanges = [];
    const commitTypes = {
        feat: { title: 'üöÄ Features' },
        perf: { title: 'üî• Performance' },
        fix: { title: 'ü©π Fixes' },
        refactor: { title: 'üíÖ Refactors' },
        docs: { title: 'üìñ Documentation' },
        build: { title: 'üì¶ Build' },
        types: { title: 'üåä Types' },
        chore: { title: 'üè° Chore' },
        examples: { title: 'üèÄ Examples' },
        test: { title: '‚úÖ Tests' },
        style: { title: 'üé® Styles' },
        ci: { title: 'ü§ñ CI' },
    };
    // workspace root level changelog
    if (project === null) {
        // No changes for the workspace
        if (commits.length === 0) {
            if (entryWhenNoChanges) {
                markdownLines.push('', `## ${releaseVersion}\n\n${entryWhenNoChanges}`, '');
            }
            return markdownLines.join('\n').trim();
        }
        const typeGroups = groupBy(commits, 'type');
        markdownLines.push('', `## ${releaseVersion}`, '');
        for (const type of Object.keys(commitTypes)) {
            const group = typeGroups[type];
            if (!group || group.length === 0) {
                continue;
            }
            markdownLines.push('', '### ' + commitTypes[type].title, '');
            /**
             * In order to make the final changelog most readable, we organize commits as follows:
             * - By scope, where scopes are in alphabetical order (commits with no scope are listed first)
             * - Within a particular scope grouping, we list commits in chronological order
             */
            const commitsInChronologicalOrder = group.reverse();
            const commitsGroupedByScope = groupBy(commitsInChronologicalOrder, 'scope');
            const scopesSortedAlphabetically = Object.keys(commitsGroupedByScope).sort();
            for (const scope of scopesSortedAlphabetically) {
                const commits = commitsGroupedByScope[scope];
                for (const commit of commits) {
                    const line = formatCommit(commit, repoSlug);
                    markdownLines.push(line);
                    if (commit.isBreaking) {
                        breakingChanges.push(line);
                    }
                }
            }
        }
    }
    else {
        // project level changelog
        const scopeGroups = groupBy(commits, 'scope');
        // Generating for a named project, but that project has no changes in the current set of commits, exit early
        if (!scopeGroups[project]) {
            if (entryWhenNoChanges) {
                markdownLines.push('', `## ${releaseVersion}\n\n${entryWhenNoChanges}`, '');
            }
            return markdownLines.join('\n').trim();
        }
        markdownLines.push('', `## ${releaseVersion}`, '');
        const typeGroups = groupBy(scopeGroups[project], 'type');
        for (const type of Object.keys(commitTypes)) {
            const group = typeGroups[type];
            if (!group || group.length === 0) {
                continue;
            }
            markdownLines.push('', `### ${commitTypes[type].title}`, '');
            const commitsInChronologicalOrder = group.reverse();
            for (const commit of commitsInChronologicalOrder) {
                const line = formatCommit(commit, repoSlug);
                markdownLines.push(line + '\n');
                if (commit.isBreaking) {
                    breakingChanges.push(line);
                }
            }
        }
    }
    if (breakingChanges.length > 0) {
        markdownLines.push('', '#### ‚ö†Ô∏è  Breaking Changes', '', ...breakingChanges);
    }
    if (changelogRenderOptions.includeAuthors) {
        const _authors = new Map();
        for (const commit of commits) {
            if (!commit.author) {
                continue;
            }
            const name = formatName(commit.author.name);
            if (!name || name.includes('[bot]')) {
                continue;
            }
            if (_authors.has(name)) {
                const entry = _authors.get(name);
                entry.email.add(commit.author.email);
            }
            else {
                _authors.set(name, { email: new Set([commit.author.email]) });
            }
        }
        // Try to map authors to github usernames
        if (repoSlug) {
            await Promise.all([..._authors.keys()].map(async (authorName) => {
                const meta = _authors.get(authorName);
                for (const email of meta.email) {
                    // For these pseudo-anonymized emails we can just extract the Github username from before the @
                    // It could either be in the format: username@ or github_id+username@
                    if (email.endsWith('@users.noreply.github.com')) {
                        const match = email.match(/^(\d+\+)?([^@]+)@users\.noreply\.github\.com$/);
                        if (match && match[2]) {
                            meta.github = match[2];
                            break;
                        }
                    }
                    // Look up any other emails against the ungh.cc API
                    const { data } = await axios
                        .get(`https://ungh.cc/users/find/${email}`)
                        .catch(() => ({ data: { user: null } }));
                    if (data?.user) {
                        meta.github = data.user.username;
                        break;
                    }
                }
            }));
        }
        const authors = [..._authors.entries()].map((e) => ({
            name: e[0],
            ...e[1],
        }));
        if (authors.length > 0) {
            markdownLines.push('', '### ' + '‚ù§Ô∏è  Thank You', '', ...authors
                // Sort the contributors by name
                .sort((a, b) => a.name.localeCompare(b.name))
                .map((i) => {
                // Tag the author's Github username if we were able to resolve it so that Github adds them as a contributor
                const github = i.github ? ` @${i.github}` : '';
                return `- ${i.name}${github}`;
            }));
        }
    }
    return markdownLines.join('\n').trim();
};
exports.default = defaultChangelogRenderer;
function formatName(name = '') {
    return name
        .split(' ')
        .map((p) => p.trim())
        .join(' ');
}
function groupBy(items, key) {
    const groups = {};
    for (const item of items) {
        groups[item[key]] = groups[item[key]] || [];
        groups[item[key]].push(item);
    }
    return groups;
}
function formatCommit(commit, repoSlug) {
    let commitLine = '- ' +
        (commit.scope ? `**${commit.scope.trim()}:** ` : '') +
        (commit.isBreaking ? '‚ö†Ô∏è  ' : '') +
        commit.description;
    if (repoSlug) {
        commitLine += (0, github_1.formatReferences)(commit.references, repoSlug);
    }
    return commitLine;
}
