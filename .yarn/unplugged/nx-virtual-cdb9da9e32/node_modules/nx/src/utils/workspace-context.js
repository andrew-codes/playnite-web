"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resetWorkspaceContext = exports.getAllFileDataInContext = exports.updateFilesInContext = exports.getProjectConfigurationsFromContext = exports.globWithWorkspaceContext = exports.getNxWorkspaceFilesFromContext = exports.setupWorkspaceContext = void 0;
const perf_hooks_1 = require("perf_hooks");
let workspaceContext;
function setupWorkspaceContext(workspaceRoot) {
    const { WorkspaceContext } = require('../native');
    perf_hooks_1.performance.mark('workspace-context');
    workspaceContext = new WorkspaceContext(workspaceRoot);
    perf_hooks_1.performance.mark('workspace-context:end');
    perf_hooks_1.performance.measure('workspace context init', 'workspace-context', 'workspace-context:end');
}
exports.setupWorkspaceContext = setupWorkspaceContext;
function getNxWorkspaceFilesFromContext(workspaceRoot, globs, parseConfigurations) {
    ensureContextAvailable(workspaceRoot);
    return workspaceContext.getWorkspaceFiles(globs, parseConfigurations);
}
exports.getNxWorkspaceFilesFromContext = getNxWorkspaceFilesFromContext;
function globWithWorkspaceContext(workspaceRoot, globs) {
    ensureContextAvailable(workspaceRoot);
    return workspaceContext.glob(globs);
}
exports.globWithWorkspaceContext = globWithWorkspaceContext;
function getProjectConfigurationsFromContext(workspaceRoot, globs, parseConfigurations) {
    ensureContextAvailable(workspaceRoot);
    return workspaceContext.getProjectConfigurations(globs, parseConfigurations);
}
exports.getProjectConfigurationsFromContext = getProjectConfigurationsFromContext;
function updateFilesInContext(updatedFiles, deletedFiles) {
    return workspaceContext?.incrementalUpdate(updatedFiles, deletedFiles);
}
exports.updateFilesInContext = updateFilesInContext;
function getAllFileDataInContext(workspaceRoot) {
    ensureContextAvailable(workspaceRoot);
    return workspaceContext.allFileData();
}
exports.getAllFileDataInContext = getAllFileDataInContext;
function ensureContextAvailable(workspaceRoot) {
    if (!workspaceContext || workspaceContext?.workspaceRoot !== workspaceRoot) {
        setupWorkspaceContext(workspaceRoot);
    }
}
function resetWorkspaceContext() {
    workspaceContext = undefined;
}
exports.resetWorkspaceContext = resetWorkspaceContext;
