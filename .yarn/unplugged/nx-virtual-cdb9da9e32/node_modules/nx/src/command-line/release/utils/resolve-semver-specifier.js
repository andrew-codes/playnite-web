"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveSemverSpecifierFromPrompt = exports.resolveSemverSpecifierFromConventionalCommits = void 0;
const enquirer_1 = require("enquirer");
const semver_1 = require("semver");
const file_map_utils_1 = require("../../../project-graph/file-map-utils");
const git_1 = require("./git");
const semver_2 = require("./semver");
// TODO: Extract config to nx.json configuration when adding changelog customization
const CONVENTIONAL_COMMITS_CONFIG = {
    types: {
        feat: {
            semver: 'minor',
        },
        fix: {
            semver: 'patch',
        },
    },
};
async function resolveSemverSpecifierFromConventionalCommits(from, projectGraph, projectNames) {
    const commits = await (0, git_1.getGitDiff)(from);
    const parsedCommits = (0, git_1.parseCommits)(commits);
    const projectFileMap = await (0, file_map_utils_1.createProjectFileMapUsingProjectGraph)(projectGraph);
    const filesInReleaseGroup = new Set(projectNames.reduce((files, p) => [...files, ...projectFileMap[p].map((f) => f.file)], []));
    const relevantCommits = parsedCommits.filter((c) => c.affectedFiles.some((f) => filesInReleaseGroup.has(f)));
    return (0, semver_2.determineSemverChange)(relevantCommits, CONVENTIONAL_COMMITS_CONFIG);
}
exports.resolveSemverSpecifierFromConventionalCommits = resolveSemverSpecifierFromConventionalCommits;
async function resolveSemverSpecifierFromPrompt(selectionMessage, customVersionMessage) {
    try {
        const reply = await (0, enquirer_1.prompt)([
            {
                name: 'specifier',
                message: selectionMessage,
                type: 'select',
                choices: [
                    ...semver_1.RELEASE_TYPES.map((t) => ({ name: t, message: t })),
                    {
                        name: 'custom',
                        message: 'Custom exact version',
                    },
                ],
            },
        ]);
        if (reply.specifier !== 'custom') {
            return reply.specifier;
        }
        else {
            const reply = await (0, enquirer_1.prompt)([
                {
                    name: 'specifier',
                    message: customVersionMessage,
                    type: 'input',
                    validate: (input) => {
                        if ((0, semver_1.valid)(input)) {
                            return true;
                        }
                        return 'Please enter a valid semver version';
                    },
                },
            ]);
            return reply.specifier;
        }
    }
    catch {
        // TODO: log the error to the user?
        // We need to catch the error from enquirer prompt, otherwise yargs will print its help
        process.exit(1);
    }
}
exports.resolveSemverSpecifierFromPrompt = resolveSemverSpecifierFromPrompt;
