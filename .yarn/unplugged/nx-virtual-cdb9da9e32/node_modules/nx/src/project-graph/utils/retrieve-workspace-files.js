"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configurationGlobs = exports.createProjectConfigurations = exports.retrieveProjectConfigurationsWithoutPluginInference = exports.retrieveProjectConfigurationPathsWithoutPluginInference = exports.retrieveProjectConfigurationPaths = exports.retrieveProjectConfigurationsSync = exports.retrieveProjectConfigurationsWithAngularProjects = exports.retrieveProjectConfigurations = exports.retrieveWorkspaceFiles = void 0;
const perf_hooks_1 = require("perf_hooks");
const installation_directory_1 = require("../../utils/installation-directory");
const angular_json_1 = require("../../adapter/angular-json");
const nx_json_1 = require("../../config/nx-json");
const package_json_workspaces_1 = require("../../../plugins/package-json-workspaces");
const project_configuration_utils_1 = require("./project-configuration-utils");
const nx_plugin_1 = require("../../utils/nx-plugin");
const project_json_1 = require("../../plugins/project-json/build-nodes/project-json");
const workspace_context_1 = require("../../utils/workspace-context");
/**
 * Walks the workspace directory to create the `projectFileMap`, `ProjectConfigurations` and `allWorkspaceFiles`
 * @throws
 * @param workspaceRoot
 * @param nxJson
 */
async function retrieveWorkspaceFiles(workspaceRoot, nxJson) {
    perf_hooks_1.performance.mark('native-file-deps:start');
    const plugins = await (0, nx_plugin_1.loadNxPlugins)(nxJson?.plugins ?? [], (0, installation_directory_1.getNxRequirePaths)(workspaceRoot), workspaceRoot);
    let globs = configurationGlobs(workspaceRoot, plugins);
    perf_hooks_1.performance.mark('native-file-deps:end');
    perf_hooks_1.performance.measure('native-file-deps', 'native-file-deps:start', 'native-file-deps:end');
    perf_hooks_1.performance.mark('get-workspace-files:start');
    let projects;
    let externalNodes;
    const { projectFileMap, globalFiles } = (0, workspace_context_1.getNxWorkspaceFilesFromContext)(workspaceRoot, globs, (configs) => {
        const projectConfigurations = createProjectConfigurations(workspaceRoot, nxJson, configs, plugins);
        projects = projectConfigurations.projects;
        externalNodes = projectConfigurations.externalNodes;
        return projectConfigurations.rootMap;
    });
    perf_hooks_1.performance.mark('get-workspace-files:end');
    perf_hooks_1.performance.measure('get-workspace-files', 'get-workspace-files:start', 'get-workspace-files:end');
    return {
        allWorkspaceFiles: buildAllWorkspaceFiles(projectFileMap, globalFiles),
        fileMap: {
            projectFileMap,
            nonProjectFiles: globalFiles,
        },
        projectConfigurations: {
            version: 2,
            projects,
        },
        externalNodes,
    };
}
exports.retrieveWorkspaceFiles = retrieveWorkspaceFiles;
/**
 * Walk through the workspace and return `ProjectConfigurations`. Only use this if the projectFileMap is not needed.
 *
 * @param workspaceRoot
 * @param nxJson
 */
async function retrieveProjectConfigurations(workspaceRoot, nxJson) {
    const plugins = await (0, nx_plugin_1.loadNxPlugins)(nxJson?.plugins ?? [], (0, installation_directory_1.getNxRequirePaths)(workspaceRoot), workspaceRoot);
    const globs = configurationGlobs(workspaceRoot, plugins);
    return _retrieveProjectConfigurations(workspaceRoot, nxJson, plugins, globs);
}
exports.retrieveProjectConfigurations = retrieveProjectConfigurations;
async function retrieveProjectConfigurationsWithAngularProjects(workspaceRoot, nxJson) {
    const plugins = await (0, nx_plugin_1.loadNxPlugins)(nxJson?.plugins ?? [], (0, installation_directory_1.getNxRequirePaths)(workspaceRoot), workspaceRoot);
    if ((0, angular_json_1.shouldMergeAngularProjects)(workspaceRoot, true) &&
        !plugins.some((p) => p.plugin.name === angular_json_1.NX_ANGULAR_JSON_PLUGIN_NAME)) {
        plugins.push({ plugin: angular_json_1.NxAngularJsonPlugin });
    }
    const globs = configurationGlobs(workspaceRoot, plugins);
    return _retrieveProjectConfigurations(workspaceRoot, nxJson, plugins, globs);
}
exports.retrieveProjectConfigurationsWithAngularProjects = retrieveProjectConfigurationsWithAngularProjects;
/**
 * @deprecated Use {@link retrieveProjectConfigurations} instead.
 */
function retrieveProjectConfigurationsSync(workspaceRoot, nxJson) {
    const plugins = (0, nx_plugin_1.loadNxPluginsSync)(nxJson?.plugins ?? [], (0, installation_directory_1.getNxRequirePaths)(workspaceRoot), workspaceRoot);
    const globs = configurationGlobs(workspaceRoot, plugins);
    return _retrieveProjectConfigurations(workspaceRoot, nxJson, plugins, globs);
}
exports.retrieveProjectConfigurationsSync = retrieveProjectConfigurationsSync;
function _retrieveProjectConfigurations(workspaceRoot, nxJson, plugins, globs) {
    let result;
    (0, workspace_context_1.getProjectConfigurationsFromContext)(workspaceRoot, globs, (configs) => {
        const { projects, externalNodes, rootMap } = createProjectConfigurations(workspaceRoot, nxJson, configs, plugins);
        result = {
            projectNodes: projects,
            externalNodes: externalNodes,
        };
        return rootMap;
    });
    return result;
}
async function retrieveProjectConfigurationPaths(root, nxJson) {
    const projectGlobPatterns = configurationGlobs(root, await (0, nx_plugin_1.loadNxPlugins)(nxJson?.plugins ?? [], (0, installation_directory_1.getNxRequirePaths)(root), root));
    return (0, workspace_context_1.globWithWorkspaceContext)(root, projectGlobPatterns);
}
exports.retrieveProjectConfigurationPaths = retrieveProjectConfigurationPaths;
function retrieveProjectConfigurationPathsWithoutPluginInference(root) {
    return (0, workspace_context_1.globWithWorkspaceContext)(root, configurationGlobsWithoutPlugins(root));
}
exports.retrieveProjectConfigurationPathsWithoutPluginInference = retrieveProjectConfigurationPathsWithoutPluginInference;
const projectsWithoutPluginCache = new Map();
// TODO: This function is called way too often, it should be optimized without this cache
function retrieveProjectConfigurationsWithoutPluginInference(root) {
    const nxJson = (0, nx_json_1.readNxJson)(root);
    const projectGlobPatterns = configurationGlobsWithoutPlugins(root);
    const cacheKey = root + ',' + projectGlobPatterns.join(',');
    if (projectsWithoutPluginCache.has(cacheKey)) {
        return projectsWithoutPluginCache.get(cacheKey);
    }
    let projects;
    (0, workspace_context_1.getProjectConfigurationsFromContext)(root, projectGlobPatterns, (configs) => {
        const projectConfigurations = createProjectConfigurations(root, nxJson, configs, [
            { plugin: (0, package_json_workspaces_1.getNxPackageJsonWorkspacesPlugin)(root) },
            { plugin: project_json_1.CreateProjectJsonProjectsPlugin },
        ]);
        projects = projectConfigurations.projects;
        return projectConfigurations.rootMap;
    });
    projectsWithoutPluginCache.set(cacheKey, projects);
    return projects;
}
exports.retrieveProjectConfigurationsWithoutPluginInference = retrieveProjectConfigurationsWithoutPluginInference;
function buildAllWorkspaceFiles(projectFileMap, globalFiles) {
    perf_hooks_1.performance.mark('get-all-workspace-files:start');
    let fileData = Object.values(projectFileMap).flat();
    fileData = fileData
        .concat(globalFiles)
        .sort((a, b) => a.file.localeCompare(b.file));
    perf_hooks_1.performance.mark('get-all-workspace-files:end');
    perf_hooks_1.performance.measure('get-all-workspace-files', 'get-all-workspace-files:start', 'get-all-workspace-files:end');
    return fileData;
}
function createProjectConfigurations(workspaceRoot, nxJson, configFiles, plugins) {
    perf_hooks_1.performance.mark('build-project-configs:start');
    const { projects, externalNodes, rootMap } = (0, project_configuration_utils_1.buildProjectsConfigurationsFromProjectPathsAndPlugins)(nxJson, configFiles, plugins, workspaceRoot);
    let projectConfigurations = projects;
    perf_hooks_1.performance.mark('build-project-configs:end');
    perf_hooks_1.performance.measure('build-project-configs', 'build-project-configs:start', 'build-project-configs:end');
    return {
        projects: projectConfigurations,
        externalNodes,
        rootMap,
    };
}
exports.createProjectConfigurations = createProjectConfigurations;
function configurationGlobs(workspaceRoot, plugins) {
    const globPatterns = configurationGlobsWithoutPlugins(workspaceRoot);
    for (const { plugin } of plugins) {
        if (plugin.createNodes) {
            globPatterns.push(plugin.createNodes[0]);
        }
    }
    return globPatterns;
}
exports.configurationGlobs = configurationGlobs;
function configurationGlobsWithoutPlugins(workspaceRoot) {
    return [
        'project.json',
        '**/project.json',
        ...(0, package_json_workspaces_1.getGlobPatternsFromPackageManagerWorkspaces)(workspaceRoot),
    ];
}
