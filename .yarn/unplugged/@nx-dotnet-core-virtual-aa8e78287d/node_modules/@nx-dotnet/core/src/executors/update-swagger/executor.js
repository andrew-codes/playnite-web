"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SWAGGER_CLI_TOOL = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const path_1 = require("path");
const dotnet_1 = require("@nx-dotnet/dotnet");
const utils_1 = require("@nx-dotnet/utils");
const get_path_to_startup_assembly_1 = require("../../generators/utils/get-path-to-startup-assembly");
const fs_1 = require("fs");
const child_process_1 = require("child_process");
exports.SWAGGER_CLI_TOOL = 'Swashbuckle.AspNetCore.Cli';
function normalizeOptions(opts, project, csProjFilePath, projectName) {
    var _a, _b, _c;
    return {
        output: (0, path_1.resolve)(devkit_1.workspaceRoot, (_a = opts.output) !== null && _a !== void 0 ? _a : `dist/swagger/${project.root}/swagger.json`),
        startupAssembly: opts.startupAssembly
            ? (0, path_1.resolve)(devkit_1.workspaceRoot, opts.startupAssembly)
            : (0, path_1.resolve)((0, get_path_to_startup_assembly_1.buildStartupAssemblyPath)(projectName, project, csProjFilePath)),
        swaggerDoc: (_b = opts.swaggerDoc) !== null && _b !== void 0 ? _b : 'v1',
        skipInstall: (_c = opts.skipInstall) !== null && _c !== void 0 ? _c : false,
    };
}
function readSwashbuckleVersion(projectFilePath) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const configuredVersion = (_a = (0, utils_1.readConfig)().nugetPackages) === null || _a === void 0 ? void 0 : _a['Swashbuckle.AspNetCore'];
        if (configuredVersion && configuredVersion !== 'ALLOW_MISMATCH') {
            return configuredVersion;
        }
        const xml = (0, utils_1.readXml)(projectFilePath);
        let v;
        yield (0, utils_1.iterateChildrenByPath)(xml, 'ItemGroup.PackageReference', (reference) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const pkg = reference.attr['Include'];
            const version = reference.attr['Version'];
            if (pkg === 'Swashbuckle.AspNetCore') {
                v = version;
            }
        }));
        if (!v) {
            throw new Error('Unable to resolve Swashbuckle.AspNetCore for ' + projectFilePath);
        }
        return v;
    });
}
function runExecutor(schema, context, dotnetClient = new dotnet_1.DotNetClient((0, dotnet_1.dotnetFactory)(), devkit_1.workspaceRoot)) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const nxProjectConfiguration = (0, utils_1.getExecutedProjectConfiguration)(context);
        const csProjFilePath = yield (0, utils_1.getProjectFileForNxProject)(nxProjectConfiguration);
        const projectDirectory = (0, path_1.resolve)(devkit_1.workspaceRoot, nxProjectConfiguration.root);
        dotnetClient.cwd = projectDirectory;
        const options = normalizeOptions(schema, nxProjectConfiguration, csProjFilePath, context.projectName);
        const outputDirectory = (0, path_1.dirname)(options.output);
        if (!(0, fs_1.existsSync)(outputDirectory)) {
            (0, fs_1.mkdirSync)(outputDirectory, { recursive: true });
        }
        if (!options.skipInstall) {
            ensureSwaggerToolInstalled(context, dotnetClient, yield readSwashbuckleVersion(csProjFilePath));
        }
        dotnetClient.runTool('swagger', [
            'tofile',
            '--output',
            options.output,
            options.startupAssembly,
            options.swaggerDoc,
        ]);
        try {
            const isInstalled = require.resolve('prettier');
            if (isInstalled) {
                (0, child_process_1.execSync)(`npx -y prettier --write ${options.output}`);
            }
        }
        catch (_a) {
            // Its not a huge deal if prettier isn't installed or fails...
            // We'll just leave the file as is and let the user decide what to do.
        }
        return {
            success: true,
        };
    });
}
exports.default = runExecutor;
function ensureSwaggerToolInstalled(context, dotnetClient, version) {
    const installedSwaggerVersion = (0, utils_1.readInstalledDotnetToolVersion)(exports.SWAGGER_CLI_TOOL);
    if (installedSwaggerVersion) {
        if (installedSwaggerVersion === version) {
            return;
        }
        devkit_1.logger.warn(`Swagger CLI was found, but the version "${installedSwaggerVersion}" does not match the expected version "${version}" of Swashbuckle.AspNetCore in ${context.projectName}. We reinstalled it such that the version matches, but you may want to review the changes made.`);
    }
    dotnetClient.installTool(exports.SWAGGER_CLI_TOOL, version);
}
//# sourceMappingURL=executor.js.map