"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const semver = require("semver");
const dotnet_1 = require("@nx-dotnet/dotnet");
const utils_1 = require("@nx-dotnet/utils");
function normalizeOptions(options, isNet6OrHigher) {
    const { diagnostics, include, exclude, check, fix } = options, flags = tslib_1.__rest(options, ["diagnostics", "include", "exclude", "check", "fix"]);
    return Object.assign(Object.assign({}, flags), { diagnostics: Array.isArray(diagnostics)
            ? diagnostics.join(' ')
            : diagnostics, include: Array.isArray(include) ? include.join(' ') : include, exclude: Array.isArray(exclude) ? exclude.join(' ') : exclude, check: fix ? false : check && !isNet6OrHigher, verifyNoChanges: fix ? false : check && isNet6OrHigher });
}
function runExecutor(options, context, dotnetClient = new dotnet_1.DotNetClient((0, dotnet_1.dotnetFactory)())) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const sdkVersion = dotnetClient.getSdkVersion();
        const forceToolUsage = semver.satisfies(sdkVersion, '6.0.0 - 6.0.203');
        const majorVersion = semver.major(sdkVersion);
        const nxProjectConfiguration = (0, utils_1.getExecutedProjectConfiguration)(context);
        const projectFilePath = yield (0, utils_1.getProjectFileForNxProject)(nxProjectConfiguration);
        const normalized = normalizeOptions(options, majorVersion >= 6);
        if (forceToolUsage || majorVersion < 6) {
            ensureFormatToolInstalled(context, dotnetClient, majorVersion);
        }
        dotnetClient.format(projectFilePath, normalized, forceToolUsage);
        return {
            success: true,
        };
    });
}
exports.default = runExecutor;
function ensureFormatToolInstalled(context, dotnetClient, majorVersion) {
    if ((0, utils_1.readInstalledDotnetToolVersion)('dotnet-format')) {
        // dotnet-format is already installed.
        return;
    }
    if (majorVersion === 6) {
        dotnetClient.installTool('dotnet-format', '6.*', 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6/nuget/v3/index.json');
    }
    else if (majorVersion === 7) {
        dotnetClient.installTool('dotnet-format', '7.*', 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json');
    }
    else {
        dotnetClient.installTool('dotnet-format');
    }
}
//# sourceMappingURL=executor.js.map