"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addToSolutionFile = void 0;
const devkit_1 = require("@nx/devkit");
const path_1 = require("path");
const dotnet_1 = require("@nx-dotnet/dotnet");
const utils_1 = require("@nx-dotnet/utils");
const get_scope_1 = require("./get-scope");
function addToSolutionFile(host, projectRoot, dotnetClient = new dotnet_1.DotNetClient((0, dotnet_1.dotnetFactory)()), solutionFile) {
    var _a, _b;
    const scope = (0, get_scope_1.getWorkspaceScope)(host);
    const defaultFilePath = (_a = (0, utils_1.readConfigSection)(host, 'solutionFile')) === null || _a === void 0 ? void 0 : _a.replace(/(\{npmScope\}|\{scope\})/g, scope || '');
    if (typeof solutionFile === 'boolean' && solutionFile) {
        solutionFile = defaultFilePath;
    }
    else if (solutionFile === null || solutionFile === undefined) {
        if (defaultFilePath && host.exists(defaultFilePath)) {
            solutionFile = defaultFilePath;
        }
    }
    if (solutionFile) {
        if (!host.exists(solutionFile)) {
            const { name, dir } = (0, path_1.parse)(solutionFile);
            dotnetClient.new('sln', {
                name,
                output: (0, devkit_1.joinPathFragments)(host.root, dir),
            });
        }
        const relativePath = (0, path_1.relative)((_b = dotnetClient.cwd) !== null && _b !== void 0 ? _b : host.root, host.root);
        dotnetClient.addProjectToSolution((0, devkit_1.joinPathFragments)(relativePath, solutionFile), (0, path_1.resolve)(relativePath, projectRoot));
    }
}
exports.addToSolutionFile = addToSolutionFile;
//# sourceMappingURL=add-to-sln.js.map