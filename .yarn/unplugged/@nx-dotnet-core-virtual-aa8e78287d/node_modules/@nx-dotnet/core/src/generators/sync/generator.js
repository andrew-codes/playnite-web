"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const utils_1 = require("@nx-dotnet/utils");
const resolve_version_mismatch_1 = require("../utils/resolve-version-mismatch");
const update_dependency_version_1 = require("../utils/update-dependency-version");
function default_1(host) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const config = (0, utils_1.readConfig)(host);
        (_a = config.nugetPackages) !== null && _a !== void 0 ? _a : (config.nugetPackages = {});
        const projects = yield (0, utils_1.getNxDotnetProjects)(host);
        for (const [projectName, configuration] of projects.entries()) {
            const projectFiles = (0, utils_1.getProjectFilesForProject)(host, configuration, projectName);
            for (const f of projectFiles) {
                const xmldoc = (0, utils_1.readXmlInTree)(host, f);
                console.log(`Scanning packages for ${projectName} (${f})`);
                yield (0, utils_1.iterateChildrenByPath)(xmldoc, 'ItemGroup.PackageReference', (reference) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                    const pkg = reference.attr['Include'];
                    const version = reference.attr['Version'];
                    const configuredVersion = config.nugetPackages[pkg];
                    if (version &&
                        version !== configuredVersion &&
                        configuredVersion !== utils_1.ALLOW_MISMATCH) {
                        const resolved = yield (0, resolve_version_mismatch_1.resolveVersionMismatch)(version, configuredVersion, false, pkg);
                        config.nugetPackages[pkg] = resolved;
                        if (resolved !== utils_1.ALLOW_MISMATCH) {
                            (0, update_dependency_version_1.updateDependencyVersions)(host, pkg, resolved);
                        }
                    }
                }));
            }
        }
        (0, utils_1.updateConfig)(host, config);
    });
}
exports.default = default_1;
//# sourceMappingURL=generator.js.map