"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveVersionMismatch = void 0;
const tslib_1 = require("tslib");
const inquirer_1 = require("inquirer");
const utils_1 = require("@nx-dotnet/utils");
function resolveVersionMismatch(desired, configured, allowVersionMismatch, packageName) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (configured) {
            if (configured !== desired) {
                if (allowVersionMismatch || configured === utils_1.ALLOW_MISMATCH) {
                    return utils_1.ALLOW_MISMATCH;
                }
                if (!desired) {
                    console.log(`Installing with pre-configured version ${configured}`);
                    return configured;
                }
                return getResolvedVersion({ packageName, desired, configured });
            }
        }
        if (!desired) {
            return promptForDesiredVersion(packageName);
        }
        return desired;
    });
}
exports.resolveVersionMismatch = resolveVersionMismatch;
function promptForDesiredVersion(packageName) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { choice } = yield (0, inquirer_1.prompt)([
            {
                name: 'choice',
                message: `You have not yet set a version for ${packageName !== null && packageName !== void 0 ? packageName : 'this package'}. Which version would you like to install?`,
            },
        ]);
        return choice;
    });
}
function getResolvedVersion({ packageName, desired, configured, }) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { resolution } = yield (0, inquirer_1.prompt)([
            {
                type: 'list',
                name: 'resolution',
                choices: [
                    desired,
                    configured,
                    {
                        name: 'Allow mismatched versions for this package',
                        value: utils_1.ALLOW_MISMATCH,
                        short: 'Allow mismatch',
                    },
                ],
                message: `There appears to be a mismatch between your current package preferences and the requested version ${packageName ? 'for ' + packageName : ''}. Which version would you like to use?`,
            },
        ]);
        return resolution;
    });
}
//# sourceMappingURL=resolve-version-mismatch.js.map