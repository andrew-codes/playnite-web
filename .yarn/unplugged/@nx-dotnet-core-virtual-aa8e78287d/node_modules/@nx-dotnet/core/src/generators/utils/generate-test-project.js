"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerateTestProject = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const utils_1 = require("@nx-dotnet/utils");
const models_1 = require("../../models");
const add_to_sln_1 = require("./add-to-sln");
const generate_project_1 = require("./generate-project");
function getPathPartsFromSchema(schema) {
    var _a, _b;
    if (schema.pathScheme === 'nx') {
        return {
            separator: '-',
            suffix: (_a = schema.testProjectNameSuffix) !== null && _a !== void 0 ? _a : 'test',
        };
    }
    else {
        return {
            separator: '.',
            suffix: (_b = schema.testProjectNameSuffix) !== null && _b !== void 0 ? _b : 'Test',
        };
    }
}
function GenerateTestProject(host, schema, dotnetClient) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!('projectRoot' in schema)) {
            schema = yield (0, generate_project_1.normalizeOptions)(host, schema);
        }
        const { separator, suffix } = getPathPartsFromSchema(schema);
        const testRoot = schema.projectRoot + separator + suffix;
        const testProjectName = schema.projectName + separator + suffix;
        (0, devkit_1.addProjectConfiguration)(host, testProjectName, {
            root: testRoot,
            projectType: schema.projectType,
            sourceRoot: `${testRoot}`,
            targets: {
                build: (0, models_1.GetBuildExecutorConfiguration)(testRoot),
                test: (0, models_1.GetTestExecutorConfig)(),
                lint: (0, models_1.GetLintExecutorConfiguration)(),
            },
            tags: schema.parsedTags,
        });
        const newParams = {
            language: schema.language,
            name: schema.namespaceName + '.' + (0, devkit_1.names)(suffix).className,
            output: testRoot,
        };
        if ((0, utils_1.isDryRun)()) {
            newParams['dryRun'] = true;
        }
        dotnetClient.new(schema.testTemplate, newParams);
        if (!(0, utils_1.isDryRun)()) {
            (0, add_to_sln_1.addToSolutionFile)(host, testRoot, dotnetClient, schema.solutionFile);
            const testCsProj = yield (0, utils_1.findProjectFileInPath)(testRoot);
            const baseCsProj = yield (0, utils_1.findProjectFileInPath)(schema.projectRoot);
            dotnetClient.addProjectReference(testCsProj, baseCsProj);
        }
    });
}
exports.GenerateTestProject = GenerateTestProject;
//# sourceMappingURL=generate-test-project.js.map