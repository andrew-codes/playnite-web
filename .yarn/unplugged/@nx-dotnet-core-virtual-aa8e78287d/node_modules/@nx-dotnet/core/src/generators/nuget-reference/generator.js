"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const dotnet_1 = require("@nx-dotnet/dotnet");
const utils_1 = require("@nx-dotnet/utils");
const resolve_version_mismatch_1 = require("../utils/resolve-version-mismatch");
const update_dependency_version_1 = require("../utils/update-dependency-version");
function default_1(host, options, dotnetClient = new dotnet_1.DotNetClient((0, dotnet_1.dotnetFactory)())) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { packageName, project: projectName, allowVersionMismatch } = options, params = tslib_1.__rest(options, ["packageName", "project", "allowVersionMismatch"]);
        const project = (0, devkit_1.readProjectConfiguration)(host, projectName);
        const projectFilePath = yield (0, utils_1.getProjectFileForNxProject)(project);
        const config = (0, utils_1.readConfig)(host);
        (_a = config.nugetPackages) !== null && _a !== void 0 ? _a : (config.nugetPackages = {});
        const configuredPkgVersion = config.nugetPackages[packageName];
        const resolvedVersion = yield (0, resolve_version_mismatch_1.resolveVersionMismatch)(options.version, configuredPkgVersion, allowVersionMismatch, packageName);
        config.nugetPackages[packageName] = resolvedVersion;
        if (resolvedVersion !== options.version &&
            resolvedVersion !== utils_1.ALLOW_MISMATCH) {
            params.version = resolvedVersion;
        }
        try {
            dotnetClient.addPackageReference(projectFilePath, packageName, params);
            (0, utils_1.updateConfig)(host, config);
            if (resolvedVersion !== utils_1.ALLOW_MISMATCH &&
                resolvedVersion !== configuredPkgVersion &&
                resolvedVersion) {
                (0, update_dependency_version_1.updateDependencyVersions)(host, packageName, resolvedVersion);
            }
        }
        catch (e) {
            console.warn('Config not updated since dotnet failed to add dependency!');
            throw e;
        }
    });
}
exports.default = default_1;
//# sourceMappingURL=generator.js.map