"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const swagger_executor_configuration_1 = require("../../models/swagger-executor-configuration");
const semver_1 = require("semver");
function generateSwaggerSetup(host, options) {
    var _a, _b;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tasks = [];
        const project = (0, devkit_1.readProjectConfiguration)(host, options.project);
        (_a = project.targets) !== null && _a !== void 0 ? _a : (project.targets = {});
        if (!options.output) {
            if (options.swaggerProject) {
                options.output = (0, devkit_1.joinPathFragments)(swaggerProjectRoot(host, options.swaggerProject), 'swagger.json');
                generateShellProject(host, Object.assign(Object.assign({}, options), { swaggerProject: options.swaggerProject, project: options.project, codegenProject: options.codegenProject }));
            }
            else {
                throw new Error('Either specify --output or --swagger-project');
            }
        }
        else if (options.codegenProject && !options.useNxPluginOpenAPI) {
            project.targets.codegen = {
                executor: '@nx-dotnet/core:openapi-codegen',
                options: {
                    openapiJsonPath: options.output,
                    outputProject: options.codegenProject,
                },
                dependsOn: ['swagger'],
            };
        }
        project.targets[(_b = options.target) !== null && _b !== void 0 ? _b : 'swagger'] = Object.assign({}, (0, swagger_executor_configuration_1.getSwaggerExecutorConfiguration)(options.output));
        if (options.codegenProject) {
            tasks.push(...(yield generateCodegenProject(host, options)));
        }
        (0, devkit_1.updateProjectConfiguration)(host, options.project, project);
        return () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            for (const task of tasks) {
                yield task();
            }
        });
    });
}
exports.default = generateSwaggerSetup;
function swaggerProjectRoot(host, swaggerProject) {
    return (0, devkit_1.joinPathFragments)((0, devkit_1.getWorkspaceLayout)(host).libsDir, 'generated', swaggerProject);
}
function generateShellProject(host, options) {
    const root = swaggerProjectRoot(host, options.swaggerProject);
    const targets = {};
    if (options.codegenProject) {
        // If typescript lib is buildable,
        // then this lib must be too. It seems
        // a little silly, but we **need** this target.
        targets.build = {
            executor: 'nx:noop',
            outputs: [root],
        };
        if (!options.useNxPluginOpenAPI) {
            targets.codegen = {
                executor: '@nx-dotnet/core:openapi-codegen',
                options: {
                    openapiJsonPath: `${swaggerProjectRoot(host, options.swaggerProject)}/swagger.json`,
                    outputProject: `generated-${options.codegenProject}`,
                },
                dependsOn: ['^swagger'],
            };
        }
    }
    (0, devkit_1.addProjectConfiguration)(host, options.swaggerProject, {
        root,
        targets,
        implicitDependencies: [options.project],
    });
}
function generateCodegenProject(host, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tasks = [];
        const nameWithDirectory = `generated-${options.codegenProject}`;
        if (options.useNxPluginOpenAPI) {
            yield setupOpenAPICodegen(host, tasks, options, nameWithDirectory);
        }
        else {
            yield setupNxNETCodegen(tasks, host, options, nameWithDirectory);
        }
        updateNxJsonForCodegenTargets(host, options);
        return tasks;
    });
}
function setupOpenAPICodegen(host, tasks, options, nameWithDirectory) {
    var _a, _b;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        (0, devkit_1.ensurePackage)(host, '@trumbitta/nx-plugin-openapi', '^1.12.1');
        tasks.push((0, devkit_1.addDependenciesToPackageJson)(host, {}, { '@trumbitta/nx-plugin-openapi': '^1.12.1' }));
        const { default: nxPluginOpenAPIGenerator, } = require('@trumbitta/nx-plugin-openapi/src/generators/api-lib/generator');
        const { default: nxPluginOpenAPIInitGenerator, } = require('@trumbitta/nx-plugin-openapi/src/generators/init/generator');
        tasks.push(yield nxPluginOpenAPIInitGenerator(host));
        tasks.push(yield nxPluginOpenAPIGenerator(host, {
            isRemoteSpec: false,
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            name: options.codegenProject,
            directory: 'generated',
            generator: 'typescript-fetch',
            sourceSpecLib: options.swaggerProject,
        }));
        const configuration = (0, devkit_1.readProjectConfiguration)(host, nameWithDirectory);
        (_a = configuration.targets) !== null && _a !== void 0 ? _a : (configuration.targets = {});
        const targetConfiguration = (_b = configuration.targets) === null || _b === void 0 ? void 0 : _b['generate-sources'];
        targetConfiguration.options['sourceSpecPathOrUrl'] = (0, devkit_1.joinPathFragments)(
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        (0, devkit_1.readProjectConfiguration)(host, options.swaggerProject).root, 'swagger.json');
        targetConfiguration.dependsOn = ['^swagger'];
        configuration.targets['codegen'] = targetConfiguration;
        delete configuration.targets['generate-sources'];
        (0, devkit_1.updateProjectConfiguration)(host, nameWithDirectory, configuration);
    });
}
function setupNxNETCodegen(tasks, host, options, nameWithDirectory) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { libraryGenerator, } = require('@nx/js');
        tasks.push(yield libraryGenerator(host, {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            name: options.codegenProject,
            directory: 'generated',
            buildable: true,
        }));
        const codegenProjectConfiguration = (0, devkit_1.readProjectConfiguration)(host, nameWithDirectory);
        (_a = codegenProjectConfiguration.implicitDependencies) !== null && _a !== void 0 ? _a : (codegenProjectConfiguration.implicitDependencies = []);
        codegenProjectConfiguration.implicitDependencies.push(options.swaggerProject ? options.swaggerProject : options.project);
        (0, devkit_1.updateProjectConfiguration)(host, nameWithDirectory, codegenProjectConfiguration);
    });
}
function updateNxJsonForCodegenTargets(host, options) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
    var _p, _q, _r, _s, _t, _u, _v;
    const wc = (0, devkit_1.readNxJson)(host);
    if (!wc) {
        return;
    }
    const cacheableOperations = (_c = (_b = (_a = wc.tasksRunnerOptions) === null || _a === void 0 ? void 0 : _a.default) === null || _b === void 0 ? void 0 : _b.options) === null || _c === void 0 ? void 0 : _c.cacheableOperations;
    if (cacheableOperations) {
        cacheableOperations.push('codegen', (_d = options.target) !== null && _d !== void 0 ? _d : 'swagger');
    }
    const newBuildDeps = ['codegen', '^codegen'];
    (_e = wc.targetDefaults) !== null && _e !== void 0 ? _e : (wc.targetDefaults = {});
    (_f = (_p = wc.targetDefaults)['build']) !== null && _f !== void 0 ? _f : (_p['build'] = {});
    (_g = (_q = wc.targetDefaults['build']).dependsOn) !== null && _g !== void 0 ? _g : (_q.dependsOn = []);
    wc.targetDefaults['build'].dependsOn = Array.from(new Set(wc.targetDefaults['build'].dependsOn.concat(newBuildDeps)));
    if ((0, semver_1.major)(devkit_1.NX_VERSION) >= 17) {
        (_h = (_r = wc.targetDefaults)['codegen']) !== null && _h !== void 0 ? _h : (_r['codegen'] = {});
        (_j = (_s = wc.targetDefaults['codegen']).cache) !== null && _j !== void 0 ? _j : (_s.cache = true);
        (_l = (_t = wc.targetDefaults)[_u = (_k = options.target) !== null && _k !== void 0 ? _k : 'swagger']) !== null && _l !== void 0 ? _l : (_t[_u] = {});
        (_o = (_v = wc.targetDefaults[(_m = options.target) !== null && _m !== void 0 ? _m : 'swagger']).cache) !== null && _o !== void 0 ? _o : (_v.cache = true);
    }
    (0, devkit_1.updateNxJson)(host, wc);
}
//# sourceMappingURL=add-swagger-target.js.map