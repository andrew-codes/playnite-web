"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const dotnet_1 = require("@nx-dotnet/dotnet");
const generate_project_1 = require("../utils/generate-project");
const generate_test_project_1 = require("../utils/generate-test-project");
function default_1(host, options, dotnetClient = new dotnet_1.DotNetClient((0, dotnet_1.dotnetFactory)())) {
    var _a, _b;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        // Reconstruct the original parameters as if the test project were generated at the same time as the target project.
        const project = (0, devkit_1.readProjectConfiguration)(host, options.name);
        const projectPaths = project.root.split('/');
        const directory = projectPaths.slice(1, -1).join('/'); // The middle portions contain the original path.
        const [name] = projectPaths.slice(-1); // The final folder contains the original name.
        const projectGeneratorOptions = Object.assign(Object.assign({}, options), { testProjectNameSuffix: options.suffix, name, language: options.language, testTemplate: options.testTemplate, directory, tags: (_a = project.tags) === null || _a === void 0 ? void 0 : _a.join(','), template: '', projectType: (_b = project.projectType) !== null && _b !== void 0 ? _b : 'library', skipSwaggerLib: true });
        const normalizedOptions = yield (0, generate_project_1.normalizeOptions)(host, projectGeneratorOptions);
        return (0, generate_test_project_1.GenerateTestProject)(host, normalizedOptions, dotnetClient);
    });
}
exports.default = default_1;
//# sourceMappingURL=generator.js.map