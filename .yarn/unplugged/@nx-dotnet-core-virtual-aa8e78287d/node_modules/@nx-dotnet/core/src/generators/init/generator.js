"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const dotnet_1 = require("@nx-dotnet/dotnet");
const utils_1 = require("@nx-dotnet/utils");
const path = require("path");
const semver_1 = require("semver");
const noop = () => void 0;
function initGenerator(host, _, // Nx will populate this with options, which are currently unused.
dotnetClient = new dotnet_1.DotNetClient((0, dotnet_1.dotnetFactory)())) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tasks = [];
        // Prior to Nx 17, nx-dotnet had a custom config file.
        if ((0, semver_1.major)(devkit_1.NX_VERSION) < 17) {
            const configObject = host.isFile(utils_1.CONFIG_FILE_PATH)
                ? (0, devkit_1.readJson)(host, utils_1.CONFIG_FILE_PATH)
                : {
                    nugetPackages: {},
                };
            configObject.nugetPackages = configObject.nugetPackages || {};
            host.write(utils_1.CONFIG_FILE_PATH, JSON.stringify(configObject, null, 2));
        }
        const nxJson = (0, devkit_1.readNxJson)(host);
        // Adds a `dotnet restore` operation to the prepare script.
        addPrepareScript(host);
        // Adds @nx-dotnet/core to nxJson
        updateNxJson(host, nxJson);
        // Setups up the .config/dotnet-tools.json for managing local .NET tools.
        initToolManifest(host, dotnetClient);
        // Creates Directory.Build.* to customize default C# builds.
        initBuildCustomization(host);
        // Adds @nx/js to package.json
        tasks.push(installNpmPackages(host));
        return () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            for (const task of tasks) {
                yield task();
            }
        });
    });
}
exports.initGenerator = initGenerator;
exports.default = initGenerator;
function installNpmPackages(host) {
    if (host.exists('package.json')) {
        return (0, devkit_1.addDependenciesToPackageJson)(host, {}, {
            '@nx/js': devkit_1.NX_VERSION,
        });
    }
    else {
        return noop;
    }
}
function hasPluginInNxJson(nxJson) {
    var _a;
    return !!((_a = nxJson === null || nxJson === void 0 ? void 0 : nxJson.plugins) === null || _a === void 0 ? void 0 : _a.some((x) => {
        const plugin = typeof x === 'string' ? x : x.plugin;
        return plugin === '@nx-dotnet/core';
    }));
}
function updateNxJson(host, nxJson) {
    if (nxJson && !hasPluginInNxJson(nxJson)) {
        nxJson.plugins = nxJson.plugins || [];
        nxJson.plugins.push('@nx-dotnet/core');
        (0, devkit_1.writeJson)(host, 'nx.json', nxJson);
    }
}
function initToolManifest(host, dotnetClient) {
    const initialized = host.exists('.config/dotnet-tools.json');
    if (!initialized && !(0, utils_1.isDryRun)()) {
        devkit_1.logger.log('Tool Manifest created for managing local .NET tools');
        dotnetClient.new('tool-manifest');
    }
}
function addPrepareScript(host) {
    var _a, _b, _c, _d;
    if (host.exists('package.json')) {
        const packageJson = (0, devkit_1.readJson)(host, 'package.json');
        const prepareSteps = (_c = (_b = (_a = packageJson.scripts) === null || _a === void 0 ? void 0 : _a.prepare) === null || _b === void 0 ? void 0 : _b.split('&&').map((x) => x.trim())) !== null && _c !== void 0 ? _c : [];
        const restoreScript = 'nx g @nx-dotnet/core:restore';
        if (!prepareSteps.includes(restoreScript)) {
            prepareSteps.push(restoreScript);
        }
        (_d = packageJson.scripts) !== null && _d !== void 0 ? _d : (packageJson.scripts = {});
        packageJson.scripts.prepare = prepareSteps.join(' && ');
        (0, devkit_1.writeJson)(host, 'package.json', packageJson);
    }
}
function initBuildCustomization(host) {
    const initialized = host.exists('Directory.Build.props');
    if (!initialized) {
        const checkModuleBoundariesScriptPath = (0, devkit_1.normalizePath)(path.relative(host.root, (0, utils_1.resolve)('@nx-dotnet/core/src/tasks/check-module-boundaries')));
        (0, devkit_1.generateFiles)(host, path.join(__dirname, 'templates/root'), '.', {
            tmpl: '',
            checkModuleBoundariesScriptPath,
        });
    }
}
//# sourceMappingURL=generator.js.map