"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* eslint-disable @typescript-eslint/no-unused-vars */
const devkit_1 = require("@nx/devkit");
const semver_1 = require("semver");
const xmldoc_1 = require("xmldoc");
function update(host) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projects = (0, devkit_1.getProjects)(host);
        const directoryBuildPropsExists = host.exists('Directory.Build.props');
        const directoryBuildPropsUpdated = directoryBuildPropsExists && updateDirectoryBuildProps(host);
        for (const [project, configuration] of projects) {
            const changed = updateTargetOutputs(directoryBuildPropsUpdated, configuration);
            if (changed) {
                (0, devkit_1.updateProjectConfiguration)(host, project, configuration);
            }
        }
        updateTargetDefaults(host, directoryBuildPropsUpdated);
        yield (0, devkit_1.formatFiles)(host);
    });
}
exports.default = update;
function updateDirectoryBuildProps(host) {
    const contents = host.read('Directory.Build.props', 'utf-8');
    if (!contents) {
        devkit_1.logger.warn('Unable to read "Directory.Build.props"');
        return false;
    }
    const xml = new xmldoc_1.XmlDocument(contents);
    const propertyGroups = xml.childrenNamed('PropertyGroup');
    const outputManipulationGroup = propertyGroups.find((group) => group.childNamed('OutputPath'));
    if (!outputManipulationGroup) {
        devkit_1.logger.warn('Unable to find property group containing output manipulation in Directory.Build.props');
        return false;
    }
    outputManipulationGroup.children.push(new xmldoc_1.XmlDocument(`<BaseIntermediateOutputPath>$(RepoRoot)dist/intermediates/$(ProjectRelativePath)/obj</BaseIntermediateOutputPath>`));
    outputManipulationGroup.children.push(new xmldoc_1.XmlDocument(`<IntermediateOutputPath>$(BaseIntermediateOutputPath)</IntermediateOutputPath>`));
    host.write('Directory.Build.props', xml.toString());
    return true;
}
function updateTargetOutputs(directoryBuildPropsUpdated, configuration) {
    var _a, _b, _c, _d, _e;
    let changed = false;
    const targets = Object.values((_a = configuration.targets) !== null && _a !== void 0 ? _a : {}).filter((x) => x.executor === '@nx-dotnet/core:build');
    for (const target of targets) {
        if (directoryBuildPropsUpdated) {
            if (!((_b = target.outputs) === null || _b === void 0 ? void 0 : _b.some((x) => x.includes('intermediates')))) {
                const prefix = getWorkspaceRootPrefix();
                (_c = target.outputs) === null || _c === void 0 ? void 0 : _c.push(prefix + `dist/intermediates/${configuration.root}`);
                changed = true;
            }
        }
        else if (!((_d = target.outputs) === null || _d === void 0 ? void 0 : _d.some((x) => x.includes('obj')))) {
            const prefix = getProjectRootPrefix(configuration);
            (_e = target.outputs) === null || _e === void 0 ? void 0 : _e.push(prefix + `obj`);
            changed = true;
        }
    }
    return changed;
}
function getProjectRootPrefix(configuration) {
    return (0, semver_1.gt)(devkit_1.NX_VERSION, '15.0.0-beta.0')
        ? '{projectRoot}/'
        : `${configuration.root}/`;
}
function getWorkspaceRootPrefix() {
    return (0, semver_1.gt)(devkit_1.NX_VERSION, '15.0.0-beta.0') ? '{workspaceRoot}/' : '';
}
function updateTargetDefaults(host, directoryBuildPropsUpdated) {
    var _a, _b, _c, _d;
    let changed = false;
    const nxJson = (0, devkit_1.readNxJson)(host);
    const targetDefaults = nxJson === null || nxJson === void 0 ? void 0 : nxJson.targetDefaults;
    if (!targetDefaults) {
        return;
    }
    const configuration = targetDefaults['@nx-dotnet/core:build'];
    if (configuration) {
        if (directoryBuildPropsUpdated) {
            if (!((_a = configuration.outputs) === null || _a === void 0 ? void 0 : _a.some((x) => x.includes('intermediates')))) {
                (_b = configuration.outputs) === null || _b === void 0 ? void 0 : _b.push(`{workspaceRoot}/dist/intermediates/{projectRoot}`);
                changed = true;
            }
        }
        else if (!((_c = configuration.outputs) === null || _c === void 0 ? void 0 : _c.some((x) => x.includes('obj')))) {
            (_d = configuration.outputs) === null || _d === void 0 ? void 0 : _d.push(`{projectRoot}/obj`);
            changed = true;
        }
    }
    if (changed && nxJson) {
        (0, devkit_1.writeJson)(host, 'nx.json', nxJson);
    }
}
//# sourceMappingURL=add-intermediate-outputs.js.map