"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNodes = exports.registerProjectTargets = exports.projectFilePatterns = void 0;
const devkit_1 = require("@nx/devkit");
const fs_1 = require("fs");
const path_1 = require("path");
const utils_1 = require("@nx-dotnet/utils");
const minimatch = require("minimatch");
const models_1 = require("../models");
exports.projectFilePatterns = (0, utils_1.readConfig)().inferProjects
    ? ['*.csproj', '*.fsproj', '*.vbproj']
    : [];
const registerProjectTargets = (projectFile, opts = (0, utils_1.readConfig)()) => {
    const targets = {};
    const { inferredTargets } = opts;
    if (inferredTargets !== false) {
        const projectFileContents = (0, fs_1.readFileSync)((0, path_1.resolve)(devkit_1.workspaceRoot, projectFile), 'utf8');
        if (projectFileContents.includes('Microsoft.NET.Test.Sdk') &&
            inferredTargets.test) {
            targets[inferredTargets.test] = (0, models_1.GetTestExecutorConfig)();
        }
        if (inferredTargets.build) {
            targets[inferredTargets.build] = (0, models_1.GetBuildExecutorConfiguration)((0, path_1.dirname)(projectFile));
        }
        if (inferredTargets.lint) {
            targets[inferredTargets.lint] = (0, models_1.GetLintExecutorConfiguration)();
        }
        if (inferredTargets.serve) {
            targets[inferredTargets.serve] = (0, models_1.GetServeExecutorConfig)();
        }
    }
    return targets;
};
exports.registerProjectTargets = registerProjectTargets;
// Used in Nx 16.8+
exports.createNodes = [
    `**/{${exports.projectFilePatterns.join(',')}}`,
    (file, ctxOrOpts, maybeCtx) => {
        const options = (0, utils_1.readConfig)();
        if (!options.inferProjects ||
            options.ignorePaths.some((p) => minimatch(file, p, {
                dot: true,
            }))) {
            return {};
        }
        const root = (0, path_1.dirname)(file);
        // eslint-disable-next-line no-useless-escape -- eslint's wrong
        const parts = root.split(/[\/\\]/g);
        const name = parts[parts.length - 1].toLowerCase();
        return {
            projects: {
                [name]: {
                    name,
                    root,
                    type: 'lib',
                    targets: (0, exports.registerProjectTargets)(file, options),
                    tags: options.tags,
                },
            },
        };
    },
];
//# sourceMappingURL=create-nodes.js.map