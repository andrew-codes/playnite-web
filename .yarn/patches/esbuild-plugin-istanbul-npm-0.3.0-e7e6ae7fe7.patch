diff --git a/lib/index.js b/lib/index.js
index cafd96bd0e83d94fcbd8524e44de49e0477e0034..e993793aacb49bc1988c3ab51556dbe0a6124308 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -1,40 +1,71 @@
 "use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+var __awaiter =
+  (this && this.__awaiter) ||
+  function (thisArg, _arguments, P, generator) {
+    function adopt(value) {
+      return value instanceof P
+        ? value
+        : new P(function (resolve) {
+            resolve(value);
+          });
+    }
     return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
+      function fulfilled(value) {
+        try {
+          step(generator.next(value));
+        } catch (e) {
+          reject(e);
+        }
+      }
+      function rejected(value) {
+        try {
+          step(generator["throw"](value));
+        } catch (e) {
+          reject(e);
+        }
+      }
+      function step(result) {
+        result.done
+          ? resolve(result.value)
+          : adopt(result.value).then(fulfilled, rejected);
+      }
+      step((generator = generator.apply(thisArg, _arguments || [])).next());
     });
-};
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
+  };
+var __importDefault =
+  (this && this.__importDefault) ||
+  function (mod) {
+    return mod && mod.__esModule ? mod : { default: mod };
+  };
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.esbuildPluginIstanbul = void 0;
 const fs_1 = __importDefault(require("fs"));
 const nyc_1 = __importDefault(require("nyc"));
 const config_util_js_1 = __importDefault(require("nyc/lib/config-util.js"));
-const defaultPreloader = (args) => __awaiter(void 0, void 0, void 0, function* () {
-    return ({
-        contents: yield fs_1.default.promises.readFile(args.path, "utf-8"),
+const defaultPreloader = (args) =>
+  __awaiter(void 0, void 0, void 0, function* () {
+    return {
+      contents: yield fs_1.default.promises.readFile(args.path, "utf-8"),
+    };
+  });
+const esbuildPluginIstanbul = ({ filter, loader, name, preloader }) => ({
+  name,
+  setup(build) {
+    return __awaiter(this, void 0, void 0, function* () {
+      const { argv } = yield (0, config_util_js_1.default)();
+      const nyc = new nyc_1.default(argv);
+      build.onLoad({ filter }, (args) =>
+        __awaiter(this, void 0, void 0, function* () {
+          if (args.path.includes("node_modules")) return;
+          const { contents: inCode } = yield (preloader || defaultPreloader)(
+            args
+          );
+          const outCode = nyc._transform(inCode, args.path) || inCode;
+          console.log("outCode", outCode, "there");
+          return { contents: outCode, loader };
+        })
+      );
     });
-});
-const esbuildPluginIstanbul = ({ filter, loader, name, preloader, }) => ({
-    name,
-    setup(build) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const { argv } = yield (0, config_util_js_1.default)();
-            const nyc = new nyc_1.default(argv);
-            build.onLoad({ filter }, (args) => __awaiter(this, void 0, void 0, function* () {
-                if (args.path.includes("node_modules"))
-                    return;
-                const { contents: inCode } = yield (preloader || defaultPreloader)(args);
-                const outCode = nyc._transform(inCode, args.path) || inCode;
-                return { contents: outCode, loader };
-            }));
-        });
-    },
+  },
 });
 exports.esbuildPluginIstanbul = esbuildPluginIstanbul;
