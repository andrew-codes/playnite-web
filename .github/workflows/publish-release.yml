name: "Release"

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  unit_tests_linux:
    name: Verify Unit Tests (Linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Extract node version from package.json
        uses: sergeysova/jq-action@v2
        id: node_version
        with:
          cmd: jq .engines.node package.json -r | sed -e 's/"//g' | sed -e 's/>=//g'
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ steps.node_version.outputs.value }}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      - name: Use Yarn
        run: corepack enable
      - name: Install deps
        run: yarn
      - name: Run all unit tests
        run: yarn nx run-many --target=test/unit --configuration=ci --parallel --verbose --projects=tag:linux
      - uses: codecov/codecov-action@v5
        if: always()
        with:
          files: "**/.test-runs/unit/lcov.info"
          flags: unit-tests
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  component_tests_linux:
    name: Verify Component Tests (Linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Extract node version from package.json
        uses: sergeysova/jq-action@v2
        id: node_version
        with:
          cmd: jq .engines.node package.json -r | sed -e 's/"//g' | sed -e 's/>=//g'
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ steps.node_version.outputs.value }}"
      - name: Use Yarn
        run: corepack enable
      - name: Install deps
        run: yarn
        env:
          YARN_ENABLE_HARDENED_MODE: "0"
      - name: Run all component tests
        run: yarn nx run-many --target=test/components --configuration=ci --parallel --verbose --projects=tag:linux
      - name: Upload visual regression artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: component-visual-regression
          path: apps/playnite-web/visual-regression-tests
      - name: Upload test video artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: component-cypress-videos
          path: apps/playnite-web/cypress/videos
      - name: Upload test screenshot artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: component-cypress-screenshots
          path: apps/playnite-web/cypress/screenshots
      - uses: codecov/codecov-action@v5
        if: always()
        with:
          files: "**/.test-runs/**/lcov.info"
          flags: component-tests
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  e2e_tests_app:
    name: Verify e2e Tests (Playnite Web App - Linux)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        containers: [1, 2, 3, 4, 5]
    env:
      REGISTRY: ghcr.io
      OWNER: andrew-codes
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Extract node version from package.json
        uses: sergeysova/jq-action@v2
        id: node_version
        with:
          cmd: jq .engines.node package.json -r | sed -e 's/"//g' | sed -e 's/>=//g'
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ steps.node_version.outputs.value }}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      - name: Use Yarn
        run: corepack enable
      - name: Install deps
        run: yarn
        env:
          YARN_ENABLE_HARDENED_MODE: "0"
      - name: Run all e2e tests
        run: yarn nx run playnite-web-app:test/e2e:ci --verbose --exclude='*,!tag:linux'
        env:
          NODE_ENV: production
          LOG_LEVEL: info
          PLATFORM: linux/amd64
          SPLIT: ${{ strategy.job-total }}
          SPLIT_INDEX: ${{ strategy.job-index }}
      - name: Upload visual regression artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: e2e-visual-regression-job-${{ matrix.containers }}
          path: apps/playnite-web/visual-regression-tests
      - name: Upload test video artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: e2e-cypress-videos-job-${{ matrix.containers }}
          path: apps/playnite-web/cypress/videos
      - name: Upload test screenshot artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: e2e-cypress-screenshots-job-${{ matrix.containers }}
          path: apps/playnite-web/cypress/screenshots

  e2e_tests_processor:
    name: Verify e2e Tests (Game Assets Processor - Linux)
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      OWNER: andrew-codes
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Extract node version from package.json
        uses: sergeysova/jq-action@v2
        id: node_version
        with:
          cmd: jq .engines.node package.json -r | sed -e 's/"//g' | sed -e 's/>=//g'
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ steps.node_version.outputs.value }}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      - name: Use Yarn
        run: corepack enable
      - name: Install deps
        run: yarn
        env:
          YARN_ENABLE_HARDENED_MODE: "0"
      - name: Run e2e tests
        run: yarn nx run game-assets-processor:test/e2e:ci --verbose --exclude='*,!tag:linux'
        env:
          NODE_ENV: production
          LOG_LEVEL: info
          PLATFORM: linux/amd64
      - uses: codecov/codecov-action@v5
        if: always()
        with:
          files: "**/.test-runs/**/lcov.info"
          flags: e2e-tests
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  unit_tests_windows:
    name: Verify Unit Tests (Windows)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Install jq
        run: curl -L -o jq.exe https://github.com/stedolan/jq/releases/latest/download/jq-win64.exe
      - name: Read Node version
        run: echo "value=$(./jq.exe -r .engines.node package.json | sed -e 's/>=//g' | sed -e 's/"//g')" >> $GITHUB_OUTPUT
        shell: bash
        id: node_version
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ steps.node_version.outputs.value }}"
      - name: Read Yarn version
        run: echo "value=$(./jq.exe -r .engines.yarn package.json | sed -e 's/"//g')" >> $GITHUB_OUTPUT
        shell: bash
        id: yarn_version
      - name: Enable yarn
        run: corepack enable
      - name: Install deps
        run: yarn
        env:
          YARN_ENABLE_HARDENED_MODE: "0"
      - name: Run all unit tests
        run: yarn nx run-many --target=test/unit --configuration=ci --parallel --verbose --projects=tag:windows

  package_windows:
    name: Package Windows projects
    runs-on: windows-latest
    permissions:
      packages: write
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
      - name: Download Playnite Toolbox
        run: |-
          mkdir -p .tools/Playnite && curl -L "https://github.com/JosefNemec/Playnite/releases/download/10.37/Playnite1037.zip" -o Playnite.zip && unzip Playnite.zip -d .tools/Playnite
      - name: Install jq
        run: curl -L -o jq.exe https://github.com/stedolan/jq/releases/latest/download/jq-win64.exe
      - name: Read Node version
        run: echo "value=$(./jq.exe -r .engines.node package.json | sed -e 's/>=//g' | sed -e 's/"//g')" >> $GITHUB_OUTPUT
        shell: bash
        id: node_version
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ steps.node_version.outputs.value }}"
      - name: Read Yarn version
        run: echo "value=$(./jq.exe -r .engines.yarn package.json | sed -e 's/"//g')" >> $GITHUB_OUTPUT
        shell: bash
        id: yarn_version
      - name: Enable yarn
        run: corepack enable
      - name: Install deps
        run: yarn
        env:
          YARN_ENABLE_HARDENED_MODE: "0"
      - name: Get next version
        run: echo "value=$(yarn node nextVersion.js)" >> $GITHUB_OUTPUT
        shell: bash
        id: nextVersion
      - name: Run Version
        run: yarn nx run-many --target=version --exclude='*,!tag:windows'
        env:
          NODE_ENV: production
          VERSION: "${{ steps.nextVersion.outputs.value }}"
      - name: Package projects
        run: yarn nx run-many --target=package --configuration=production --exclude='*,!tag:windows'
        env:
          NODE_ENV: production
          VERSION: "${{ steps.nextVersion.outputs.value }}"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: playnite-web-plugins
          path: apps/*/_packaged/**

  package_linux:
    name: Package Linux projects
    env:
      REGISTRY: ghcr.io
      OWNER: andrew-codes
    permissions:
      packages: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Extract node version from package.json
        uses: sergeysova/jq-action@v2
        id: node_version
        with:
          cmd: jq .engines.node package.json -r | sed -e 's/"//g' | sed -e 's/>=//g'
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ steps.node_version.outputs.value }}"
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ steps.node_version.outputs.value }}"
      - name: Use Yarn
        run: corepack enable
      - name: Install deps
        run: yarn
        env:
          YARN_ENABLE_HARDENED_MODE: "0"
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY}}
          username: ${{ env.OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      - name: Package projects
        run: yarn nx run-many --target=package --configuration=production --verbose --exclude='*,!tag:linux'
        env:
          NODE_ENV: production
          LOG_LEVEL: info
          PLATFORM: linux/amd64,linux/arm64
          PUBLISH: "true"
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}

  publish_release:
    name: Publish release
    needs:
      - unit_tests_linux
      - unit_tests_windows
      - component_tests_linux
      - e2e_tests_app
      - e2e_tests_processor
      - package_windows
      - package_linux
    env:
      REGISTRY: ghcr.io
      OWNER: andrew-codes
      PUBLISH: "true"
    permissions:
      packages: write
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Download plugin artifact
        uses: actions/download-artifact@v4
        with:
          path: _packaged
          name: playnite-web-plugins
      - name: Extract node version from package.json
        uses: sergeysova/jq-action@v2
        id: node_version
        with:
          cmd: jq .engines.node package.json -r | sed -e 's/"//g' | sed -e 's/>=//g'
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ steps.node_version.outputs.value }}"
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ steps.node_version.outputs.value }}"
      - name: Use Yarn
        run: corepack enable
      - name: Install deps
        run: yarn
        env:
          YARN_ENABLE_HARDENED_MODE: "0"
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY}}
          username: ${{ env.OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      - name: Semantic Release
        run: yarn release
        env:
          NODE_ENV: production
          LOG_LEVEL: info
          PLATFORM: linux/amd64,linux/arm64
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EXCLUDE: "*,!tag:linux"
          INCLUDE_GH_RELEASE: "true"
          GITHUB_SHA: ${{ github.sha }}
